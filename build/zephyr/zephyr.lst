
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c8 0e 00 20 c5 0e 00 00 51 24 00 00 81 0e 00 00     ... ....Q$......
	...
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
  2c:	4d 0d 00 00 00 00 00 00 00 00 00 00 ed 0c 00 00     M...............
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	11 16 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	bd 0d 00 00 bd 0d 00 00 bd 0d 00 00 bd 0d 00 00     ................
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
  50:	bd 0d 00 00 bd 0d 00 00 bd 0d 00 00 bd 0d 00 00     ................

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	bd 0d 00 00 bd 0d 00 00 bd 0d 00 00 bd 0d 00 00     ................
				*(const char **)buf = s;
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
  70:	bd 0d 00 00 bd 0d 00 00 bd 0d 00 00 bd 0d 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  80:	bd 0d 00 00 bd 0d 00 00 bd 0d 00 00 bd 0d 00 00     ................
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	bd 0d 00 00 bd 0d 00 00 bd 0d 00 00 bd 0d 00 00     ................
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	bd 0d 00 00 bd 0d 00 00 bd 0d 00 00 bd 0d 00 00     ................

Disassembly of section text:

000000b0 <__gnu_thumb1_case_uqi>:
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
      b0:	b402      	push	{r1}
      b2:	4671      	mov	r1, lr
			switch (*fmt) {
      b4:	0849      	lsrs	r1, r1, #1
      b6:	0049      	lsls	r1, r1, #1
      b8:	5c09      	ldrb	r1, [r1, r0]
      ba:	0049      	lsls	r1, r1, #1
      bc:	448e      	add	lr, r1
      be:	bc02      	pop	{r1}
      c0:	4770      	bx	lr
      c2:	46c0      	nop			; (mov r8, r8)

000000c4 <__gnu_thumb1_case_shi>:
      c4:	b403      	push	{r0, r1}
      c6:	4671      	mov	r1, lr
      c8:	0849      	lsrs	r1, r1, #1
      ca:	0040      	lsls	r0, r0, #1
      cc:	0049      	lsls	r1, r1, #1
      ce:	5e09      	ldrsh	r1, [r1, r0]
      d0:	0049      	lsls	r1, r1, #1
      d2:	448e      	add	lr, r1
      d4:	bc03      	pop	{r0, r1}
				parsing = false;
      d6:	4770      	bx	lr

000000d8 <__udivsi3>:
				continue;
      d8:	2900      	cmp	r1, #0
			switch (*fmt) {
      da:	d034      	beq.n	146 <CONFIG_FLASH_SIZE+0x46>

000000dc <.udivsi3_skip_div0_test>:
      dc:	2301      	movs	r3, #1
      de:	2200      	movs	r2, #0
      e0:	b410      	push	{r4}
      e2:	4288      	cmp	r0, r1
      e4:	d32c      	bcc.n	140 <CONFIG_FLASH_SIZE+0x40>
      e6:	2401      	movs	r4, #1
      e8:	0724      	lsls	r4, r4, #28
      ea:	42a1      	cmp	r1, r4
      ec:	d204      	bcs.n	f8 <.udivsi3_skip_div0_test+0x1c>
      ee:	4281      	cmp	r1, r0
      f0:	d202      	bcs.n	f8 <.udivsi3_skip_div0_test+0x1c>
      f2:	0109      	lsls	r1, r1, #4
      f4:	011b      	lsls	r3, r3, #4
      f6:	e7f8      	b.n	ea <.udivsi3_skip_div0_test+0xe>
      f8:	00e4      	lsls	r4, r4, #3
      fa:	42a1      	cmp	r1, r4
      fc:	d204      	bcs.n	108 <CONFIG_FLASH_SIZE+0x8>
      fe:	4281      	cmp	r1, r0
     100:	d202      	bcs.n	108 <CONFIG_FLASH_SIZE+0x8>
     102:	0049      	lsls	r1, r1, #1
     104:	005b      	lsls	r3, r3, #1
     106:	e7f8      	b.n	fa <.udivsi3_skip_div0_test+0x1e>
     108:	4288      	cmp	r0, r1
     10a:	d301      	bcc.n	110 <CONFIG_FLASH_SIZE+0x10>
     10c:	1a40      	subs	r0, r0, r1
     10e:	431a      	orrs	r2, r3
     110:	084c      	lsrs	r4, r1, #1
     112:	42a0      	cmp	r0, r4
     114:	d302      	bcc.n	11c <CONFIG_FLASH_SIZE+0x1c>
				parsing = false;
     116:	1b00      	subs	r0, r0, r4
			switch (*fmt) {
     118:	085c      	lsrs	r4, r3, #1
     11a:	4322      	orrs	r2, r4
     11c:	088c      	lsrs	r4, r1, #2
     11e:	42a0      	cmp	r0, r4
     120:	d302      	bcc.n	128 <CONFIG_FLASH_SIZE+0x28>
     122:	1b00      	subs	r0, r0, r4
     124:	089c      	lsrs	r4, r3, #2
     126:	4322      	orrs	r2, r4
     128:	08cc      	lsrs	r4, r1, #3
     12a:	42a0      	cmp	r0, r4
     12c:	d302      	bcc.n	134 <CONFIG_FLASH_SIZE+0x34>
     12e:	1b00      	subs	r0, r0, r4
     130:	08dc      	lsrs	r4, r3, #3
     132:	4322      	orrs	r2, r4
     134:	2800      	cmp	r0, #0
     136:	d003      	beq.n	140 <CONFIG_FLASH_SIZE+0x40>
     138:	091b      	lsrs	r3, r3, #4
     13a:	d001      	beq.n	140 <CONFIG_FLASH_SIZE+0x40>
     13c:	0909      	lsrs	r1, r1, #4
     13e:	e7e3      	b.n	108 <CONFIG_FLASH_SIZE+0x8>
     140:	0010      	movs	r0, r2
		buf = (void *) ROUND_UP(buf, align);
     142:	bc10      	pop	{r4}
     144:	4770      	bx	lr
     146:	b501      	push	{r0, lr}
     148:	2000      	movs	r0, #0
     14a:	f000 f80b 	bl	164 <__aeabi_idiv0>
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     14e:	bd02      	pop	{r1, pc}

00000150 <__aeabi_uidivmod>:
     150:	2900      	cmp	r1, #0
     152:	d0f8      	beq.n	146 <CONFIG_FLASH_SIZE+0x46>
     154:	b503      	push	{r0, r1, lr}
     156:	f7ff ffc1 	bl	dc <.udivsi3_skip_div0_test>
     15a:	bc0e      	pop	{r1, r2, r3}
     15c:	4342      	muls	r2, r0
		if (is_str_arg) {
     15e:	1a89      	subs	r1, r1, r2
     160:	4718      	bx	r3
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     162:	46c0      	nop			; (mov r8, r8)

00000164 <__aeabi_idiv0>:
     164:	4770      	bx	lr
			int v = va_arg(ap, int);
     166:	46c0      	nop			; (mov r8, r8)

00000168 <__clzsi2>:

			if (buf0 != NULL) {
				*(int *)buf = v;
     168:	211c      	movs	r1, #28
     16a:	2301      	movs	r3, #1
			}
			buf += sizeof(int);
     16c:	041b      	lsls	r3, r3, #16
     16e:	4298      	cmp	r0, r3
     170:	d301      	bcc.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     172:	0c00      	lsrs	r0, r0, #16
     174:	3910      	subs	r1, #16
				arg_idx--;
     176:	0a1b      	lsrs	r3, r3, #8
     178:	4298      	cmp	r0, r3
     17a:	d301      	bcc.n	180 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x13>
				parsing = false;
     17c:	0a00      	lsrs	r0, r0, #8
     17e:	3908      	subs	r1, #8
				if (fmt[-1] == 'l') {
     180:	091b      	lsrs	r3, r3, #4
     182:	4298      	cmp	r0, r3
     184:	d301      	bcc.n	18a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1d>
				parsing = false;
     186:	0900      	lsrs	r0, r0, #4
				if (fmt[-1] == 'l') {
     188:	3904      	subs	r1, #4
     18a:	a202      	add	r2, pc, #8	; (adr r2, 194 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x27>)
				align = VA_STACK_ALIGN(void *);
     18c:	5c10      	ldrb	r0, [r2, r0]
					if (fmt[-2] == 'l') {
     18e:	1840      	adds	r0, r0, r1
				size = sizeof(void *);
     190:	4770      	bx	lr
					if (fmt[-2] == 'l') {
     192:	46c0      	nop			; (mov r8, r8)
     194:	02020304 	.word	0x02020304
						align = VA_STACK_ALIGN(long long);
     198:	01010101 	.word	0x01010101
	...

000001a4 <__aeabi_uldivmod>:
					v.ld = va_arg(ap, long double);
     1a4:	2b00      	cmp	r3, #0
				buf = (void *) ROUND_UP(buf, align);
     1a6:	d111      	bne.n	1cc <__aeabi_uldivmod+0x28>
     1a8:	2a00      	cmp	r2, #0
					v.ld = va_arg(ap, long double);
     1aa:	d10f      	bne.n	1cc <__aeabi_uldivmod+0x28>
				if (buf0 != NULL) {
     1ac:	2900      	cmp	r1, #0
     1ae:	d100      	bne.n	1b2 <__aeabi_uldivmod+0xe>
					if (BUF_OFFSET + size > len) {
     1b0:	2800      	cmp	r0, #0
     1b2:	d002      	beq.n	1ba <__aeabi_uldivmod+0x16>
     1b4:	2100      	movs	r1, #0
     1b6:	43c9      	mvns	r1, r1
     1b8:	0008      	movs	r0, r1
     1ba:	b407      	push	{r0, r1, r2}
     1bc:	4802      	ldr	r0, [pc, #8]	; (1c8 <__aeabi_uldivmod+0x24>)
						*(long double *)buf = v.ld;
     1be:	a102      	add	r1, pc, #8	; (adr r1, 1c8 <__aeabi_uldivmod+0x24>)
     1c0:	1840      	adds	r0, r0, r1
				parsing = false;
     1c2:	9002      	str	r0, [sp, #8]
				buf += size;
     1c4:	bd03      	pop	{r0, r1, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
				parsing = false;
     1c8:	ffffff9d 	.word	0xffffff9d
			switch (*fmt) {
     1cc:	b403      	push	{r0, r1}
     1ce:	4668      	mov	r0, sp
     1d0:	b501      	push	{r0, lr}
     1d2:	9802      	ldr	r0, [sp, #8]
			if (*++fmt == '\0') {
     1d4:	f000 f84c 	bl	270 <__udivmoddi4>
     1d8:	9b01      	ldr	r3, [sp, #4]
     1da:	469e      	mov	lr, r3
			if (!parsing) {
     1dc:	b002      	add	sp, #8
     1de:	bc0c      	pop	{r2, r3}
     1e0:	4770      	bx	lr
     1e2:	46c0      	nop			; (mov r8, r8)

000001e4 <__aeabi_llsr>:
				if (*fmt == '%') {
     1e4:	40d0      	lsrs	r0, r2
     1e6:	000b      	movs	r3, r1
					arg_idx++;
     1e8:	40d1      	lsrs	r1, r2
     1ea:	469c      	mov	ip, r3
     1ec:	3a20      	subs	r2, #32
					parsing = true;
     1ee:	40d3      	lsrs	r3, r2
     1f0:	4318      	orrs	r0, r3
				align = VA_STACK_ALIGN(size_t);
     1f2:	4252      	negs	r2, r2
     1f4:	4663      	mov	r3, ip
			switch (*fmt) {
     1f6:	4093      	lsls	r3, r2
     1f8:	4318      	orrs	r0, r3
     1fa:	4770      	bx	lr

000001fc <__aeabi_llsl>:
     1fc:	4091      	lsls	r1, r2

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1fe:	0003      	movs	r3, r0
     200:	4090      	lsls	r0, r2
					return -EINVAL;
     202:	469c      	mov	ip, r3
     204:	3a20      	subs	r2, #32
			long long v = va_arg(ap, long long);
     206:	4093      	lsls	r3, r2

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     208:	4319      	orrs	r1, r3
			long long v = va_arg(ap, long long);
     20a:	4252      	negs	r2, r2
     20c:	4663      	mov	r3, ip
     20e:	40d3      	lsrs	r3, r2
					*(long long *)buf = v;
     210:	4319      	orrs	r1, r3
     212:	4770      	bx	lr

00000214 <__clzdi2>:
				}
			}
			buf += sizeof(long long);
     214:	b510      	push	{r4, lr}
     216:	2900      	cmp	r1, #0
     218:	d103      	bne.n	222 <__clzdi2+0xe>
     21a:	f7ff ffa5 	bl	168 <__clzsi2>
		if (is_str_arg) {
     21e:	3020      	adds	r0, #32
     220:	e002      	b.n	228 <__clzdi2+0x14>
		} else if (size == sizeof(int)) {
     222:	0008      	movs	r0, r1
     224:	f7ff ffa0 	bl	168 <__clzsi2>
			if (buf0 != NULL) {
     228:	bd10      	pop	{r4, pc}
		} else if (size == sizeof(long long)) {
     22a:	46c0      	nop			; (mov r8, r8)

0000022c <__aeabi_lmul>:
     22c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
			long long v = va_arg(ap, long long);
     22e:	0c04      	lsrs	r4, r0, #16
     230:	000d      	movs	r5, r1
     232:	b291      	uxth	r1, r2
     234:	000f      	movs	r7, r1
			if (buf0 != NULL) {
     236:	4361      	muls	r1, r4
			if (*++fmt == '\0') {
     238:	468c      	mov	ip, r1
     23a:	0006      	movs	r6, r0
     23c:	9301      	str	r3, [sp, #4]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     23e:	b283      	uxth	r3, r0
     240:	0c10      	lsrs	r0, r2, #16
     242:	435f      	muls	r7, r3
			s = va_arg(ap, char *);
     244:	4344      	muls	r4, r0
     246:	4358      	muls	r0, r3
     248:	0c3b      	lsrs	r3, r7, #16
			if (is_ro && !do_ro) {
     24a:	4460      	add	r0, ip
     24c:	181b      	adds	r3, r3, r0
     24e:	4299      	cmp	r1, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     250:	d902      	bls.n	258 <__aeabi_lmul+0x2c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     252:	2180      	movs	r1, #128	; 0x80
     254:	0249      	lsls	r1, r1, #9
     256:	1864      	adds	r4, r4, r1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     258:	9901      	ldr	r1, [sp, #4]
     25a:	4355      	muls	r5, r2
     25c:	4371      	muls	r1, r6
     25e:	0c18      	lsrs	r0, r3, #16
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     260:	1904      	adds	r4, r0, r4
     262:	041b      	lsls	r3, r3, #16
     264:	b2bf      	uxth	r7, r7
				if (buf0 != NULL) {
     266:	1949      	adds	r1, r1, r5
     268:	19d8      	adds	r0, r3, r7
					str_ptr_pos[s_idx] = s_ptr_idx;
     26a:	1909      	adds	r1, r1, r4
     26c:	b003      	add	sp, #12
     26e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000270 <__udivmoddi4>:
     270:	b5f0      	push	{r4, r5, r6, r7, lr}
     272:	0006      	movs	r6, r0
					str_ptr_arg[s_idx] = arg_idx;
     274:	000f      	movs	r7, r1
     276:	0015      	movs	r5, r2
     278:	001c      	movs	r4, r3
					if (is_ro) {
     27a:	b085      	sub	sp, #20
     27c:	428b      	cmp	r3, r1
     27e:	d863      	bhi.n	348 <__udivmoddi4+0xd8>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     280:	d101      	bne.n	286 <__udivmoddi4+0x16>
     282:	4282      	cmp	r2, r0
     284:	d860      	bhi.n	348 <__udivmoddi4+0xd8>
     286:	0021      	movs	r1, r4
     288:	0028      	movs	r0, r5
     28a:	f7ff ffc3 	bl	214 <__clzdi2>
						s_ro_cnt++;
     28e:	0039      	movs	r1, r7
     290:	9000      	str	r0, [sp, #0]
				s_idx++;
     292:	0030      	movs	r0, r6
     294:	f7ff ffbe 	bl	214 <__clzdi2>
			buf += sizeof(char *);
     298:	9b00      	ldr	r3, [sp, #0]
     29a:	0021      	movs	r1, r4
     29c:	1a1b      	subs	r3, r3, r0
			is_str_arg = false;
     29e:	001a      	movs	r2, r3
     2a0:	0028      	movs	r0, r5
     2a2:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     2a4:	f7ff ffaa 	bl	1fc <__aeabi_llsl>
				} else if (is_ro) {
     2a8:	9000      	str	r0, [sp, #0]
     2aa:	9101      	str	r1, [sp, #4]
					len += 1;
     2ac:	42b9      	cmp	r1, r7
     2ae:	d845      	bhi.n	33c <__udivmoddi4+0xcc>
					len += strlen(s) + 1 + 1;
     2b0:	d101      	bne.n	2b6 <__udivmoddi4+0x46>
     2b2:	42b0      	cmp	r0, r6
					len += 2;
     2b4:	d842      	bhi.n	33c <__udivmoddi4+0xcc>
     2b6:	9b00      	ldr	r3, [sp, #0]
     2b8:	9c01      	ldr	r4, [sp, #4]
				} else if (rws_pos_en) {
     2ba:	2001      	movs	r0, #1
     2bc:	2100      	movs	r1, #0
     2be:	9a03      	ldr	r2, [sp, #12]
					len += strlen(s) + 1 + 1;
     2c0:	1af6      	subs	r6, r6, r3
     2c2:	41a7      	sbcs	r7, r4
     2c4:	f7ff ff9a 	bl	1fc <__aeabi_llsl>
     2c8:	0004      	movs	r4, r0
     2ca:	000d      	movs	r5, r1
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2cc:	9b03      	ldr	r3, [sp, #12]
     2ce:	2b00      	cmp	r3, #0
     2d0:	d02b      	beq.n	32a <__udivmoddi4+0xba>
     2d2:	9b01      	ldr	r3, [sp, #4]
     2d4:	9a00      	ldr	r2, [sp, #0]
     2d6:	07db      	lsls	r3, r3, #31

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2d8:	0850      	lsrs	r0, r2, #1
     2da:	4318      	orrs	r0, r3
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2dc:	9b01      	ldr	r3, [sp, #4]
     2de:	0859      	lsrs	r1, r3, #1
     2e0:	9b03      	ldr	r3, [sp, #12]
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     2e2:	469c      	mov	ip, r3
     2e4:	42b9      	cmp	r1, r7
     2e6:	d82c      	bhi.n	342 <__udivmoddi4+0xd2>
     2e8:	d101      	bne.n	2ee <__udivmoddi4+0x7e>
     2ea:	42b0      	cmp	r0, r6
     2ec:	d829      	bhi.n	342 <__udivmoddi4+0xd2>
     2ee:	0032      	movs	r2, r6
     2f0:	003b      	movs	r3, r7
     2f2:	1a12      	subs	r2, r2, r0
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2f4:	418b      	sbcs	r3, r1
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2f6:	2601      	movs	r6, #1
	*(char **)buf0 = NULL;
     2f8:	1892      	adds	r2, r2, r2
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2fa:	415b      	adcs	r3, r3
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2fc:	2700      	movs	r7, #0
     2fe:	18b6      	adds	r6, r6, r2
	if (rws_pos_en) {
     300:	415f      	adcs	r7, r3
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     302:	2301      	movs	r3, #1
	if (rws_pos_en) {
     304:	425b      	negs	r3, r3
     306:	449c      	add	ip, r3
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     308:	4663      	mov	r3, ip
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     30a:	2b00      	cmp	r3, #0
     30c:	d1ea      	bne.n	2e4 <__udivmoddi4+0x74>
	if (s_ro_cnt) {
     30e:	0030      	movs	r0, r6
     310:	0039      	movs	r1, r7
			*buf++ = str_ptr_arg[i];
     312:	9a03      	ldr	r2, [sp, #12]
     314:	f7ff ff66 	bl	1e4 <__aeabi_llsr>
	for (i = 0; i < s_idx; i++) {
     318:	9a03      	ldr	r2, [sp, #12]
     31a:	19a4      	adds	r4, r4, r6
	return BUF_OFFSET;
     31c:	417d      	adcs	r5, r7
     31e:	0006      	movs	r6, r0
     320:	000f      	movs	r7, r1
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     322:	f7ff ff6b 	bl	1fc <__aeabi_llsl>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     326:	1a24      	subs	r4, r4, r0
     328:	418d      	sbcs	r5, r1
     32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     32c:	2b00      	cmp	r3, #0
     32e:	d001      	beq.n	334 <__udivmoddi4+0xc4>
     330:	601e      	str	r6, [r3, #0]
			if (BUF_OFFSET + 1 > len) {
     332:	605f      	str	r7, [r3, #4]
     334:	0020      	movs	r0, r4
     336:	0029      	movs	r1, r5
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     338:	b005      	add	sp, #20
			if (BUF_OFFSET + 1 > len) {
     33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     33c:	2400      	movs	r4, #0
     33e:	2500      	movs	r5, #0
			*buf++ = pos;
     340:	e7c4      	b.n	2cc <__udivmoddi4+0x5c>
     342:	19b6      	adds	r6, r6, r6
     344:	417f      	adcs	r7, r7
     346:	e7dc      	b.n	302 <__udivmoddi4+0x92>
     348:	2400      	movs	r4, #0
		for (i = 0; i < s_idx; i++) {
     34a:	2500      	movs	r5, #0
     34c:	e7ed      	b.n	32a <__udivmoddi4+0xba>
	...

00000350 <main>:
#include <zephyr/kernel.h>

void main(void) {
     350:	b510      	push	{r4, lr}

	while (1) {
		printk("The board is %s\n", CONFIG_BOARD);
     352:	4904      	ldr	r1, [pc, #16]	; (364 <main+0x14>)
     354:	4804      	ldr	r0, [pc, #16]	; (368 <main+0x18>)
     356:	f001 ffa2 	bl	229e <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     35a:	2100      	movs	r1, #0
     35c:	4803      	ldr	r0, [pc, #12]	; (36c <main+0x1c>)
     35e:	f001 fdaf 	bl	1ec0 <z_impl_k_sleep>
     362:	e7f6      	b.n	352 <main+0x2>
     364:	00002c58 	.word	0x00002c58
     368:	00002c66 	.word	0x00002c66
     36c:	00002710 	.word	0x00002710

00000370 <char_out>:
			*buf++ = str_ptr_arg[i];
     370:	b510      	push	{r4, lr}
     372:	4b02      	ldr	r3, [pc, #8]	; (37c <char_out+0xc>)
     374:	681b      	ldr	r3, [r3, #0]
			size = 0;
     376:	4798      	blx	r3
			*buf++ = str_ptr_arg[i];
     378:	bd10      	pop	{r4, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	20000000 	.word	0x20000000

00000380 <__printk_hook_install>:
		if (BUF_OFFSET + 1 + size > len) {
     380:	4b01      	ldr	r3, [pc, #4]	; (388 <__printk_hook_install+0x8>)
     382:	6018      	str	r0, [r3, #0]
     384:	4770      	bx	lr
     386:	46c0      	nop			; (mov r8, r8)
     388:	20000000 	.word	0x20000000

0000038c <vprintk>:
     38c:	b513      	push	{r0, r1, r4, lr}
     38e:	000b      	movs	r3, r1
     390:	2100      	movs	r1, #0
		*buf++ = str_ptr_pos[i];
     392:	4c03      	ldr	r4, [pc, #12]	; (3a0 <vprintk+0x14>)
     394:	0002      	movs	r2, r0
     396:	9100      	str	r1, [sp, #0]
     398:	0020      	movs	r0, r4
     39a:	f000 f803 	bl	3a4 <z_cbvprintf_impl>
     39e:	bd13      	pop	{r0, r1, r4, pc}
		memcpy(buf, s, size);
     3a0:	00000371 	.word	0x00000371

000003a4 <z_cbvprintf_impl>:
     3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3a6:	001c      	movs	r4, r3
		buf += size;
     3a8:	2700      	movs	r7, #0
     3aa:	b099      	sub	sp, #100	; 0x64
     3ac:	9004      	str	r0, [sp, #16]
	for (i = 0; i < s_idx; i++) {
     3ae:	9105      	str	r1, [sp, #20]
     3b0:	9208      	str	r2, [sp, #32]
     3b2:	9b08      	ldr	r3, [sp, #32]
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     3b4:	7818      	ldrb	r0, [r3, #0]
     3b6:	2800      	cmp	r0, #0
     3b8:	d101      	bne.n	3be <z_cbvprintf_impl+0x1a>
     3ba:	0038      	movs	r0, r7
     3bc:	e327      	b.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     3be:	9b08      	ldr	r3, [sp, #32]
			size = strlen(s) + 1;
     3c0:	3301      	adds	r3, #1
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     3c2:	9307      	str	r3, [sp, #28]
			size = strlen(s) + 1;
     3c4:	2825      	cmp	r0, #37	; 0x25
     3c6:	d007      	beq.n	3d8 <z_cbvprintf_impl+0x34>
     3c8:	9905      	ldr	r1, [sp, #20]
     3ca:	9b04      	ldr	r3, [sp, #16]
		return -EFAULT;
     3cc:	4798      	blx	r3
     3ce:	2800      	cmp	r0, #0
		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
		case '%':
			OUTC('%');
     3d0:	da00      	bge.n	3d4 <z_cbvprintf_impl+0x30>
     3d2:	e31c      	b.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
     3d4:	3701      	adds	r7, #1
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     3d6:	e1e3      	b.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
		} state = {
     3d8:	ad12      	add	r5, sp, #72	; 0x48
     3da:	2218      	movs	r2, #24
     3dc:	2100      	movs	r1, #0
     3de:	0028      	movs	r0, r5
     3e0:	f002 f858 	bl	2494 <memset>
	if (*sp == '%') {
     3e4:	9b08      	ldr	r3, [sp, #32]
     3e6:	785b      	ldrb	r3, [r3, #1]
     3e8:	2b25      	cmp	r3, #37	; 0x25
     3ea:	d114      	bne.n	416 <CONFIG_MAIN_STACK_SIZE+0x16>
		conv->specifier = *sp++;
     3ec:	9a08      	ldr	r2, [sp, #32]
     3ee:	72eb      	strb	r3, [r5, #11]
     3f0:	3202      	adds	r2, #2
     3f2:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
     3f4:	ab12      	add	r3, sp, #72	; 0x48
     3f6:	7a5a      	ldrb	r2, [r3, #9]
     3f8:	07d1      	lsls	r1, r2, #31
     3fa:	d400      	bmi.n	3fe <z_cbvprintf_impl+0x5a>
     3fc:	e17f      	b.n	6fe <CONFIG_MAIN_STACK_SIZE+0x2fe>
			width = va_arg(ap, int);
     3fe:	cc02      	ldmia	r4!, {r1}
     400:	9103      	str	r1, [sp, #12]
			if (width < 0) {
     402:	2900      	cmp	r1, #0
     404:	db00      	blt.n	408 <CONFIG_MAIN_STACK_SIZE+0x8>
     406:	e17f      	b.n	708 <CONFIG_MAIN_STACK_SIZE+0x308>
				conv->flag_dash = true;
     408:	2104      	movs	r1, #4
     40a:	7a18      	ldrb	r0, [r3, #8]
     40c:	4301      	orrs	r1, r0
     40e:	7219      	strb	r1, [r3, #8]
				width = -width;
     410:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
     412:	425b      	negs	r3, r3
     414:	e177      	b.n	706 <CONFIG_MAIN_STACK_SIZE+0x306>
     416:	2200      	movs	r2, #0
		switch (*sp) {
     418:	2601      	movs	r6, #1
     41a:	0015      	movs	r5, r2
     41c:	0010      	movs	r0, r2
     41e:	4694      	mov	ip, r2
     420:	9203      	str	r2, [sp, #12]
     422:	9b07      	ldr	r3, [sp, #28]
     424:	781b      	ldrb	r3, [r3, #0]
     426:	2b2b      	cmp	r3, #43	; 0x2b
     428:	d06f      	beq.n	50a <CONFIG_MAIN_STACK_SIZE+0x10a>
     42a:	d868      	bhi.n	4fe <CONFIG_MAIN_STACK_SIZE+0xfe>
     42c:	2b20      	cmp	r3, #32
     42e:	d071      	beq.n	514 <CONFIG_MAIN_STACK_SIZE+0x114>
     430:	2b23      	cmp	r3, #35	; 0x23
     432:	d071      	beq.n	518 <CONFIG_MAIN_STACK_SIZE+0x118>
     434:	2a00      	cmp	r2, #0
     436:	d005      	beq.n	444 <CONFIG_MAIN_STACK_SIZE+0x44>
     438:	ae12      	add	r6, sp, #72	; 0x48
     43a:	7a32      	ldrb	r2, [r6, #8]
     43c:	0011      	movs	r1, r2
     43e:	2240      	movs	r2, #64	; 0x40
     440:	430a      	orrs	r2, r1
     442:	7232      	strb	r2, [r6, #8]
     444:	2d00      	cmp	r5, #0
     446:	d004      	beq.n	452 <CONFIG_MAIN_STACK_SIZE+0x52>
     448:	2220      	movs	r2, #32
     44a:	ad12      	add	r5, sp, #72	; 0x48
     44c:	7a2e      	ldrb	r6, [r5, #8]
     44e:	4332      	orrs	r2, r6
     450:	722a      	strb	r2, [r5, #8]
     452:	2800      	cmp	r0, #0
     454:	d004      	beq.n	460 <CONFIG_MAIN_STACK_SIZE+0x60>
     456:	2210      	movs	r2, #16
     458:	a812      	add	r0, sp, #72	; 0x48
     45a:	7a05      	ldrb	r5, [r0, #8]
     45c:	432a      	orrs	r2, r5
     45e:	7202      	strb	r2, [r0, #8]
     460:	9a03      	ldr	r2, [sp, #12]
     462:	2a00      	cmp	r2, #0
     464:	d004      	beq.n	470 <CONFIG_MAIN_STACK_SIZE+0x70>
     466:	2208      	movs	r2, #8
     468:	a912      	add	r1, sp, #72	; 0x48
     46a:	7a08      	ldrb	r0, [r1, #8]
     46c:	4302      	orrs	r2, r0
     46e:	720a      	strb	r2, [r1, #8]
     470:	4662      	mov	r2, ip
     472:	2a00      	cmp	r2, #0
     474:	d004      	beq.n	480 <CONFIG_MAIN_STACK_SIZE+0x80>
     476:	2204      	movs	r2, #4
     478:	a912      	add	r1, sp, #72	; 0x48
     47a:	7a08      	ldrb	r0, [r1, #8]
     47c:	4302      	orrs	r2, r0
     47e:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
     480:	2144      	movs	r1, #68	; 0x44
     482:	a812      	add	r0, sp, #72	; 0x48
     484:	7a02      	ldrb	r2, [r0, #8]
     486:	4011      	ands	r1, r2
     488:	2944      	cmp	r1, #68	; 0x44
     48a:	d102      	bne.n	492 <CONFIG_MAIN_STACK_SIZE+0x92>
		conv->flag_zero = false;
     48c:	2140      	movs	r1, #64	; 0x40
     48e:	438a      	bics	r2, r1
     490:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
     492:	2280      	movs	r2, #128	; 0x80
     494:	7a01      	ldrb	r1, [r0, #8]
     496:	4252      	negs	r2, r2
     498:	430a      	orrs	r2, r1
     49a:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
     49c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     49e:	250a      	movs	r5, #10
     4a0:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
     4a2:	2b2a      	cmp	r3, #42	; 0x2a
     4a4:	d140      	bne.n	528 <CONFIG_MAIN_STACK_SIZE+0x128>
		conv->width_star = true;
     4a6:	7a41      	ldrb	r1, [r0, #9]
     4a8:	3b29      	subs	r3, #41	; 0x29
     4aa:	430b      	orrs	r3, r1
		return ++sp;
     4ac:	3201      	adds	r2, #1
		conv->width_star = true;
     4ae:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
     4b0:	7815      	ldrb	r5, [r2, #0]
     4b2:	2602      	movs	r6, #2
     4b4:	0029      	movs	r1, r5
     4b6:	392e      	subs	r1, #46	; 0x2e
     4b8:	424b      	negs	r3, r1
     4ba:	4159      	adcs	r1, r3
     4bc:	a812      	add	r0, sp, #72	; 0x48
     4be:	7a43      	ldrb	r3, [r0, #9]
     4c0:	0049      	lsls	r1, r1, #1
     4c2:	43b3      	bics	r3, r6
     4c4:	430b      	orrs	r3, r1
     4c6:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
     4c8:	2d2e      	cmp	r5, #46	; 0x2e
     4ca:	d145      	bne.n	558 <CONFIG_MAIN_STACK_SIZE+0x158>
	if (*sp == '*') {
     4cc:	7853      	ldrb	r3, [r2, #1]
     4ce:	2b2a      	cmp	r3, #42	; 0x2a
     4d0:	d03d      	beq.n	54e <CONFIG_MAIN_STACK_SIZE+0x14e>
	size_t val = 0;
     4d2:	2300      	movs	r3, #0
	++sp;
     4d4:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
     4d6:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     4d8:	7811      	ldrb	r1, [r2, #0]
     4da:	1c55      	adds	r5, r2, #1
     4dc:	0008      	movs	r0, r1
     4de:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     4e0:	2809      	cmp	r0, #9
     4e2:	d963      	bls.n	5ac <CONFIG_MAIN_STACK_SIZE+0x1ac>
	conv->prec_value = prec;
     4e4:	a912      	add	r1, sp, #72	; 0x48
     4e6:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
     4e8:	7a0d      	ldrb	r5, [r1, #8]
     4ea:	07a8      	lsls	r0, r5, #30
     4ec:	4318      	orrs	r0, r3
     4ee:	2302      	movs	r3, #2
     4f0:	439d      	bics	r5, r3
     4f2:	002b      	movs	r3, r5
     4f4:	0fc0      	lsrs	r0, r0, #31
     4f6:	0040      	lsls	r0, r0, #1
     4f8:	4303      	orrs	r3, r0
     4fa:	720b      	strb	r3, [r1, #8]
	return sp;
     4fc:	e02c      	b.n	558 <CONFIG_MAIN_STACK_SIZE+0x158>
		switch (*sp) {
     4fe:	2b2d      	cmp	r3, #45	; 0x2d
     500:	d00c      	beq.n	51c <CONFIG_MAIN_STACK_SIZE+0x11c>
     502:	2b30      	cmp	r3, #48	; 0x30
     504:	d196      	bne.n	434 <CONFIG_MAIN_STACK_SIZE+0x34>
     506:	0032      	movs	r2, r6
     508:	e000      	b.n	50c <CONFIG_MAIN_STACK_SIZE+0x10c>
     50a:	9603      	str	r6, [sp, #12]
			++sp;
     50c:	9b07      	ldr	r3, [sp, #28]
     50e:	3301      	adds	r3, #1
     510:	9307      	str	r3, [sp, #28]
	} while (loop);
     512:	e786      	b.n	422 <CONFIG_MAIN_STACK_SIZE+0x22>
		switch (*sp) {
     514:	0030      	movs	r0, r6
     516:	e7f9      	b.n	50c <CONFIG_MAIN_STACK_SIZE+0x10c>
     518:	0035      	movs	r5, r6
     51a:	e7f7      	b.n	50c <CONFIG_MAIN_STACK_SIZE+0x10c>
     51c:	46b4      	mov	ip, r6
     51e:	e7f5      	b.n	50c <CONFIG_MAIN_STACK_SIZE+0x10c>
		val = 10U * val + *sp++ - '0';
     520:	0032      	movs	r2, r6
     522:	4369      	muls	r1, r5
     524:	3930      	subs	r1, #48	; 0x30
     526:	1859      	adds	r1, r3, r1
     528:	7813      	ldrb	r3, [r2, #0]
     52a:	1c56      	adds	r6, r2, #1
     52c:	0018      	movs	r0, r3
     52e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     530:	2809      	cmp	r0, #9
     532:	d9f5      	bls.n	520 <CONFIG_MAIN_STACK_SIZE+0x120>
	if (sp != wp) {
     534:	9b07      	ldr	r3, [sp, #28]
     536:	4293      	cmp	r3, r2
     538:	d0ba      	beq.n	4b0 <CONFIG_MAIN_STACK_SIZE+0xb0>
		conv->unsupported |= ((conv->width_value < 0)
     53a:	2502      	movs	r5, #2
		conv->width_value = width;
     53c:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
     53e:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
     540:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
     542:	0fc9      	lsrs	r1, r1, #31
     544:	0049      	lsls	r1, r1, #1
     546:	43a8      	bics	r0, r5
     548:	4301      	orrs	r1, r0
     54a:	7219      	strb	r1, [r3, #8]
     54c:	e7b0      	b.n	4b0 <CONFIG_MAIN_STACK_SIZE+0xb0>
		conv->prec_star = true;
     54e:	2304      	movs	r3, #4
     550:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
     552:	3202      	adds	r2, #2
		conv->prec_star = true;
     554:	430b      	orrs	r3, r1
     556:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
     558:	7811      	ldrb	r1, [r2, #0]
     55a:	ab12      	add	r3, sp, #72	; 0x48
     55c:	296c      	cmp	r1, #108	; 0x6c
     55e:	d045      	beq.n	5ec <CONFIG_MAIN_STACK_SIZE+0x1ec>
     560:	d829      	bhi.n	5b6 <CONFIG_MAIN_STACK_SIZE+0x1b6>
     562:	2968      	cmp	r1, #104	; 0x68
     564:	d030      	beq.n	5c8 <CONFIG_MAIN_STACK_SIZE+0x1c8>
     566:	296a      	cmp	r1, #106	; 0x6a
     568:	d04c      	beq.n	604 <CONFIG_MAIN_STACK_SIZE+0x204>
     56a:	294c      	cmp	r1, #76	; 0x4c
     56c:	d054      	beq.n	618 <CONFIG_MAIN_STACK_SIZE+0x218>
	conv->specifier = *sp++;
     56e:	7811      	ldrb	r1, [r2, #0]
     570:	1c53      	adds	r3, r2, #1
     572:	aa12      	add	r2, sp, #72	; 0x48
     574:	9307      	str	r3, [sp, #28]
     576:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
     578:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
     57a:	2978      	cmp	r1, #120	; 0x78
     57c:	d900      	bls.n	580 <CONFIG_MAIN_STACK_SIZE+0x180>
     57e:	e0b9      	b.n	6f4 <CONFIG_MAIN_STACK_SIZE+0x2f4>
     580:	296d      	cmp	r1, #109	; 0x6d
     582:	d850      	bhi.n	626 <CONFIG_MAIN_STACK_SIZE+0x226>
     584:	2969      	cmp	r1, #105	; 0x69
     586:	d900      	bls.n	58a <CONFIG_MAIN_STACK_SIZE+0x18a>
     588:	e0b4      	b.n	6f4 <CONFIG_MAIN_STACK_SIZE+0x2f4>
     58a:	2957      	cmp	r1, #87	; 0x57
     58c:	d866      	bhi.n	65c <CONFIG_MAIN_STACK_SIZE+0x25c>
     58e:	2941      	cmp	r1, #65	; 0x41
     590:	d003      	beq.n	59a <CONFIG_MAIN_STACK_SIZE+0x19a>
     592:	3945      	subs	r1, #69	; 0x45
     594:	2902      	cmp	r1, #2
     596:	d900      	bls.n	59a <CONFIG_MAIN_STACK_SIZE+0x19a>
     598:	e0ac      	b.n	6f4 <CONFIG_MAIN_STACK_SIZE+0x2f4>
		conv->specifier_cat = SPECIFIER_FP;
     59a:	2307      	movs	r3, #7
     59c:	a912      	add	r1, sp, #72	; 0x48
     59e:	7a8a      	ldrb	r2, [r1, #10]
     5a0:	439a      	bics	r2, r3
     5a2:	3b03      	subs	r3, #3
     5a4:	4313      	orrs	r3, r2
     5a6:	728b      	strb	r3, [r1, #10]
			unsupported = true;
     5a8:	2301      	movs	r3, #1
			break;
     5aa:	e073      	b.n	694 <CONFIG_MAIN_STACK_SIZE+0x294>
		val = 10U * val + *sp++ - '0';
     5ac:	4373      	muls	r3, r6
     5ae:	3b30      	subs	r3, #48	; 0x30
     5b0:	002a      	movs	r2, r5
     5b2:	185b      	adds	r3, r3, r1
     5b4:	e790      	b.n	4d8 <CONFIG_MAIN_STACK_SIZE+0xd8>
	switch (*sp) {
     5b6:	2974      	cmp	r1, #116	; 0x74
     5b8:	d029      	beq.n	60e <CONFIG_MAIN_STACK_SIZE+0x20e>
     5ba:	297a      	cmp	r1, #122	; 0x7a
     5bc:	d1d7      	bne.n	56e <CONFIG_MAIN_STACK_SIZE+0x16e>
		conv->length_mod = LENGTH_Z;
     5be:	2178      	movs	r1, #120	; 0x78
     5c0:	7a58      	ldrb	r0, [r3, #9]
     5c2:	4388      	bics	r0, r1
     5c4:	3948      	subs	r1, #72	; 0x48
     5c6:	e00d      	b.n	5e4 <CONFIG_MAIN_STACK_SIZE+0x1e4>
		if (*++sp == 'h') {
     5c8:	7850      	ldrb	r0, [r2, #1]
     5ca:	2178      	movs	r1, #120	; 0x78
     5cc:	2868      	cmp	r0, #104	; 0x68
     5ce:	d106      	bne.n	5de <CONFIG_MAIN_STACK_SIZE+0x1de>
			conv->length_mod = LENGTH_HH;
     5d0:	7a58      	ldrb	r0, [r3, #9]
     5d2:	4388      	bics	r0, r1
     5d4:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
     5d6:	4301      	orrs	r1, r0
     5d8:	7259      	strb	r1, [r3, #9]
			++sp;
     5da:	3202      	adds	r2, #2
     5dc:	e7c7      	b.n	56e <CONFIG_MAIN_STACK_SIZE+0x16e>
			conv->length_mod = LENGTH_H;
     5de:	7a58      	ldrb	r0, [r3, #9]
     5e0:	4388      	bics	r0, r1
     5e2:	2110      	movs	r1, #16
     5e4:	4301      	orrs	r1, r0
     5e6:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
     5e8:	3201      	adds	r2, #1
     5ea:	e7c0      	b.n	56e <CONFIG_MAIN_STACK_SIZE+0x16e>
		if (*++sp == 'l') {
     5ec:	7850      	ldrb	r0, [r2, #1]
     5ee:	2178      	movs	r1, #120	; 0x78
     5f0:	286c      	cmp	r0, #108	; 0x6c
     5f2:	d103      	bne.n	5fc <CONFIG_MAIN_STACK_SIZE+0x1fc>
			conv->length_mod = LENGTH_LL;
     5f4:	7a58      	ldrb	r0, [r3, #9]
     5f6:	4388      	bics	r0, r1
     5f8:	3958      	subs	r1, #88	; 0x58
     5fa:	e7ec      	b.n	5d6 <CONFIG_MAIN_STACK_SIZE+0x1d6>
			conv->length_mod = LENGTH_L;
     5fc:	7a58      	ldrb	r0, [r3, #9]
     5fe:	4388      	bics	r0, r1
     600:	2118      	movs	r1, #24
     602:	e7ef      	b.n	5e4 <CONFIG_MAIN_STACK_SIZE+0x1e4>
		conv->length_mod = LENGTH_J;
     604:	2178      	movs	r1, #120	; 0x78
     606:	7a58      	ldrb	r0, [r3, #9]
     608:	4388      	bics	r0, r1
     60a:	3950      	subs	r1, #80	; 0x50
     60c:	e7ea      	b.n	5e4 <CONFIG_MAIN_STACK_SIZE+0x1e4>
		conv->length_mod = LENGTH_T;
     60e:	2178      	movs	r1, #120	; 0x78
     610:	7a58      	ldrb	r0, [r3, #9]
     612:	4388      	bics	r0, r1
     614:	3940      	subs	r1, #64	; 0x40
     616:	e7e5      	b.n	5e4 <CONFIG_MAIN_STACK_SIZE+0x1e4>
		conv->unsupported = true;
     618:	8918      	ldrh	r0, [r3, #8]
     61a:	49a5      	ldr	r1, [pc, #660]	; (8b0 <CONFIG_ISR_STACK_SIZE+0xb0>)
     61c:	4008      	ands	r0, r1
     61e:	49a5      	ldr	r1, [pc, #660]	; (8b4 <CONFIG_ISR_STACK_SIZE+0xb4>)
     620:	4301      	orrs	r1, r0
     622:	8119      	strh	r1, [r3, #8]
		break;
     624:	e7e0      	b.n	5e8 <CONFIG_MAIN_STACK_SIZE+0x1e8>
     626:	2001      	movs	r0, #1
     628:	0005      	movs	r5, r0
	switch (conv->specifier) {
     62a:	396e      	subs	r1, #110	; 0x6e
     62c:	b2c9      	uxtb	r1, r1
     62e:	408d      	lsls	r5, r1
     630:	0029      	movs	r1, r5
     632:	4da1      	ldr	r5, [pc, #644]	; (8b8 <CONFIG_ISR_STACK_SIZE+0xb8>)
     634:	4229      	tst	r1, r5
     636:	d138      	bne.n	6aa <CONFIG_MAIN_STACK_SIZE+0x2aa>
     638:	2524      	movs	r5, #36	; 0x24
     63a:	4229      	tst	r1, r5
     63c:	d151      	bne.n	6e2 <CONFIG_MAIN_STACK_SIZE+0x2e2>
     63e:	4201      	tst	r1, r0
     640:	d058      	beq.n	6f4 <CONFIG_MAIN_STACK_SIZE+0x2f4>
		conv->specifier_cat = SPECIFIER_PTR;
     642:	2107      	movs	r1, #7
     644:	7a90      	ldrb	r0, [r2, #10]
     646:	4388      	bics	r0, r1
     648:	3904      	subs	r1, #4
     64a:	4301      	orrs	r1, r0
     64c:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
     64e:	2278      	movs	r2, #120	; 0x78
     650:	4013      	ands	r3, r2
     652:	3b40      	subs	r3, #64	; 0x40
     654:	425a      	negs	r2, r3
     656:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
     658:	b2db      	uxtb	r3, r3
     65a:	e01b      	b.n	694 <CONFIG_MAIN_STACK_SIZE+0x294>
     65c:	2001      	movs	r0, #1
	switch (conv->specifier) {
     65e:	000d      	movs	r5, r1
     660:	0006      	movs	r6, r0
     662:	3d58      	subs	r5, #88	; 0x58
     664:	b2ed      	uxtb	r5, r5
     666:	40ae      	lsls	r6, r5
     668:	0035      	movs	r5, r6
     66a:	26e2      	movs	r6, #226	; 0xe2
     66c:	0236      	lsls	r6, r6, #8
     66e:	4235      	tst	r5, r6
     670:	d193      	bne.n	59a <CONFIG_MAIN_STACK_SIZE+0x19a>
     672:	4e92      	ldr	r6, [pc, #584]	; (8bc <CONFIG_ISR_STACK_SIZE+0xbc>)
     674:	4235      	tst	r5, r6
     676:	d122      	bne.n	6be <CONFIG_MAIN_STACK_SIZE+0x2be>
     678:	2184      	movs	r1, #132	; 0x84
     67a:	0289      	lsls	r1, r1, #10
     67c:	420d      	tst	r5, r1
     67e:	d039      	beq.n	6f4 <CONFIG_MAIN_STACK_SIZE+0x2f4>
		conv->specifier_cat = SPECIFIER_SINT;
     680:	2507      	movs	r5, #7
     682:	7a91      	ldrb	r1, [r2, #10]
     684:	43a9      	bics	r1, r5
     686:	4301      	orrs	r1, r0
     688:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
     68a:	2178      	movs	r1, #120	; 0x78
     68c:	400b      	ands	r3, r1
     68e:	2b40      	cmp	r3, #64	; 0x40
     690:	d011      	beq.n	6b6 <CONFIG_MAIN_STACK_SIZE+0x2b6>
	bool unsupported = false;
     692:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     694:	aa12      	add	r2, sp, #72	; 0x48
     696:	7a11      	ldrb	r1, [r2, #8]
     698:	0788      	lsls	r0, r1, #30
     69a:	0fc0      	lsrs	r0, r0, #31
     69c:	4303      	orrs	r3, r0
     69e:	2002      	movs	r0, #2
     6a0:	005b      	lsls	r3, r3, #1
     6a2:	4381      	bics	r1, r0
     6a4:	4319      	orrs	r1, r3
     6a6:	7211      	strb	r1, [r2, #8]
	return sp;
     6a8:	e6a4      	b.n	3f4 <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
     6aa:	2107      	movs	r1, #7
     6ac:	7a95      	ldrb	r5, [r2, #10]
     6ae:	438d      	bics	r5, r1
     6b0:	3905      	subs	r1, #5
     6b2:	4329      	orrs	r1, r5
     6b4:	e7e8      	b.n	688 <CONFIG_MAIN_STACK_SIZE+0x288>
			conv->invalid = true;
     6b6:	7a13      	ldrb	r3, [r2, #8]
     6b8:	4303      	orrs	r3, r0
		conv->invalid = true;
     6ba:	7213      	strb	r3, [r2, #8]
		break;
     6bc:	e7e9      	b.n	692 <CONFIG_MAIN_STACK_SIZE+0x292>
		conv->specifier_cat = SPECIFIER_UINT;
     6be:	2507      	movs	r5, #7
     6c0:	7a96      	ldrb	r6, [r2, #10]
     6c2:	43ae      	bics	r6, r5
     6c4:	3d05      	subs	r5, #5
     6c6:	4335      	orrs	r5, r6
     6c8:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
     6ca:	2578      	movs	r5, #120	; 0x78
     6cc:	402b      	ands	r3, r5
     6ce:	2b40      	cmp	r3, #64	; 0x40
     6d0:	d102      	bne.n	6d8 <CONFIG_MAIN_STACK_SIZE+0x2d8>
			conv->invalid = true;
     6d2:	7a15      	ldrb	r5, [r2, #8]
     6d4:	4328      	orrs	r0, r5
     6d6:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
     6d8:	2963      	cmp	r1, #99	; 0x63
     6da:	d1da      	bne.n	692 <CONFIG_MAIN_STACK_SIZE+0x292>
		if (conv->length_mod != LENGTH_NONE) {
     6dc:	1e5a      	subs	r2, r3, #1
     6de:	4193      	sbcs	r3, r2
     6e0:	e7ba      	b.n	658 <CONFIG_MAIN_STACK_SIZE+0x258>
		conv->specifier_cat = SPECIFIER_PTR;
     6e2:	2107      	movs	r1, #7
     6e4:	7a90      	ldrb	r0, [r2, #10]
     6e6:	4388      	bics	r0, r1
     6e8:	3904      	subs	r1, #4
     6ea:	4301      	orrs	r1, r0
     6ec:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
     6ee:	2278      	movs	r2, #120	; 0x78
     6f0:	4013      	ands	r3, r2
     6f2:	e7f3      	b.n	6dc <CONFIG_MAIN_STACK_SIZE+0x2dc>
		conv->invalid = true;
     6f4:	2301      	movs	r3, #1
     6f6:	aa12      	add	r2, sp, #72	; 0x48
     6f8:	7a11      	ldrb	r1, [r2, #8]
     6fa:	430b      	orrs	r3, r1
     6fc:	e7dd      	b.n	6ba <CONFIG_MAIN_STACK_SIZE+0x2ba>
		} else if (conv->width_present) {
     6fe:	7a19      	ldrb	r1, [r3, #8]
     700:	297f      	cmp	r1, #127	; 0x7f
     702:	d90f      	bls.n	724 <CONFIG_MAIN_STACK_SIZE+0x324>
			width = conv->width_value;
     704:	68db      	ldr	r3, [r3, #12]
		int width = -1;
     706:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
     708:	ab12      	add	r3, sp, #72	; 0x48
     70a:	0751      	lsls	r1, r2, #29
     70c:	d50c      	bpl.n	728 <CONFIG_MAIN_STACK_SIZE+0x328>
			int arg = va_arg(ap, int);
     70e:	cc04      	ldmia	r4!, {r2}
     710:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
     712:	2a00      	cmp	r2, #0
     714:	da0c      	bge.n	730 <CONFIG_MAIN_STACK_SIZE+0x330>
				conv->prec_present = false;
     716:	2102      	movs	r1, #2
     718:	7a5a      	ldrb	r2, [r3, #9]
     71a:	438a      	bics	r2, r1
     71c:	725a      	strb	r2, [r3, #9]
		int precision = -1;
     71e:	2301      	movs	r3, #1
     720:	425b      	negs	r3, r3
     722:	e004      	b.n	72e <CONFIG_MAIN_STACK_SIZE+0x32e>
		int width = -1;
     724:	2301      	movs	r3, #1
     726:	e674      	b.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>
		} else if (conv->prec_present) {
     728:	0792      	lsls	r2, r2, #30
     72a:	d5f8      	bpl.n	71e <CONFIG_MAIN_STACK_SIZE+0x31e>
			precision = conv->prec_value;
     72c:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
     72e:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
     730:	2500      	movs	r5, #0
     732:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
     734:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
     736:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
     738:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
     73a:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
     73c:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
     73e:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
     740:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
     742:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
     744:	2b01      	cmp	r3, #1
     746:	d130      	bne.n	7aa <CONFIG_MAIN_STACK_SIZE+0x3aa>
			switch (length_mod) {
     748:	1ed0      	subs	r0, r2, #3
     74a:	2804      	cmp	r0, #4
     74c:	d804      	bhi.n	758 <CONFIG_MAIN_STACK_SIZE+0x358>
     74e:	f7ff fcaf 	bl	b0 <__gnu_thumb1_case_uqi>
     752:	450e      	.short	0x450e
     754:	0e45      	.short	0x0e45
     756:	0e          	.byte	0x0e
     757:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     758:	6823      	ldr	r3, [r4, #0]
     75a:	17d8      	asrs	r0, r3, #31
     75c:	9312      	str	r3, [sp, #72]	; 0x48
     75e:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
     760:	2a01      	cmp	r2, #1
     762:	d109      	bne.n	778 <CONFIG_MAIN_STACK_SIZE+0x378>
				value->sint = (signed char)value->sint;
     764:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
     766:	9312      	str	r3, [sp, #72]	; 0x48
     768:	17db      	asrs	r3, r3, #31
     76a:	604b      	str	r3, [r1, #4]
     76c:	e006      	b.n	77c <CONFIG_MAIN_STACK_SIZE+0x37c>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     76e:	cc08      	ldmia	r4!, {r3}
     770:	9312      	str	r3, [sp, #72]	; 0x48
     772:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
     774:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
     776:	e002      	b.n	77e <CONFIG_MAIN_STACK_SIZE+0x37e>
			} else if (length_mod == LENGTH_H) {
     778:	2a02      	cmp	r2, #2
     77a:	d014      	beq.n	7a6 <CONFIG_MAIN_STACK_SIZE+0x3a6>
				value->sint = va_arg(ap, int);
     77c:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     77e:	a912      	add	r1, sp, #72	; 0x48
     780:	7a0b      	ldrb	r3, [r1, #8]
     782:	2003      	movs	r0, #3
     784:	001d      	movs	r5, r3
     786:	4005      	ands	r5, r0
     788:	4203      	tst	r3, r0
     78a:	d045      	beq.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
			OUTS(sp, fp);
     78c:	9b07      	ldr	r3, [sp, #28]
     78e:	9a08      	ldr	r2, [sp, #32]
     790:	9905      	ldr	r1, [sp, #20]
     792:	9804      	ldr	r0, [sp, #16]
     794:	f001 fde5 	bl	2362 <outs>
     798:	2800      	cmp	r0, #0
     79a:	da00      	bge.n	79e <CONFIG_MAIN_STACK_SIZE+0x39e>
     79c:	e137      	b.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
     79e:	183f      	adds	r7, r7, r0
			continue;
     7a0:	9b07      	ldr	r3, [sp, #28]
     7a2:	9308      	str	r3, [sp, #32]
     7a4:	e605      	b.n	3b2 <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
     7a6:	b21b      	sxth	r3, r3
     7a8:	e7dd      	b.n	766 <CONFIG_MAIN_STACK_SIZE+0x366>
		} else if (specifier_cat == SPECIFIER_UINT) {
     7aa:	2b02      	cmp	r3, #2
     7ac:	d125      	bne.n	7fa <CONFIG_MAIN_STACK_SIZE+0x3fa>
			switch (length_mod) {
     7ae:	1ed0      	subs	r0, r2, #3
     7b0:	2804      	cmp	r0, #4
     7b2:	d804      	bhi.n	7be <CONFIG_MAIN_STACK_SIZE+0x3be>
     7b4:	f7ff fc7c 	bl	b0 <__gnu_thumb1_case_uqi>
     7b8:	1912120d 	.word	0x1912120d
     7bc:	19          	.byte	0x19
     7bd:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     7be:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
     7c0:	2a01      	cmp	r2, #1
     7c2:	d016      	beq.n	7f2 <CONFIG_MAIN_STACK_SIZE+0x3f2>
				value->uint = va_arg(ap, unsigned int);
     7c4:	9312      	str	r3, [sp, #72]	; 0x48
     7c6:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
     7c8:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
     7ca:	2a02      	cmp	r2, #2
     7cc:	d1d7      	bne.n	77e <CONFIG_MAIN_STACK_SIZE+0x37e>
			value->ptr = va_arg(ap, void *);
     7ce:	9312      	str	r3, [sp, #72]	; 0x48
     7d0:	e7d5      	b.n	77e <CONFIG_MAIN_STACK_SIZE+0x37e>
					value->uint = (wchar_t)va_arg(ap,
     7d2:	cc08      	ldmia	r4!, {r3}
     7d4:	9312      	str	r3, [sp, #72]	; 0x48
     7d6:	2300      	movs	r3, #0
     7d8:	9313      	str	r3, [sp, #76]	; 0x4c
     7da:	e7d0      	b.n	77e <CONFIG_MAIN_STACK_SIZE+0x37e>
					(uint_value_type)va_arg(ap,
     7dc:	2307      	movs	r3, #7
     7de:	3407      	adds	r4, #7
     7e0:	439c      	bics	r4, r3
				value->uint =
     7e2:	cc03      	ldmia	r4!, {r0, r1}
     7e4:	9012      	str	r0, [sp, #72]	; 0x48
     7e6:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
     7e8:	e7c9      	b.n	77e <CONFIG_MAIN_STACK_SIZE+0x37e>
					(uint_value_type)va_arg(ap, size_t);
     7ea:	cc08      	ldmia	r4!, {r3}
     7ec:	9312      	str	r3, [sp, #72]	; 0x48
     7ee:	2300      	movs	r3, #0
     7f0:	e7c0      	b.n	774 <CONFIG_MAIN_STACK_SIZE+0x374>
				value->uint = (unsigned char)value->uint;
     7f2:	b2db      	uxtb	r3, r3
     7f4:	9312      	str	r3, [sp, #72]	; 0x48
     7f6:	604d      	str	r5, [r1, #4]
     7f8:	e7c1      	b.n	77e <CONFIG_MAIN_STACK_SIZE+0x37e>
		} else if (specifier_cat == SPECIFIER_FP) {
     7fa:	2b04      	cmp	r3, #4
     7fc:	d108      	bne.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
					(sint_value_type)va_arg(ap, long long);
     7fe:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     800:	3303      	adds	r3, #3
     802:	439c      	bics	r4, r3
     804:	6820      	ldr	r0, [r4, #0]
     806:	6861      	ldr	r1, [r4, #4]
     808:	3408      	adds	r4, #8
     80a:	9012      	str	r0, [sp, #72]	; 0x48
     80c:	9113      	str	r1, [sp, #76]	; 0x4c
     80e:	e7b6      	b.n	77e <CONFIG_MAIN_STACK_SIZE+0x37e>
		} else if (specifier_cat == SPECIFIER_PTR) {
     810:	2b03      	cmp	r3, #3
     812:	d1b4      	bne.n	77e <CONFIG_MAIN_STACK_SIZE+0x37e>
			value->ptr = va_arg(ap, void *);
     814:	cc08      	ldmia	r4!, {r3}
     816:	e7da      	b.n	7ce <CONFIG_MAIN_STACK_SIZE+0x3ce>
		switch (conv->specifier) {
     818:	7ac8      	ldrb	r0, [r1, #11]
     81a:	2878      	cmp	r0, #120	; 0x78
     81c:	d8c0      	bhi.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
     81e:	2862      	cmp	r0, #98	; 0x62
     820:	d82b      	bhi.n	87a <CONFIG_ISR_STACK_SIZE+0x7a>
     822:	2825      	cmp	r0, #37	; 0x25
     824:	d100      	bne.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
     826:	e5cf      	b.n	3c8 <z_cbvprintf_impl+0x24>
     828:	2858      	cmp	r0, #88	; 0x58
     82a:	d1b9      	bne.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
			bps = encode_uint(value->uint, conv, buf, bpe);
     82c:	9812      	ldr	r0, [sp, #72]	; 0x48
     82e:	9913      	ldr	r1, [sp, #76]	; 0x4c
     830:	231e      	movs	r3, #30
     832:	aa0a      	add	r2, sp, #40	; 0x28
     834:	189b      	adds	r3, r3, r2
     836:	9300      	str	r3, [sp, #0]
     838:	aa14      	add	r2, sp, #80	; 0x50
     83a:	ab0c      	add	r3, sp, #48	; 0x30
     83c:	f001 fd44 	bl	22c8 <encode_uint>
			if (precision >= 0) {
     840:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
     842:	0006      	movs	r6, r0
			if (precision >= 0) {
     844:	2b00      	cmp	r3, #0
     846:	db0d      	blt.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
				size_t len = bpe - bps;
     848:	231e      	movs	r3, #30
				conv->flag_zero = false;
     84a:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
     84c:	aa0a      	add	r2, sp, #40	; 0x28
     84e:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
     850:	aa12      	add	r2, sp, #72	; 0x48
     852:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
     854:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
     856:	4381      	bics	r1, r0
     858:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
     85a:	9906      	ldr	r1, [sp, #24]
     85c:	4299      	cmp	r1, r3
     85e:	d901      	bls.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
					conv->pad0_value = precision - (int)len;
     860:	1acb      	subs	r3, r1, r3
     862:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
     864:	2e00      	cmp	r6, #0
     866:	d09b      	beq.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     868:	231e      	movs	r3, #30
     86a:	aa0a      	add	r2, sp, #40	; 0x28
     86c:	189b      	adds	r3, r3, r2
     86e:	1b98      	subs	r0, r3, r6
		int pad_len = 0;

		if (sign != 0) {
     870:	9306      	str	r3, [sp, #24]
     872:	2d00      	cmp	r5, #0
     874:	d032      	beq.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
			nj_len += 1U;
     876:	3001      	adds	r0, #1
     878:	e030      	b.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
		switch (conv->specifier) {
     87a:	3863      	subs	r0, #99	; 0x63
     87c:	2815      	cmp	r0, #21
     87e:	d88f      	bhi.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
     880:	f7ff fc20 	bl	c4 <__gnu_thumb1_case_shi>
     884:	0068005e 	.word	0x0068005e
     888:	ff8eff8e 	.word	0xff8eff8e
     88c:	ff8eff8e 	.word	0xff8eff8e
     890:	ff8e0068 	.word	0xff8e0068
     894:	ff8eff8e 	.word	0xff8eff8e
     898:	00a0ff8e 	.word	0x00a0ff8e
     89c:	007c007a 	.word	0x007c007a
     8a0:	ff8eff8e 	.word	0xff8eff8e
     8a4:	ff8e001e 	.word	0xff8e001e
     8a8:	ff8e007a 	.word	0xff8e007a
     8ac:	007aff8e 	.word	0x007aff8e
     8b0:	ffff87fd 	.word	0xffff87fd
     8b4:	00004002 	.word	0x00004002
     8b8:	00000482 	.word	0x00000482
     8bc:	00000801 	.word	0x00000801
			if (precision >= 0) {
     8c0:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
     8c2:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
     8c4:	2b00      	cmp	r3, #0
     8c6:	db37      	blt.n	938 <CONFIG_ISR_STACK_SIZE+0x138>
				len = strnlen(bps, precision);
     8c8:	0019      	movs	r1, r3
     8ca:	0030      	movs	r0, r6
     8cc:	f001 fdcf 	bl	246e <strnlen>
			bpe = bps + len;
     8d0:	1833      	adds	r3, r6, r0
		char sign = 0;
     8d2:	2500      	movs	r5, #0
			bpe = bps + len;
     8d4:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
     8d6:	2e00      	cmp	r6, #0
     8d8:	d100      	bne.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
     8da:	e761      	b.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
		}

		if (conv->altform_0c) {
     8dc:	ab12      	add	r3, sp, #72	; 0x48
     8de:	7a9b      	ldrb	r3, [r3, #10]
     8e0:	2210      	movs	r2, #16
     8e2:	0019      	movs	r1, r3
     8e4:	4011      	ands	r1, r2
     8e6:	910b      	str	r1, [sp, #44]	; 0x2c
     8e8:	4213      	tst	r3, r2
     8ea:	d100      	bne.n	8ee <CONFIG_ISR_STACK_SIZE+0xee>
     8ec:	e085      	b.n	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
			nj_len += 2U;
     8ee:	3002      	adds	r0, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     8f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
     8f2:	920a      	str	r2, [sp, #40]	; 0x28
     8f4:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
     8f6:	065b      	lsls	r3, r3, #25
     8f8:	d501      	bpl.n	8fe <CONFIG_ISR_STACK_SIZE+0xfe>
			nj_len += conv->pad0_pre_exp;
     8fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
     8fc:	18c0      	adds	r0, r0, r3
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     8fe:	9b03      	ldr	r3, [sp, #12]
     900:	2b00      	cmp	r3, #0
     902:	dc00      	bgt.n	906 <CONFIG_ISR_STACK_SIZE+0x106>
     904:	e094      	b.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
			width -= (int)nj_len;
     906:	1a1b      	subs	r3, r3, r0
     908:	9303      	str	r3, [sp, #12]

			if (!conv->flag_dash) {
     90a:	ab12      	add	r3, sp, #72	; 0x48
     90c:	7a1b      	ldrb	r3, [r3, #8]
     90e:	075a      	lsls	r2, r3, #29
     910:	0fd1      	lsrs	r1, r2, #31
     912:	9108      	str	r1, [sp, #32]
     914:	2a00      	cmp	r2, #0
     916:	da00      	bge.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
     918:	e08a      	b.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     91a:	065b      	lsls	r3, r3, #25
     91c:	d400      	bmi.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     91e:	e078      	b.n	a12 <CONFIG_ISR_STACK_SIZE+0x212>
					if (sign != 0) {
     920:	2d00      	cmp	r5, #0
     922:	d007      	beq.n	934 <CONFIG_ISR_STACK_SIZE+0x134>
						OUTC(sign);
     924:	0028      	movs	r0, r5
     926:	9905      	ldr	r1, [sp, #20]
     928:	9b04      	ldr	r3, [sp, #16]
     92a:	4798      	blx	r3
     92c:	2800      	cmp	r0, #0
     92e:	db6e      	blt.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
     930:	9d08      	ldr	r5, [sp, #32]
     932:	3701      	adds	r7, #1
						sign = 0;
					}
					pad = '0';
     934:	2330      	movs	r3, #48	; 0x30
     936:	e06d      	b.n	a14 <CONFIG_ISR_STACK_SIZE+0x214>
				len = strlen(bps);
     938:	0030      	movs	r0, r6
     93a:	f001 fd90 	bl	245e <strlen>
     93e:	e7c7      	b.n	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
			bpe = buf + 1;
     940:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     942:	9a12      	ldr	r2, [sp, #72]	; 0x48
     944:	ae0c      	add	r6, sp, #48	; 0x30
     946:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
     948:	aa0a      	add	r2, sp, #40	; 0x28
     94a:	189b      	adds	r3, r3, r2
		char sign = 0;
     94c:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
     94e:	2001      	movs	r0, #1
			bpe = buf + 1;
     950:	9306      	str	r3, [sp, #24]
     952:	e7c3      	b.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
				sign = '+';
     954:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
     956:	071a      	lsls	r2, r3, #28
     958:	d402      	bmi.n	960 <CONFIG_ISR_STACK_SIZE+0x160>
			} else if (conv->flag_space) {
     95a:	06db      	lsls	r3, r3, #27
     95c:	0fdb      	lsrs	r3, r3, #31
     95e:	015d      	lsls	r5, r3, #5
			sint = value->sint;
     960:	9a12      	ldr	r2, [sp, #72]	; 0x48
     962:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
     964:	2b00      	cmp	r3, #0
     966:	db00      	blt.n	96a <CONFIG_ISR_STACK_SIZE+0x16a>
     968:	e760      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
				value->uint = (uint_value_type)-sint;
     96a:	2100      	movs	r1, #0
     96c:	4250      	negs	r0, r2
     96e:	4199      	sbcs	r1, r3
				sign = '-';
     970:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     972:	9012      	str	r0, [sp, #72]	; 0x48
     974:	9113      	str	r1, [sp, #76]	; 0x4c
     976:	e759      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		switch (conv->specifier) {
     978:	2500      	movs	r5, #0
     97a:	e757      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
			if (value->ptr != NULL) {
     97c:	9812      	ldr	r0, [sp, #72]	; 0x48
     97e:	ad12      	add	r5, sp, #72	; 0x48
     980:	2800      	cmp	r0, #0
     982:	d034      	beq.n	9ee <CONFIG_ISR_STACK_SIZE+0x1ee>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     984:	231e      	movs	r3, #30
     986:	aa0a      	add	r2, sp, #40	; 0x28
     988:	189b      	adds	r3, r3, r2
     98a:	9300      	str	r3, [sp, #0]
     98c:	aa14      	add	r2, sp, #80	; 0x50
     98e:	ab0c      	add	r3, sp, #48	; 0x30
     990:	2100      	movs	r1, #0
     992:	f001 fc99 	bl	22c8 <encode_uint>
				conv->altform_0c = true;
     996:	23ef      	movs	r3, #239	; 0xef
     998:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
     99a:	0006      	movs	r6, r0
				conv->altform_0c = true;
     99c:	401a      	ands	r2, r3
     99e:	4b48      	ldr	r3, [pc, #288]	; (ac0 <CONFIG_ISR_STACK_SIZE+0x2c0>)
     9a0:	4313      	orrs	r3, r2
     9a2:	816b      	strh	r3, [r5, #10]
		char sign = 0;
     9a4:	2500      	movs	r5, #0
			if (precision >= 0) {
     9a6:	9b06      	ldr	r3, [sp, #24]
     9a8:	42ab      	cmp	r3, r5
     9aa:	db00      	blt.n	9ae <CONFIG_ISR_STACK_SIZE+0x1ae>
     9ac:	e74c      	b.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
		if (bps == NULL) {
     9ae:	42a8      	cmp	r0, r5
     9b0:	d100      	bne.n	9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
     9b2:	e6f5      	b.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
		size_t nj_len = (bpe - bps);
     9b4:	231e      	movs	r3, #30
     9b6:	aa0a      	add	r2, sp, #40	; 0x28
     9b8:	189b      	adds	r3, r3, r2
     9ba:	1a18      	subs	r0, r3, r0
     9bc:	231e      	movs	r3, #30
     9be:	189b      	adds	r3, r3, r2
     9c0:	9306      	str	r3, [sp, #24]
     9c2:	e78b      	b.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
				store_count(conv, value->ptr, count);
     9c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
     9c6:	2a07      	cmp	r2, #7
     9c8:	d900      	bls.n	9cc <CONFIG_ISR_STACK_SIZE+0x1cc>
     9ca:	e6e9      	b.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
     9cc:	0010      	movs	r0, r2
     9ce:	f7ff fb6f 	bl	b0 <__gnu_thumb1_case_uqi>
     9d2:	040c      	.short	0x040c
     9d4:	08080c06 	.word	0x08080c06
     9d8:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     9da:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
     9dc:	e6e0      	b.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
		*(short *)dp = (short)count;
     9de:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
     9e0:	e6de      	b.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
		*(intmax_t *)dp = (intmax_t)count;
     9e2:	17fa      	asrs	r2, r7, #31
     9e4:	601f      	str	r7, [r3, #0]
     9e6:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
     9e8:	e6da      	b.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     9ea:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
     9ec:	e6d8      	b.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
			bpe = bps + 5;
     9ee:	4b35      	ldr	r3, [pc, #212]	; (ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>)
		char sign = 0;
     9f0:	0005      	movs	r5, r0
     9f2:	4e35      	ldr	r6, [pc, #212]	; (ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>)
		size_t nj_len = (bpe - bps);
     9f4:	2005      	movs	r0, #5
			bpe = bps + 5;
     9f6:	9306      	str	r3, [sp, #24]
     9f8:	e770      	b.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
		} else if (conv->altform_0) {
     9fa:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     9fc:	0fd2      	lsrs	r2, r2, #31
     9fe:	1880      	adds	r0, r0, r2
     a00:	e776      	b.n	8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
				}

				while (width-- > 0) {
					OUTC(pad);
     a02:	9905      	ldr	r1, [sp, #20]
     a04:	9809      	ldr	r0, [sp, #36]	; 0x24
     a06:	9b04      	ldr	r3, [sp, #16]
     a08:	4798      	blx	r3
     a0a:	2800      	cmp	r0, #0
     a0c:	da05      	bge.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
	}

	return count;
#undef OUTS
#undef OUTC
}
     a0e:	b019      	add	sp, #100	; 0x64
     a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
     a12:	2320      	movs	r3, #32
					pad = '0';
     a14:	9309      	str	r3, [sp, #36]	; 0x24
     a16:	9b03      	ldr	r3, [sp, #12]
     a18:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
     a1a:	9b08      	ldr	r3, [sp, #32]
     a1c:	001a      	movs	r2, r3
     a1e:	3a01      	subs	r2, #1
     a20:	9208      	str	r2, [sp, #32]
     a22:	2b00      	cmp	r3, #0
     a24:	dced      	bgt.n	a02 <CONFIG_ISR_STACK_SIZE+0x202>
     a26:	9a03      	ldr	r2, [sp, #12]
     a28:	19d7      	adds	r7, r2, r7
     a2a:	1aff      	subs	r7, r7, r3
     a2c:	9b08      	ldr	r3, [sp, #32]
     a2e:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
     a30:	2d00      	cmp	r5, #0
     a32:	d006      	beq.n	a42 <CONFIG_ISR_STACK_SIZE+0x242>
			OUTC(sign);
     a34:	0028      	movs	r0, r5
     a36:	9905      	ldr	r1, [sp, #20]
     a38:	9b04      	ldr	r3, [sp, #16]
     a3a:	4798      	blx	r3
     a3c:	2800      	cmp	r0, #0
     a3e:	dbe6      	blt.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
     a40:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
     a42:	ab12      	add	r3, sp, #72	; 0x48
     a44:	7a9b      	ldrb	r3, [r3, #10]
     a46:	06da      	lsls	r2, r3, #27
     a48:	d401      	bmi.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
     a4a:	071b      	lsls	r3, r3, #28
     a4c:	d506      	bpl.n	a5c <CONFIG_ISR_STACK_SIZE+0x25c>
				OUTC('0');
     a4e:	2030      	movs	r0, #48	; 0x30
     a50:	9905      	ldr	r1, [sp, #20]
     a52:	9b04      	ldr	r3, [sp, #16]
     a54:	4798      	blx	r3
     a56:	2800      	cmp	r0, #0
     a58:	dbd9      	blt.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
     a5a:	3701      	adds	r7, #1
			if (conv->altform_0c) {
     a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a5e:	2b00      	cmp	r3, #0
     a60:	d007      	beq.n	a72 <CONFIG_ISR_STACK_SIZE+0x272>
				OUTC(conv->specifier);
     a62:	ab12      	add	r3, sp, #72	; 0x48
     a64:	7ad8      	ldrb	r0, [r3, #11]
     a66:	9905      	ldr	r1, [sp, #20]
     a68:	9b04      	ldr	r3, [sp, #16]
     a6a:	4798      	blx	r3
     a6c:	2800      	cmp	r0, #0
     a6e:	dbce      	blt.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
     a70:	3701      	adds	r7, #1
				while (width-- > 0) {
     a72:	003d      	movs	r5, r7
     a74:	e006      	b.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
				OUTC('0');
     a76:	2030      	movs	r0, #48	; 0x30
     a78:	9905      	ldr	r1, [sp, #20]
     a7a:	9b04      	ldr	r3, [sp, #16]
     a7c:	4798      	blx	r3
     a7e:	2800      	cmp	r0, #0
     a80:	dbc5      	blt.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
     a82:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     a86:	19db      	adds	r3, r3, r7
     a88:	1b5b      	subs	r3, r3, r5
     a8a:	2b00      	cmp	r3, #0
     a8c:	dcf3      	bgt.n	a76 <CONFIG_ISR_STACK_SIZE+0x276>
			OUTS(bps, bpe);
     a8e:	0032      	movs	r2, r6
     a90:	9b06      	ldr	r3, [sp, #24]
     a92:	9905      	ldr	r1, [sp, #20]
     a94:	9804      	ldr	r0, [sp, #16]
     a96:	f001 fc64 	bl	2362 <outs>
     a9a:	2800      	cmp	r0, #0
     a9c:	dbb7      	blt.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
     a9e:	1947      	adds	r7, r0, r5
     aa0:	003d      	movs	r5, r7
		while (width > 0) {
     aa2:	9b03      	ldr	r3, [sp, #12]
     aa4:	195b      	adds	r3, r3, r5
     aa6:	1bdb      	subs	r3, r3, r7
     aa8:	2b00      	cmp	r3, #0
     aaa:	dc00      	bgt.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
     aac:	e678      	b.n	7a0 <CONFIG_MAIN_STACK_SIZE+0x3a0>
			OUTC(' ');
     aae:	2020      	movs	r0, #32
     ab0:	9905      	ldr	r1, [sp, #20]
     ab2:	9b04      	ldr	r3, [sp, #16]
     ab4:	4798      	blx	r3
     ab6:	2800      	cmp	r0, #0
     ab8:	dba9      	blt.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
     aba:	3701      	adds	r7, #1
			--width;
     abc:	e7f1      	b.n	aa2 <CONFIG_ISR_STACK_SIZE+0x2a2>
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	00007810 	.word	0x00007810
     ac4:	00002c8d 	.word	0x00002c8d
     ac8:	00002c88 	.word	0x00002c88

00000acc <wait_gclk_synchronization>:
#endif
}

static void wait_gclk_synchronization(void)
{
	while (GCLK->STATUS.bit.SYNCBUSY) {
     acc:	4a02      	ldr	r2, [pc, #8]	; (ad8 <wait_gclk_synchronization+0xc>)
     ace:	7853      	ldrb	r3, [r2, #1]
     ad0:	09db      	lsrs	r3, r3, #7
     ad2:	d1fc      	bne.n	ace <wait_gclk_synchronization+0x2>
	}
}
     ad4:	4770      	bx	lr
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	40000c00 	.word	0x40000c00

00000adc <atmel_samd_init>:

	/* TODO(mlhx): enable clock failure detection? */
}

static int atmel_samd_init(const struct device *arg)
{
     adc:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	__asm__ volatile("mrs %0, PRIMASK;"
     ade:	f3ef 8610 	mrs	r6, PRIMASK
     ae2:	b672      	cpsid	i
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     ae4:	231e      	movs	r3, #30
     ae6:	4938      	ldr	r1, [pc, #224]	; (bc8 <atmel_samd_init+0xec>)
	SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC(0);
     ae8:	4c38      	ldr	r4, [pc, #224]	; (bcc <atmel_samd_init+0xf0>)
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     aea:	684a      	ldr	r2, [r1, #4]
     aec:	439a      	bics	r2, r3
     aee:	3b1c      	subs	r3, #28
     af0:	4313      	orrs	r3, r2
     af2:	604b      	str	r3, [r1, #4]
	SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC(0);
     af4:	6a23      	ldr	r3, [r4, #32]
     af6:	4a36      	ldr	r2, [pc, #216]	; (bd0 <atmel_samd_init+0xf4>)
     af8:	4013      	ands	r3, r2
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
     afa:	2280      	movs	r2, #128	; 0x80
	SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC(0);
     afc:	6223      	str	r3, [r4, #32]
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
     afe:	6a23      	ldr	r3, [r4, #32]
     b00:	4393      	bics	r3, r2
	SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_CALIB(calib) |
     b02:	22fe      	movs	r2, #254	; 0xfe
	SYSCTRL->OSC8M.bit.ONDEMAND = 0;
     b04:	6223      	str	r3, [r4, #32]
	uint32_t fuse = *(uint32_t *)FUSES_OSC32K_CAL_ADDR;
     b06:	4b33      	ldr	r3, [pc, #204]	; (bd4 <atmel_samd_init+0xf8>)
	SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_CALIB(calib) |
     b08:	03d2      	lsls	r2, r2, #15
	uint32_t calib = (fuse & FUSES_OSC32K_CAL_Msk) >> FUSES_OSC32K_CAL_Pos;
     b0a:	681b      	ldr	r3, [r3, #0]
	SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_CALIB(calib) |
     b0c:	029b      	lsls	r3, r3, #10
     b0e:	4013      	ands	r3, r2
			      SYSCTRL_OSC32K_EN32K | SYSCTRL_OSC32K_ENABLE;
     b10:	4a31      	ldr	r2, [pc, #196]	; (bd8 <atmel_samd_init+0xfc>)
     b12:	4313      	orrs	r3, r2
	SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_CALIB(calib) |
     b14:	61a3      	str	r3, [r4, #24]
	while (!SYSCTRL->PCLKSR.bit.OSC32KRDY) {
     b16:	68e3      	ldr	r3, [r4, #12]
     b18:	075b      	lsls	r3, r3, #29
     b1a:	d5fc      	bpl.n	b16 <atmel_samd_init+0x3a>
	SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP(6) |
     b1c:	4b2f      	ldr	r3, [pc, #188]	; (bdc <atmel_samd_init+0x100>)
     b1e:	82a3      	strh	r3, [r4, #20]
	SYSCTRL->XOSC32K.bit.ENABLE = 1;
     b20:	2302      	movs	r3, #2
     b22:	8aa2      	ldrh	r2, [r4, #20]
     b24:	4313      	orrs	r3, r2
     b26:	82a3      	strh	r3, [r4, #20]
	while (!SYSCTRL->PCLKSR.bit.XOSC32KRDY) {
     b28:	68e3      	ldr	r3, [r4, #12]
     b2a:	079b      	lsls	r3, r3, #30
     b2c:	d5fc      	bpl.n	b28 <atmel_samd_init+0x4c>
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(0);
     b2e:	2301      	movs	r3, #1
     b30:	4d2b      	ldr	r5, [pc, #172]	; (be0 <atmel_samd_init+0x104>)
     b32:	60ab      	str	r3, [r5, #8]
	wait_gclk_synchronization();
     b34:	f7ff ffca 	bl	acc <wait_gclk_synchronization>
	GCLK->GENCTRL.reg =
     b38:	4b2a      	ldr	r3, [pc, #168]	; (be4 <atmel_samd_init+0x108>)
     b3a:	606b      	str	r3, [r5, #4]
	wait_gclk_synchronization();
     b3c:	f7ff ffc6 	bl	acc <wait_gclk_synchronization>
	GCLK->CLKCTRL.reg =
     b40:	2382      	movs	r3, #130	; 0x82
     b42:	01db      	lsls	r3, r3, #7
     b44:	806b      	strh	r3, [r5, #2]
	wait_gclk_synchronization();
     b46:	f7ff ffc1 	bl	acc <wait_gclk_synchronization>
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     b4a:	2302      	movs	r3, #2
     b4c:	84a3      	strh	r3, [r4, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {
     b4e:	68e3      	ldr	r3, [r4, #12]
     b50:	06db      	lsls	r3, r3, #27
     b52:	d5fc      	bpl.n	b4e <atmel_samd_init+0x72>
	SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP(31) |
     b54:	4b24      	ldr	r3, [pc, #144]	; (be8 <atmel_samd_init+0x10c>)
     b56:	62e3      	str	r3, [r4, #44]	; 0x2c
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {
     b58:	68e3      	ldr	r3, [r4, #12]
     b5a:	06db      	lsls	r3, r3, #27
     b5c:	d5fc      	bpl.n	b58 <atmel_samd_init+0x7c>
	SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE |
     b5e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
     b60:	4b22      	ldr	r3, [pc, #136]	; (bec <atmel_samd_init+0x110>)
     b62:	4313      	orrs	r3, r2
     b64:	84a3      	strh	r3, [r4, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {
     b66:	68e3      	ldr	r3, [r4, #12]
     b68:	06db      	lsls	r3, r3, #27
     b6a:	d5fc      	bpl.n	b66 <atmel_samd_init+0x8a>
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
     b6c:	2302      	movs	r3, #2
     b6e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
     b70:	4313      	orrs	r3, r2
     b72:	84a3      	strh	r3, [r4, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLLCKC || !SYSCTRL->PCLKSR.bit.DFLLLCKF) {
     b74:	68e3      	ldr	r3, [r4, #12]
     b76:	061b      	lsls	r3, r3, #24
     b78:	d5fc      	bpl.n	b74 <atmel_samd_init+0x98>
     b7a:	68e3      	ldr	r3, [r4, #12]
     b7c:	065b      	lsls	r3, r3, #25
     b7e:	d5f9      	bpl.n	b74 <atmel_samd_init+0x98>
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY) {
     b80:	68e3      	ldr	r3, [r4, #12]
     b82:	06db      	lsls	r3, r3, #27
     b84:	d5fc      	bpl.n	b80 <atmel_samd_init+0xa4>
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(0) | GCLK_GENDIV_DIV(0);
     b86:	2400      	movs	r4, #0
     b88:	60ac      	str	r4, [r5, #8]
	wait_gclk_synchronization();
     b8a:	f7ff ff9f 	bl	acc <wait_gclk_synchronization>
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC_DFLL48M |
     b8e:	4b18      	ldr	r3, [pc, #96]	; (bf0 <atmel_samd_init+0x114>)
     b90:	606b      	str	r3, [r5, #4]
	wait_gclk_synchronization();
     b92:	f7ff ff9b 	bl	acc <wait_gclk_synchronization>
	GCLK->GENCTRL.reg =
     b96:	4b17      	ldr	r3, [pc, #92]	; (bf4 <atmel_samd_init+0x118>)
     b98:	606b      	str	r3, [r5, #4]
	wait_gclk_synchronization();
     b9a:	f7ff ff97 	bl	acc <wait_gclk_synchronization>
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(32 - 1);
     b9e:	4b16      	ldr	r3, [pc, #88]	; (bf8 <atmel_samd_init+0x11c>)
     ba0:	60ab      	str	r3, [r5, #8]
	wait_gclk_synchronization();
     ba2:	f7ff ff93 	bl	acc <wait_gclk_synchronization>
	GCLK->GENCTRL.reg =
     ba6:	4b15      	ldr	r3, [pc, #84]	; (bfc <atmel_samd_init+0x120>)
     ba8:	606b      	str	r3, [r5, #4]
	wait_gclk_synchronization();
     baa:	f7ff ff8f 	bl	acc <wait_gclk_synchronization>
	PM->CPUSEL.reg = PM_CPUSEL_CPUDIV_DIV1;
     bae:	4b14      	ldr	r3, [pc, #80]	; (c00 <atmel_samd_init+0x124>)
     bb0:	721c      	strb	r4, [r3, #8]
	PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val;
     bb2:	725c      	strb	r4, [r3, #9]
	PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val;
     bb4:	729c      	strb	r4, [r3, #10]
	PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val;
     bb6:	72dc      	strb	r4, [r3, #11]
 */

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
     bb8:	42a6      	cmp	r6, r4
     bba:	d102      	bne.n	bc2 <atmel_samd_init+0xe6>
		return;
	}
	__asm__ volatile(
     bbc:	b662      	cpsie	i
     bbe:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     bc2:	2000      	movs	r0, #0
     bc4:	bd70      	pop	{r4, r5, r6, pc}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	41004000 	.word	0x41004000
     bcc:	40000800 	.word	0x40000800
     bd0:	fffffcff 	.word	0xfffffcff
     bd4:	00806024 	.word	0x00806024
     bd8:	00000606 	.word	0x00000606
     bdc:	0000060c 	.word	0x0000060c
     be0:	40000c00 	.word	0x40000c00
     be4:	00010501 	.word	0x00010501
     be8:	7dff05b9 	.word	0x7dff05b9
     bec:	00000a04 	.word	0x00000a04
     bf0:	00030700 	.word	0x00030700
     bf4:	00010603 	.word	0x00010603
     bf8:	00001f02 	.word	0x00001f02
     bfc:	00010402 	.word	0x00010402
     c00:	40000400 	.word	0x40000400

00000c04 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
     c04:	4901      	ldr	r1, [pc, #4]	; (c0c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
     c06:	2210      	movs	r2, #16
	str	r2, [r1]
     c08:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
     c0a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
     c0c:	e000ed10 	.word	0xe000ed10

00000c10 <arch_cpu_idle>:

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
     c10:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
     c14:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
     c16:	b662      	cpsie	i
	isb
     c18:	f3bf 8f6f 	isb	sy

	bx	lr
     c1c:	4770      	bx	lr
     c1e:	46c0      	nop			; (mov r8, r8)

00000c20 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     c20:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     c22:	0600      	lsls	r0, r0, #24
     c24:	d405      	bmi.n	c32 <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c26:	221f      	movs	r2, #31
     c28:	401a      	ands	r2, r3
     c2a:	2301      	movs	r3, #1
     c2c:	4093      	lsls	r3, r2
     c2e:	4a01      	ldr	r2, [pc, #4]	; (c34 <arch_irq_enable+0x14>)
     c30:	6013      	str	r3, [r2, #0]
}
     c32:	4770      	bx	lr
     c34:	e000e100 	.word	0xe000e100

00000c38 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
     c38:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     c3a:	25ff      	movs	r5, #255	; 0xff
     c3c:	2203      	movs	r2, #3
     c3e:	000b      	movs	r3, r1
     c40:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     c42:	b240      	sxtb	r0, r0
     c44:	4002      	ands	r2, r0
     c46:	00d2      	lsls	r2, r2, #3
     c48:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     c4a:	019b      	lsls	r3, r3, #6
     c4c:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     c4e:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     c50:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
     c52:	2800      	cmp	r0, #0
     c54:	db0a      	blt.n	c6c <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     c56:	24c0      	movs	r4, #192	; 0xc0
     c58:	4a0a      	ldr	r2, [pc, #40]	; (c84 <z_arm_irq_priority_set+0x4c>)
     c5a:	0880      	lsrs	r0, r0, #2
     c5c:	0080      	lsls	r0, r0, #2
     c5e:	1880      	adds	r0, r0, r2
     c60:	00a4      	lsls	r4, r4, #2
     c62:	5902      	ldr	r2, [r0, r4]
     c64:	400a      	ands	r2, r1
     c66:	4313      	orrs	r3, r2
     c68:	5103      	str	r3, [r0, r4]
}
     c6a:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     c6c:	220f      	movs	r2, #15
     c6e:	4010      	ands	r0, r2
     c70:	3808      	subs	r0, #8
     c72:	4a05      	ldr	r2, [pc, #20]	; (c88 <z_arm_irq_priority_set+0x50>)
     c74:	0880      	lsrs	r0, r0, #2
     c76:	0080      	lsls	r0, r0, #2
     c78:	1880      	adds	r0, r0, r2
     c7a:	69c2      	ldr	r2, [r0, #28]
     c7c:	4011      	ands	r1, r2
     c7e:	4319      	orrs	r1, r3
     c80:	61c1      	str	r1, [r0, #28]
     c82:	e7f2      	b.n	c6a <z_arm_irq_priority_set+0x32>
     c84:	e000e100 	.word	0xe000e100
     c88:	e000ed00 	.word	0xe000ed00

00000c8c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     c8c:	bf30      	wfi
    b z_SysNmiOnReset
     c8e:	e7fd      	b.n	c8c <z_SysNmiOnReset>

00000c90 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     c90:	22ff      	movs	r2, #255	; 0xff
     c92:	4b08      	ldr	r3, [pc, #32]	; (cb4 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
     c94:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     c96:	4393      	bics	r3, r2
     c98:	4a07      	ldr	r2, [pc, #28]	; (cb8 <z_arm_prep_c+0x28>)
     c9a:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     c9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ca0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
     ca4:	f000 fdd2 	bl	184c <z_bss_zero>
	z_data_copy();
     ca8:	f001 f984 	bl	1fb4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
     cac:	f000 f8f2 	bl	e94 <z_arm_interrupt_init>
	z_cstart();
     cb0:	f000 fe0c 	bl	18cc <z_cstart>
     cb4:	00000000 	.word	0x00000000
     cb8:	e000ed00 	.word	0xe000ed00

00000cbc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
     cbc:	4a08      	ldr	r2, [pc, #32]	; (ce0 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     cbe:	4909      	ldr	r1, [pc, #36]	; (ce4 <arch_swap+0x28>)
	_current->arch.basepri = key;
     cc0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     cc2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
     cc4:	6698      	str	r0, [r3, #104]	; 0x68
	_current->arch.swap_return_value = _k_neg_eagain;
     cc6:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     cc8:	2380      	movs	r3, #128	; 0x80
     cca:	4907      	ldr	r1, [pc, #28]	; (ce8 <arch_swap+0x2c>)
     ccc:	055b      	lsls	r3, r3, #21
     cce:	6848      	ldr	r0, [r1, #4]
     cd0:	4303      	orrs	r3, r0
     cd2:	604b      	str	r3, [r1, #4]
     cd4:	b662      	cpsie	i
     cd6:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     cda:	6893      	ldr	r3, [r2, #8]
     cdc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
}
     cde:	4770      	bx	lr
     ce0:	20000190 	.word	0x20000190
     ce4:	00002c3c 	.word	0x00002c3c
     ce8:	e000ed00 	.word	0xe000ed00

00000cec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     cec:	4913      	ldr	r1, [pc, #76]	; (d3c <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
     cee:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     cf0:	4813      	ldr	r0, [pc, #76]	; (d40 <_thread_irq_disabled+0x22>)
    add r0, r2
     cf2:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     cf4:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
     cf8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
     cfa:	4643      	mov	r3, r8
    mov r4, r9
     cfc:	464c      	mov	r4, r9
    mov r5, r10
     cfe:	4655      	mov	r5, sl
    mov r6, r11
     d00:	465e      	mov	r6, fp
    mov r7, ip
     d02:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
     d04:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
     d06:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     d08:	4f0e      	ldr	r7, [pc, #56]	; (d44 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     d0a:	4e0f      	ldr	r6, [pc, #60]	; (d48 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     d0c:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
     d0e:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     d10:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     d12:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
     d14:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     d16:	6693      	str	r3, [r2, #104]	; 0x68
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
     d18:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
     d1a:	d100      	bne.n	d1e <_thread_irq_disabled>
    cpsie i
     d1c:	b662      	cpsie	i

00000d1e <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
     d1e:	4c08      	ldr	r4, [pc, #32]	; (d40 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
     d20:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
     d22:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
     d24:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
     d26:	4698      	mov	r8, r3
    mov r9, r4
     d28:	46a1      	mov	r9, r4
    mov r10, r5
     d2a:	46aa      	mov	sl, r5
    mov r11, r6
     d2c:	46b3      	mov	fp, r6
    mov ip, r7
     d2e:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
     d30:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
     d32:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     d34:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
     d38:	4770      	bx	lr
     d3a:	0000      	.short	0x0000
    ldr r1, =_kernel
     d3c:	20000190 	.word	0x20000190
    ldr r0, =_thread_offset_to_callee_saved
     d40:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
     d44:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
     d48:	08000000 	.word	0x08000000

00000d4c <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
     d4c:	2004      	movs	r0, #4
  mov r1, lr
     d4e:	4671      	mov	r1, lr
  tst r1, r0
     d50:	4201      	tst	r1, r0
  beq _stack_frame_msp
     d52:	d002      	beq.n	d5a <_stack_frame_msp>
  mrs r0, PSP
     d54:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
     d58:	d101      	bne.n	d5e <_stack_frame_endif>

00000d5a <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
     d5a:	f3ef 8008 	mrs	r0, MSP

00000d5e <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     d5e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
     d60:	3902      	subs	r1, #2
    ldrb r1, [r1]
     d62:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     d64:	2902      	cmp	r1, #2
    beq _oops
     d66:	d0ff      	beq.n	d68 <_oops>

00000d68 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     d68:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
     d6a:	f001 fb65 	bl	2438 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
     d6e:	bd01      	pop	{r0, pc}

00000d70 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
     d70:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
     d72:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
     d74:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
     d76:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
     d78:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
     d7a:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
     d7c:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
     d7e:	4906      	ldr	r1, [pc, #24]	; (d98 <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
     d80:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
     d82:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
     d84:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
     d86:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
     d88:	2380      	movs	r3, #128	; 0x80
     d8a:	045b      	lsls	r3, r3, #17
     d8c:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
     d8e:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
     d90:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
     d92:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
     d94:	6683      	str	r3, [r0, #104]	; 0x68
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
     d96:	bd10      	pop	{r4, pc}
     d98:	000022b5 	.word	0x000022b5

00000d9c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
     d9c:	4b06      	ldr	r3, [pc, #24]	; (db8 <arch_switch_to_main_thread+0x1c>)
     d9e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
     da0:	1c10      	adds	r0, r2, #0
     da2:	f381 8809 	msr	PSP, r1
     da6:	2100      	movs	r1, #0
     da8:	b662      	cpsie	i
     daa:	f3bf 8f6f 	isb	sy
     dae:	2200      	movs	r2, #0
     db0:	2300      	movs	r3, #0
     db2:	f001 fa7f 	bl	22b4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	20000190 	.word	0x20000190

00000dbc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
     dbc:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
     dbe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
     dc2:	4905      	ldr	r1, [pc, #20]	; (dd8 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
     dc4:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
     dc6:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
     dc8:	4904      	ldr	r1, [pc, #16]	; (ddc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     dca:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     dcc:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
     dce:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
     dd0:	bc09      	pop	{r0, r3}
	mov lr, r3
     dd2:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
     dd4:	4902      	ldr	r1, [pc, #8]	; (de0 <_isr_wrapper+0x24>)
	bx r1
     dd6:	4708      	bx	r1
	ldr r1, =16
     dd8:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
     ddc:	000029f0 	.word	0x000029f0
	ldr r1, =z_arm_int_exit
     de0:	00000de5 	.word	0x00000de5

00000de4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
     de4:	4b04      	ldr	r3, [pc, #16]	; (df8 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
     de6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
     de8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
     dea:	4288      	cmp	r0, r1
	beq _EXIT_EXC
     dec:	d002      	beq.n	df4 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
     dee:	4903      	ldr	r1, [pc, #12]	; (dfc <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
     df0:	4a03      	ldr	r2, [pc, #12]	; (e00 <_EXIT_EXC+0xc>)
	str r2, [r1]
     df2:	600a      	str	r2, [r1, #0]

00000df4 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
     df4:	4770      	bx	lr
     df6:	0000      	.short	0x0000
	ldr r3, =_kernel
     df8:	20000190 	.word	0x20000190
	ldr r1, =_SCS_ICSR
     dfc:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
     e00:	10000000 	.word	0x10000000

00000e04 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
     e04:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     e06:	4b1b      	ldr	r3, [pc, #108]	; (e74 <z_arm_fault+0x70>)
{
     e08:	000c      	movs	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     e0a:	685b      	ldr	r3, [r3, #4]
{
     e0c:	b088      	sub	sp, #32
     e0e:	05db      	lsls	r3, r3, #23
     e10:	0ddb      	lsrs	r3, r3, #23
     e12:	b662      	cpsie	i
     e14:	f3bf 8f6f 	isb	sy
	*nested_exc = false;
     e18:	2500      	movs	r5, #0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
     e1a:	0e16      	lsrs	r6, r2, #24
		return NULL;
     e1c:	0029      	movs	r1, r5
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
     e1e:	2eff      	cmp	r6, #255	; 0xff
     e20:	d109      	bne.n	e36 <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
     e22:	3ef3      	subs	r6, #243	; 0xf3
     e24:	4016      	ands	r6, r2
     e26:	2e08      	cmp	r6, #8
     e28:	d005      	beq.n	e36 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
     e2a:	0001      	movs	r1, r0
			*nested_exc = true;
     e2c:	3501      	adds	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
     e2e:	0712      	lsls	r2, r2, #28
     e30:	d501      	bpl.n	e36 <z_arm_fault+0x32>
			ptr_esf =  (z_arch_esf_t *)psp;
     e32:	0021      	movs	r1, r4
	*nested_exc = false;
     e34:	2500      	movs	r5, #0
	uint32_t reason = K_ERR_CPU_EXCEPTION;
     e36:	2400      	movs	r4, #0
	switch (fault) {
     e38:	2b03      	cmp	r3, #3
     e3a:	d106      	bne.n	e4a <z_arm_fault+0x46>
	uint16_t fault_insn = *(ret_addr - 1);
     e3c:	698b      	ldr	r3, [r1, #24]
     e3e:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
     e40:	881a      	ldrh	r2, [r3, #0]
     e42:	4b0d      	ldr	r3, [pc, #52]	; (e78 <z_arm_fault+0x74>)
     e44:	429a      	cmp	r2, r3
     e46:	d100      	bne.n	e4a <z_arm_fault+0x46>
		reason = esf->basic.r0;
     e48:	680c      	ldr	r4, [r1, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
     e4a:	2220      	movs	r2, #32
     e4c:	4668      	mov	r0, sp
     e4e:	f001 fb18 	bl	2482 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
     e52:	9b07      	ldr	r3, [sp, #28]
     e54:	2d00      	cmp	r5, #0
     e56:	d00a      	beq.n	e6e <z_arm_fault+0x6a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
     e58:	05da      	lsls	r2, r3, #23
     e5a:	d102      	bne.n	e62 <z_arm_fault+0x5e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
     e5c:	4a07      	ldr	r2, [pc, #28]	; (e7c <z_arm_fault+0x78>)
     e5e:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     e60:	9307      	str	r3, [sp, #28]
	}

	z_arm_fatal_error(reason, &esf_copy);
     e62:	4669      	mov	r1, sp
     e64:	0020      	movs	r0, r4
     e66:	f001 fae3 	bl	2430 <z_arm_fatal_error>
}
     e6a:	b008      	add	sp, #32
     e6c:	bd70      	pop	{r4, r5, r6, pc}
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     e6e:	0a5b      	lsrs	r3, r3, #9
     e70:	025b      	lsls	r3, r3, #9
     e72:	e7f5      	b.n	e60 <z_arm_fault+0x5c>
     e74:	e000ed00 	.word	0xe000ed00
     e78:	0000df02 	.word	0x0000df02
     e7c:	000001ff 	.word	0x000001ff

00000e80 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
     e80:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
     e84:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
     e88:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
     e8a:	4672      	mov	r2, lr
	bl z_arm_fault
     e8c:	f7ff ffba 	bl	e04 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
     e90:	bd01      	pop	{r0, pc}
     e92:	46c0      	nop			; (mov r8, r8)

00000e94 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
     e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     e96:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
     e98:	2200      	movs	r2, #0
     e9a:	2603      	movs	r6, #3
     e9c:	25ff      	movs	r5, #255	; 0xff
     e9e:	00a4      	lsls	r4, r4, #2
     ea0:	0010      	movs	r0, r2
     ea2:	002f      	movs	r7, r5
     ea4:	4030      	ands	r0, r6
     ea6:	00c0      	lsls	r0, r0, #3
     ea8:	4087      	lsls	r7, r0
     eaa:	4905      	ldr	r1, [pc, #20]	; (ec0 <z_arm_interrupt_init+0x2c>)
     eac:	0893      	lsrs	r3, r2, #2
     eae:	009b      	lsls	r3, r3, #2
     eb0:	185b      	adds	r3, r3, r1
     eb2:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     eb4:	3201      	adds	r2, #1
     eb6:	43b9      	bics	r1, r7
     eb8:	5119      	str	r1, [r3, r4]
     eba:	2a1c      	cmp	r2, #28
     ebc:	d1f0      	bne.n	ea0 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ec0:	e000e100 	.word	0xe000e100

00000ec4 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
     ec4:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
     ec6:	4807      	ldr	r0, [pc, #28]	; (ee4 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
     ec8:	4907      	ldr	r1, [pc, #28]	; (ee8 <__start+0x24>)
    adds r0, r0, r1
     eca:	1840      	adds	r0, r0, r1
    msr PSP, r0
     ecc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
     ed0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
     ed4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
     ed6:	4308      	orrs	r0, r1
    msr CONTROL, r0
     ed8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
     edc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
     ee0:	f7ff fed6 	bl	c90 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
     ee4:	200001c8 	.word	0x200001c8
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
     ee8:	00000800 	.word	0x00000800

00000eec <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
     eec:	b510      	push	{r4, lr}
	if (_current == thread) {
     eee:	4b0a      	ldr	r3, [pc, #40]	; (f18 <z_impl_k_thread_abort+0x2c>)
     ef0:	689b      	ldr	r3, [r3, #8]
     ef2:	4283      	cmp	r3, r0
     ef4:	d10d      	bne.n	f12 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
     ef6:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
     efa:	2b00      	cmp	r3, #0
     efc:	d009      	beq.n	f12 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     efe:	2280      	movs	r2, #128	; 0x80
     f00:	4b06      	ldr	r3, [pc, #24]	; (f1c <z_impl_k_thread_abort+0x30>)
     f02:	0552      	lsls	r2, r2, #21
     f04:	6859      	ldr	r1, [r3, #4]
     f06:	430a      	orrs	r2, r1
     f08:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
     f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     f0c:	4904      	ldr	r1, [pc, #16]	; (f20 <z_impl_k_thread_abort+0x34>)
     f0e:	400a      	ands	r2, r1
     f10:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
     f12:	f000 fff3 	bl	1efc <z_thread_abort>
}
     f16:	bd10      	pop	{r4, pc}
     f18:	20000190 	.word	0x20000190
     f1c:	e000ed00 	.word	0xe000ed00
     f20:	ffff7fff 	.word	0xffff7fff

00000f24 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
     f24:	4b01      	ldr	r3, [pc, #4]	; (f2c <__stdout_hook_install+0x8>)
     f26:	6018      	str	r0, [r3, #0]
}
     f28:	4770      	bx	lr
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	20000004 	.word	0x20000004

00000f30 <wait_synchronization>:
{
#ifdef REG_EIC_SYNCBUSY
	while (EIC->SYNCBUSY.reg) {
	}
#else
	while (EIC->STATUS.bit.SYNCBUSY) {
     f30:	4a02      	ldr	r2, [pc, #8]	; (f3c <wait_synchronization+0xc>)
     f32:	7853      	ldrb	r3, [r2, #1]
     f34:	09db      	lsrs	r3, r3, #7
     f36:	d1fc      	bne.n	f32 <wait_synchronization+0x2>
	}
#endif
}
     f38:	4770      	bx	lr
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	40001800 	.word	0x40001800

00000f40 <sam0_eic_isr>:
	EIC->CTRL.bit.ENABLE = on;
#endif
}

static void sam0_eic_isr(const struct device *dev)
{
     f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if __CORTEX_M >= 3
	line_index = __CLZ(__RBIT(bits));
	bits >>= line_index;
#else
	if (bits & 0xFF) {
		line_index = 0;
     f42:	2500      	movs	r5, #0
	uint16_t bits = EIC->INTFLAG.reg;
     f44:	4a0f      	ldr	r2, [pc, #60]	; (f84 <sam0_eic_isr+0x44>)
	struct sam0_eic_data *const dev_data = dev->data;
     f46:	6906      	ldr	r6, [r0, #16]
	uint16_t bits = EIC->INTFLAG.reg;
     f48:	6913      	ldr	r3, [r2, #16]
     f4a:	b29c      	uxth	r4, r3
	if (bits & 0xFF) {
     f4c:	b2db      	uxtb	r3, r3
	EIC->INTFLAG.reg = bits;
     f4e:	6114      	str	r4, [r2, #16]
	if (bits & 0xFF) {
     f50:	42ab      	cmp	r3, r5
     f52:	d101      	bne.n	f58 <sam0_eic_isr+0x18>
	} else {
		line_index = 8;
		bits >>= 8;
     f54:	0a24      	lsrs	r4, r4, #8
		line_index = 8;
     f56:	3508      	adds	r5, #8
	/*
	 * Map the EIC lines to the port pin masks based on which port is
	 * selected in the line data.
	 */
	for (; bits; bits >>= 1, line_index++) {
		if (!(bits & 1)) {
     f58:	2701      	movs	r7, #1
	for (; bits; bits >>= 1, line_index++) {
     f5a:	2c00      	cmp	r4, #0
     f5c:	d100      	bne.n	f60 <sam0_eic_isr+0x20>
		struct sam0_eic_port_data *port_data =
			&dev_data->ports[line_assignment->port];

		port_data->cb(BIT(line_assignment->pin), port_data->data);
	}
}
     f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(bits & 1)) {
     f60:	423c      	tst	r4, r7
     f62:	d00c      	beq.n	f7e <sam0_eic_isr+0x3e>
		port_data->cb(BIT(line_assignment->pin), port_data->data);
     f64:	0038      	movs	r0, r7
			&dev_data->ports[line_assignment->port];
     f66:	1973      	adds	r3, r6, r5
     f68:	7c1a      	ldrb	r2, [r3, #16]
     f6a:	0653      	lsls	r3, r2, #25
     f6c:	0f9b      	lsrs	r3, r3, #30
     f6e:	00db      	lsls	r3, r3, #3
		port_data->cb(BIT(line_assignment->pin), port_data->data);
     f70:	06d2      	lsls	r2, r2, #27
     f72:	18f3      	adds	r3, r6, r3
     f74:	0ed2      	lsrs	r2, r2, #27
     f76:	4090      	lsls	r0, r2
     f78:	6859      	ldr	r1, [r3, #4]
     f7a:	681a      	ldr	r2, [r3, #0]
     f7c:	4790      	blx	r2
	for (; bits; bits >>= 1, line_index++) {
     f7e:	0864      	lsrs	r4, r4, #1
     f80:	3501      	adds	r5, #1
     f82:	e7ea      	b.n	f5a <sam0_eic_isr+0x1a>
     f84:	40001800 	.word	0x40001800

00000f88 <sam0_eic_init>:
	/* Enable the GCLK */
	GCLK->PCHCTRL[EIC_GCLK_ID].reg = GCLK_PCHCTRL_GEN_GCLK0 |
					 GCLK_PCHCTRL_CHEN;
#else
	/* Enable the EIC clock in PM */
	PM->APBAMASK.bit.EIC_ = 1;
     f88:	2340      	movs	r3, #64	; 0x40
{
     f8a:	b510      	push	{r4, lr}
	PM->APBAMASK.bit.EIC_ = 1;
     f8c:	4a0b      	ldr	r2, [pc, #44]	; (fbc <sam0_eic_init+0x34>)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_EIC | GCLK_CLKCTRL_GEN_GCLK0 |
			    GCLK_CLKCTRL_CLKEN;
#endif

#if DT_INST_IRQ_HAS_CELL(0, irq)
	SAM0_EIC_IRQ_CONNECT(0);
     f8e:	2004      	movs	r0, #4
	PM->APBAMASK.bit.EIC_ = 1;
     f90:	6991      	ldr	r1, [r2, #24]
     f92:	430b      	orrs	r3, r1
     f94:	6193      	str	r3, [r2, #24]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_EIC | GCLK_CLKCTRL_GEN_GCLK0 |
     f96:	4b0a      	ldr	r3, [pc, #40]	; (fc0 <sam0_eic_init+0x38>)
     f98:	4a0a      	ldr	r2, [pc, #40]	; (fc4 <sam0_eic_init+0x3c>)
     f9a:	805a      	strh	r2, [r3, #2]
	SAM0_EIC_IRQ_CONNECT(0);
     f9c:	2200      	movs	r2, #0
     f9e:	0011      	movs	r1, r2
     fa0:	f7ff fe4a 	bl	c38 <z_arm_irq_priority_set>
     fa4:	2004      	movs	r0, #4
     fa6:	f7ff fe3b 	bl	c20 <arch_irq_enable>
	EIC->CTRL.bit.ENABLE = on;
     faa:	2302      	movs	r3, #2
     fac:	4a06      	ldr	r2, [pc, #24]	; (fc8 <sam0_eic_init+0x40>)
     fae:	7811      	ldrb	r1, [r2, #0]
     fb0:	430b      	orrs	r3, r1
     fb2:	7013      	strb	r3, [r2, #0]
#if DT_INST_IRQ_HAS_IDX(0, 15)
	SAM0_EIC_IRQ_CONNECT(15);
#endif

	set_eic_enable(1);
	wait_synchronization();
     fb4:	f7ff ffbc 	bl	f30 <wait_synchronization>

	return 0;
}
     fb8:	2000      	movs	r0, #0
     fba:	bd10      	pop	{r4, pc}
     fbc:	40000400 	.word	0x40000400
     fc0:	40000c00 	.word	0x40000c00
     fc4:	00004005 	.word	0x00004005
     fc8:	40001800 	.word	0x40001800

00000fcc <sam0_eic_check_ownership>:
{
     fcc:	b510      	push	{r4, lr}
	if (!line_assignment->enabled) {
     fce:	4b09      	ldr	r3, [pc, #36]	; (ff4 <sam0_eic_check_ownership+0x28>)
{
     fd0:	0004      	movs	r4, r0
	if (!line_assignment->enabled) {
     fd2:	189b      	adds	r3, r3, r2
     fd4:	7c1b      	ldrb	r3, [r3, #16]
		return false;
     fd6:	2000      	movs	r0, #0
	if (!line_assignment->enabled) {
     fd8:	2b7f      	cmp	r3, #127	; 0x7f
     fda:	d909      	bls.n	ff0 <sam0_eic_check_ownership+0x24>
	if (line_assignment->port != port ||
     fdc:	065a      	lsls	r2, r3, #25
     fde:	0f92      	lsrs	r2, r2, #30
     fe0:	4294      	cmp	r4, r2
     fe2:	d105      	bne.n	ff0 <sam0_eic_check_ownership+0x24>
	    line_assignment->pin != pin) {
     fe4:	06d8      	lsls	r0, r3, #27
     fe6:	0ec0      	lsrs	r0, r0, #27
	if (line_assignment->port != port ||
     fe8:	1a40      	subs	r0, r0, r1
     fea:	4243      	negs	r3, r0
     fec:	4158      	adcs	r0, r3
     fee:	b2c0      	uxtb	r0, r0
}
     ff0:	bd10      	pop	{r4, pc}
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	20000108 	.word	0x20000108

00000ff8 <sam0_eic_acquire>:
{
     ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
     ffa:	b085      	sub	sp, #20
     ffc:	9303      	str	r3, [sp, #12]
#endif
};

static inline int sam0_eic_map_to_line(int port, int pin)
{
	uint8_t ch = sam0_eic_channels[port][pin];
     ffe:	4b3d      	ldr	r3, [pc, #244]	; (10f4 <sam0_eic_acquire+0xfc>)
    1000:	9201      	str	r2, [sp, #4]
    1002:	0142      	lsls	r2, r0, #5
    1004:	189b      	adds	r3, r3, r2
    1006:	5c5d      	ldrb	r5, [r3, r1]

	if (ch == 0xFF) {
    1008:	2dff      	cmp	r5, #255	; 0xff
    100a:	d100      	bne.n	100e <sam0_eic_acquire+0x16>
    100c:	e06f      	b.n	10ee <sam0_eic_acquire+0xf6>
	__asm__ volatile("mrs %0, PRIMASK;"
    100e:	f3ef 8310 	mrs	r3, PRIMASK
    1012:	b672      	cpsid	i
	EIC->CTRL.bit.ENABLE = on;
    1014:	2202      	movs	r2, #2
    1016:	4c38      	ldr	r4, [pc, #224]	; (10f8 <sam0_eic_acquire+0x100>)
    1018:	9302      	str	r3, [sp, #8]
    101a:	7823      	ldrb	r3, [r4, #0]
    101c:	4393      	bics	r3, r2
    101e:	7023      	strb	r3, [r4, #0]
	if (line_assignment->enabled) {
    1020:	4b36      	ldr	r3, [pc, #216]	; (10fc <sam0_eic_acquire+0x104>)
    1022:	195b      	adds	r3, r3, r5
    1024:	7c1b      	ldrb	r3, [r3, #16]
    1026:	2b7f      	cmp	r3, #127	; 0x7f
    1028:	d916      	bls.n	1058 <sam0_eic_acquire+0x60>
		if (line_assignment->port != port ||
    102a:	065a      	lsls	r2, r3, #25
    102c:	0f92      	lsrs	r2, r2, #30
    102e:	4282      	cmp	r2, r0
    1030:	d103      	bne.n	103a <sam0_eic_acquire+0x42>
		    line_assignment->pin != pin) {
    1032:	06db      	lsls	r3, r3, #27
    1034:	0edb      	lsrs	r3, r3, #27
		if (line_assignment->port != port ||
    1036:	428b      	cmp	r3, r1
    1038:	d00e      	beq.n	1058 <sam0_eic_acquire+0x60>
	EIC->CTRL.bit.ENABLE = on;
    103a:	2302      	movs	r3, #2
    103c:	7822      	ldrb	r2, [r4, #0]
    103e:	4313      	orrs	r3, r2
    1040:	7023      	strb	r3, [r4, #0]
	wait_synchronization();
    1042:	f7ff ff75 	bl	f30 <wait_synchronization>
	if (key != 0U) {
    1046:	9b02      	ldr	r3, [sp, #8]
    1048:	2b00      	cmp	r3, #0
    104a:	d102      	bne.n	1052 <sam0_eic_acquire+0x5a>
	__asm__ volatile(
    104c:	b662      	cpsie	i
    104e:	f3bf 8f6f 	isb	sy
	return -EBUSY;
    1052:	2010      	movs	r0, #16
		return -ENOTSUP;
    1054:	4240      	negs	r0, r0
    1056:	e040      	b.n	10da <sam0_eic_acquire+0xe2>
	port_data->cb = cb;
    1058:	4b28      	ldr	r3, [pc, #160]	; (10fc <sam0_eic_acquire+0x104>)
    105a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    105c:	00c7      	lsls	r7, r0, #3
    105e:	50fe      	str	r6, [r7, r3]
	port_data->data = data;
    1060:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    1062:	19df      	adds	r7, r3, r7
    1064:	607e      	str	r6, [r7, #4]
	line_assignment->pin = pin;
    1066:	261f      	movs	r6, #31
    1068:	2703      	movs	r7, #3
    106a:	400e      	ands	r6, r1
    106c:	2180      	movs	r1, #128	; 0x80
    106e:	4038      	ands	r0, r7
    1070:	4249      	negs	r1, r1
    1072:	4331      	orrs	r1, r6
	config_shift = (line_index % 8) * 4;
    1074:	2207      	movs	r2, #7
	line_assignment->pin = pin;
    1076:	0140      	lsls	r0, r0, #5
    1078:	4308      	orrs	r0, r1
    107a:	195b      	adds	r3, r3, r5
    107c:	7418      	strb	r0, [r3, #16]
	config &= ~(0xF << config_shift);
    107e:	200f      	movs	r0, #15
	config_shift = (line_index % 8) * 4;
    1080:	402a      	ands	r2, r5
    1082:	0092      	lsls	r2, r2, #2
	config &= ~(0xF << config_shift);
    1084:	4090      	lsls	r0, r2
    1086:	4b1c      	ldr	r3, [pc, #112]	; (10f8 <sam0_eic_acquire+0x100>)
	config_index = line_index / 8;
    1088:	10e9      	asrs	r1, r5, #3
    108a:	0089      	lsls	r1, r1, #2
    108c:	18c9      	adds	r1, r1, r3
	config = EIC->CONFIG[config_index].reg;
    108e:	698b      	ldr	r3, [r1, #24]
	config &= ~(0xF << config_shift);
    1090:	4383      	bics	r3, r0
	switch (trigger) {
    1092:	9801      	ldr	r0, [sp, #4]
    1094:	2804      	cmp	r0, #4
    1096:	d80c      	bhi.n	10b2 <sam0_eic_acquire+0xba>
    1098:	f7ff f80a 	bl	b0 <__gnu_thumb1_case_uqi>
    109c:	21090703 	.word	0x21090703
    10a0:	23          	.byte	0x23
    10a1:	00          	.byte	0x00
		config |= EIC_CONFIG_SENSE0_RISE << config_shift;
    10a2:	2001      	movs	r0, #1
		config |= EIC_CONFIG_SENSE0_LOW << config_shift;
    10a4:	4090      	lsls	r0, r2
    10a6:	4303      	orrs	r3, r0
		break;
    10a8:	e003      	b.n	10b2 <sam0_eic_acquire+0xba>
		config |= EIC_CONFIG_SENSE0_FALL << config_shift;
    10aa:	2002      	movs	r0, #2
    10ac:	e7fa      	b.n	10a4 <sam0_eic_acquire+0xac>
		config |= EIC_CONFIG_SENSE0_BOTH << config_shift;
    10ae:	4097      	lsls	r7, r2
    10b0:	433b      	orrs	r3, r7
	if (filter) {
    10b2:	9803      	ldr	r0, [sp, #12]
    10b4:	2800      	cmp	r0, #0
    10b6:	d002      	beq.n	10be <sam0_eic_acquire+0xc6>
		config |= EIC_CONFIG_FILTEN0 << config_shift;
    10b8:	2008      	movs	r0, #8
    10ba:	4090      	lsls	r0, r2
    10bc:	4303      	orrs	r3, r0
	EIC->CONFIG[config_index].reg = config;
    10be:	618b      	str	r3, [r1, #24]
	EIC->CTRL.bit.ENABLE = on;
    10c0:	2302      	movs	r3, #2
    10c2:	7822      	ldrb	r2, [r4, #0]
    10c4:	4313      	orrs	r3, r2
    10c6:	7023      	strb	r3, [r4, #0]
	wait_synchronization();
    10c8:	f7ff ff32 	bl	f30 <wait_synchronization>
	mask = BIT(line_index);
    10cc:	2301      	movs	r3, #1
    10ce:	40ab      	lsls	r3, r5
	EIC->INTFLAG.reg = mask;
    10d0:	6123      	str	r3, [r4, #16]
	if (key != 0U) {
    10d2:	9b02      	ldr	r3, [sp, #8]
    10d4:	2b00      	cmp	r3, #0
    10d6:	d006      	beq.n	10e6 <sam0_eic_acquire+0xee>
	return 0;
    10d8:	2000      	movs	r0, #0
}
    10da:	b005      	add	sp, #20
    10dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config |= EIC_CONFIG_SENSE0_HIGH << config_shift;
    10de:	2004      	movs	r0, #4
    10e0:	e7e0      	b.n	10a4 <sam0_eic_acquire+0xac>
		config |= EIC_CONFIG_SENSE0_LOW << config_shift;
    10e2:	2005      	movs	r0, #5
    10e4:	e7de      	b.n	10a4 <sam0_eic_acquire+0xac>
	__asm__ volatile(
    10e6:	b662      	cpsie	i
    10e8:	f3bf 8f6f 	isb	sy
    10ec:	e7f4      	b.n	10d8 <sam0_eic_acquire+0xe0>
    10ee:	2086      	movs	r0, #134	; 0x86
    10f0:	e7b0      	b.n	1054 <sam0_eic_acquire+0x5c>
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	00002c9b 	.word	0x00002c9b
    10f8:	40001800 	.word	0x40001800
    10fc:	20000108 	.word	0x20000108

00001100 <sam0_eic_release>:
{
    1100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t ch = sam0_eic_channels[port][pin];
    1102:	4b1f      	ldr	r3, [pc, #124]	; (1180 <sam0_eic_release+0x80>)
    1104:	0142      	lsls	r2, r0, #5
    1106:	189b      	adds	r3, r3, r2
    1108:	5c5c      	ldrb	r4, [r3, r1]
    110a:	000e      	movs	r6, r1
    110c:	9001      	str	r0, [sp, #4]
	if (ch == 0xFF) {
    110e:	2cff      	cmp	r4, #255	; 0xff
    1110:	d033      	beq.n	117a <sam0_eic_release+0x7a>
	__asm__ volatile("mrs %0, PRIMASK;"
    1112:	f3ef 8710 	mrs	r7, PRIMASK
    1116:	b672      	cpsid	i
	EIC->CTRL.bit.ENABLE = on;
    1118:	2202      	movs	r2, #2
    111a:	4d1a      	ldr	r5, [pc, #104]	; (1184 <sam0_eic_release+0x84>)
    111c:	782b      	ldrb	r3, [r5, #0]
    111e:	4393      	bics	r3, r2
    1120:	702b      	strb	r3, [r5, #0]
	wait_synchronization();
    1122:	f7ff ff05 	bl	f30 <wait_synchronization>
	if (!sam0_eic_check_ownership(port, pin, line_index)) {
    1126:	0022      	movs	r2, r4
    1128:	0031      	movs	r1, r6
    112a:	9801      	ldr	r0, [sp, #4]
    112c:	f7ff ff4e 	bl	fcc <sam0_eic_check_ownership>
    1130:	2800      	cmp	r0, #0
    1132:	d014      	beq.n	115e <sam0_eic_release+0x5e>
	dev_data->lines[line_index].enabled = 0;
    1134:	207f      	movs	r0, #127	; 0x7f
	mask = BIT(line_index);
    1136:	2201      	movs	r2, #1
	dev_data->lines[line_index].enabled = 0;
    1138:	4b13      	ldr	r3, [pc, #76]	; (1188 <sam0_eic_release+0x88>)
	mask = BIT(line_index);
    113a:	40a2      	lsls	r2, r4
	dev_data->lines[line_index].enabled = 0;
    113c:	191b      	adds	r3, r3, r4
    113e:	7c19      	ldrb	r1, [r3, #16]
    1140:	4001      	ands	r1, r0
	config_shift = (line_index % 8) * 4;
    1142:	3878      	subs	r0, #120	; 0x78
	dev_data->lines[line_index].enabled = 0;
    1144:	7419      	strb	r1, [r3, #16]
	config_index = line_index / 8;
    1146:	10e3      	asrs	r3, r4, #3
	config_shift = (line_index % 8) * 4;
    1148:	4004      	ands	r4, r0
    114a:	00a4      	lsls	r4, r4, #2
	EIC->CONFIG[config_index].reg &= ~(0xF << config_shift);
    114c:	3008      	adds	r0, #8
    114e:	40a0      	lsls	r0, r4
    1150:	009b      	lsls	r3, r3, #2
    1152:	195b      	adds	r3, r3, r5
    1154:	6999      	ldr	r1, [r3, #24]
    1156:	4381      	bics	r1, r0
    1158:	6199      	str	r1, [r3, #24]
	EIC->INTENCLR.reg = mask;
    115a:	60aa      	str	r2, [r5, #8]
	EIC->INTFLAG.reg = mask;
    115c:	612a      	str	r2, [r5, #16]
	EIC->CTRL.bit.ENABLE = on;
    115e:	2302      	movs	r3, #2
    1160:	782a      	ldrb	r2, [r5, #0]
    1162:	4313      	orrs	r3, r2
    1164:	702b      	strb	r3, [r5, #0]
	wait_synchronization();
    1166:	f7ff fee3 	bl	f30 <wait_synchronization>
	if (key != 0U) {
    116a:	2f00      	cmp	r7, #0
    116c:	d001      	beq.n	1172 <sam0_eic_release+0x72>
	return 0;
    116e:	2000      	movs	r0, #0
}
    1170:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    1172:	b662      	cpsie	i
    1174:	f3bf 8f6f 	isb	sy
    1178:	e7f9      	b.n	116e <sam0_eic_release+0x6e>
		return -ENOTSUP;
    117a:	2086      	movs	r0, #134	; 0x86
    117c:	4240      	negs	r0, r0
    117e:	e7f7      	b.n	1170 <sam0_eic_release+0x70>
    1180:	00002c9b 	.word	0x00002c9b
    1184:	40001800 	.word	0x40001800
    1188:	20000108 	.word	0x20000108

0000118c <sam0_eic_enable_interrupt>:
	uint8_t ch = sam0_eic_channels[port][pin];
    118c:	4b0b      	ldr	r3, [pc, #44]	; (11bc <sam0_eic_enable_interrupt+0x30>)
    118e:	0142      	lsls	r2, r0, #5
    1190:	189b      	adds	r3, r3, r2
{
    1192:	b510      	push	{r4, lr}
    1194:	5c5c      	ldrb	r4, [r3, r1]
	if (ch == 0xFF) {
    1196:	2cff      	cmp	r4, #255	; 0xff
    1198:	d00b      	beq.n	11b2 <sam0_eic_enable_interrupt+0x26>
	if (!sam0_eic_check_ownership(port, pin, line_index)) {
    119a:	0022      	movs	r2, r4
    119c:	f7ff ff16 	bl	fcc <sam0_eic_check_ownership>
    11a0:	2800      	cmp	r0, #0
    11a2:	d009      	beq.n	11b8 <sam0_eic_enable_interrupt+0x2c>
	mask = BIT(line_index);
    11a4:	2301      	movs	r3, #1
    11a6:	40a3      	lsls	r3, r4
	return 0;
    11a8:	2000      	movs	r0, #0
	EIC->INTFLAG.reg = mask;
    11aa:	4a05      	ldr	r2, [pc, #20]	; (11c0 <sam0_eic_enable_interrupt+0x34>)
    11ac:	6113      	str	r3, [r2, #16]
	EIC->INTENSET.reg = mask;
    11ae:	60d3      	str	r3, [r2, #12]
}
    11b0:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    11b2:	2086      	movs	r0, #134	; 0x86
		return -EBUSY;
    11b4:	4240      	negs	r0, r0
    11b6:	e7fb      	b.n	11b0 <sam0_eic_enable_interrupt+0x24>
    11b8:	2010      	movs	r0, #16
    11ba:	e7fb      	b.n	11b4 <sam0_eic_enable_interrupt+0x28>
    11bc:	00002c9b 	.word	0x00002c9b
    11c0:	40001800 	.word	0x40001800

000011c4 <sam0_eic_disable_interrupt>:
	uint8_t ch = sam0_eic_channels[port][pin];
    11c4:	4b0b      	ldr	r3, [pc, #44]	; (11f4 <sam0_eic_disable_interrupt+0x30>)
    11c6:	0142      	lsls	r2, r0, #5
    11c8:	189b      	adds	r3, r3, r2
{
    11ca:	b510      	push	{r4, lr}
    11cc:	5c5c      	ldrb	r4, [r3, r1]
	if (ch == 0xFF) {
    11ce:	2cff      	cmp	r4, #255	; 0xff
    11d0:	d00b      	beq.n	11ea <sam0_eic_disable_interrupt+0x26>
	if (!sam0_eic_check_ownership(port, pin, line_index)) {
    11d2:	0022      	movs	r2, r4
    11d4:	f7ff fefa 	bl	fcc <sam0_eic_check_ownership>
    11d8:	2800      	cmp	r0, #0
    11da:	d009      	beq.n	11f0 <sam0_eic_disable_interrupt+0x2c>
	mask = BIT(line_index);
    11dc:	2301      	movs	r3, #1
    11de:	40a3      	lsls	r3, r4
	return 0;
    11e0:	2000      	movs	r0, #0
	EIC->INTENCLR.reg = mask;
    11e2:	4a05      	ldr	r2, [pc, #20]	; (11f8 <sam0_eic_disable_interrupt+0x34>)
    11e4:	6093      	str	r3, [r2, #8]
	EIC->INTFLAG.reg = mask;
    11e6:	6113      	str	r3, [r2, #16]
}
    11e8:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    11ea:	2086      	movs	r0, #134	; 0x86
		return -EBUSY;
    11ec:	4240      	negs	r0, r0
    11ee:	e7fb      	b.n	11e8 <sam0_eic_disable_interrupt+0x24>
    11f0:	2010      	movs	r0, #16
    11f2:	e7fb      	b.n	11ec <sam0_eic_disable_interrupt+0x28>
    11f4:	00002c9b 	.word	0x00002c9b
    11f8:	40001800 	.word	0x40001800

000011fc <sam0_eic_interrupt_pending>:
{
    11fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t set = EIC->INTFLAG.reg;
    11fe:	4b0f      	ldr	r3, [pc, #60]	; (123c <sam0_eic_interrupt_pending+0x40>)
{
    1200:	9001      	str	r0, [sp, #4]
	uint32_t set = EIC->INTFLAG.reg;
    1202:	691d      	ldr	r5, [r3, #16]
	for (int line_index = 0; line_index < EIC_EXTINT_NUM; line_index++) {
    1204:	2300      	movs	r3, #0
	uint32_t mask = 0;
    1206:	0018      	movs	r0, r3
		if (!line_assignment->enabled) {
    1208:	4e0d      	ldr	r6, [pc, #52]	; (1240 <sam0_eic_interrupt_pending+0x44>)
		if (line_assignment->port != port) {
    120a:	4f0e      	ldr	r7, [pc, #56]	; (1244 <sam0_eic_interrupt_pending+0x48>)
		if (!line_assignment->enabled) {
    120c:	5cf2      	ldrb	r2, [r6, r3]
    120e:	2a7f      	cmp	r2, #127	; 0x7f
    1210:	d910      	bls.n	1234 <sam0_eic_interrupt_pending+0x38>
		if (line_assignment->port != port) {
    1212:	18fa      	adds	r2, r7, r3
    1214:	7c12      	ldrb	r2, [r2, #16]
    1216:	9901      	ldr	r1, [sp, #4]
    1218:	0654      	lsls	r4, r2, #25
    121a:	0fa4      	lsrs	r4, r4, #30
    121c:	428c      	cmp	r4, r1
    121e:	d109      	bne.n	1234 <sam0_eic_interrupt_pending+0x38>
		if (!(set & BIT(line_index))) {
    1220:	002c      	movs	r4, r5
    1222:	2101      	movs	r1, #1
    1224:	40dc      	lsrs	r4, r3
    1226:	420c      	tst	r4, r1
    1228:	d004      	beq.n	1234 <sam0_eic_interrupt_pending+0x38>
		mask |= BIT(line_assignment->pin);
    122a:	000c      	movs	r4, r1
    122c:	06d2      	lsls	r2, r2, #27
    122e:	0ed2      	lsrs	r2, r2, #27
    1230:	4094      	lsls	r4, r2
    1232:	4320      	orrs	r0, r4
	for (int line_index = 0; line_index < EIC_EXTINT_NUM; line_index++) {
    1234:	3301      	adds	r3, #1
    1236:	2b10      	cmp	r3, #16
    1238:	d1e8      	bne.n	120c <sam0_eic_interrupt_pending+0x10>
}
    123a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    123c:	40001800 	.word	0x40001800
    1240:	20000118 	.word	0x20000118
    1244:	20000108 	.word	0x20000108

00001248 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1248:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    124a:	4808      	ldr	r0, [pc, #32]	; (126c <uart_console_init+0x24>)
    124c:	f001 faa9 	bl	27a2 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    1250:	2800      	cmp	r0, #0
    1252:	d008      	beq.n	1266 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    1254:	4c06      	ldr	r4, [pc, #24]	; (1270 <uart_console_init+0x28>)
    1256:	0020      	movs	r0, r4
    1258:	f7ff fe64 	bl	f24 <__stdout_hook_install>
	__printk_hook_install(console_out);
    125c:	0020      	movs	r0, r4
    125e:	f7ff f88f 	bl	380 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1262:	2000      	movs	r0, #0
}
    1264:	bd10      	pop	{r4, pc}
		return -ENODEV;
    1266:	2013      	movs	r0, #19
    1268:	4240      	negs	r0, r0
    126a:	e7fb      	b.n	1264 <uart_console_init+0x1c>
    126c:	000029a8 	.word	0x000029a8
    1270:	00001275 	.word	0x00001275

00001274 <console_out>:
{
    1274:	b570      	push	{r4, r5, r6, lr}
    1276:	0004      	movs	r4, r0
    1278:	4d07      	ldr	r5, [pc, #28]	; (1298 <console_out+0x24>)
	if ('\n' == c) {
    127a:	280a      	cmp	r0, #10
    127c:	d104      	bne.n	1288 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    127e:	68ab      	ldr	r3, [r5, #8]
    1280:	210d      	movs	r1, #13
    1282:	0028      	movs	r0, r5
    1284:	685b      	ldr	r3, [r3, #4]
    1286:	4798      	blx	r3
    1288:	68ab      	ldr	r3, [r5, #8]
    128a:	0028      	movs	r0, r5
    128c:	685b      	ldr	r3, [r3, #4]
    128e:	b2e1      	uxtb	r1, r4
    1290:	4798      	blx	r3
}
    1292:	0020      	movs	r0, r4
    1294:	bd70      	pop	{r4, r5, r6, pc}
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	000029a8 	.word	0x000029a8

0000129c <gpio_sam0_pin_interrupt_configure>:

static int gpio_sam0_pin_interrupt_configure(const struct device *dev,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    129c:	b5f0      	push	{r4, r5, r6, r7, lr}
    129e:	b085      	sub	sp, #20
    12a0:	0017      	movs	r7, r2
    12a2:	9302      	str	r3, [sp, #8]
	enum sam0_eic_trigger trigger;
	int rc = 0;

	data->dev = dev;

	switch (mode) {
    12a4:	2380      	movs	r3, #128	; 0x80
	const struct gpio_sam0_config *config = dev->config;
    12a6:	6846      	ldr	r6, [r0, #4]
	struct gpio_sam0_data *const data = dev->data;
    12a8:	6902      	ldr	r2, [r0, #16]
	PortGroup *regs = config->regs;
    12aa:	6875      	ldr	r5, [r6, #4]
{
    12ac:	000c      	movs	r4, r1
		.reg = regs->PINCFG[pin].reg,
    12ae:	1869      	adds	r1, r5, r1
    12b0:	3140      	adds	r1, #64	; 0x40
    12b2:	7809      	ldrb	r1, [r1, #0]
	data->dev = dev;
    12b4:	6050      	str	r0, [r2, #4]
	switch (mode) {
    12b6:	4835      	ldr	r0, [pc, #212]	; (138c <gpio_sam0_pin_interrupt_configure+0xf0>)
		.reg = regs->PINCFG[pin].reg,
    12b8:	b2c9      	uxtb	r1, r1
	switch (mode) {
    12ba:	4038      	ands	r0, r7
    12bc:	03db      	lsls	r3, r3, #15
    12be:	4298      	cmp	r0, r3
    12c0:	d01f      	beq.n	1302 <gpio_sam0_pin_interrupt_configure+0x66>
    12c2:	2380      	movs	r3, #128	; 0x80
    12c4:	039b      	lsls	r3, r3, #14
    12c6:	429f      	cmp	r7, r3
    12c8:	d002      	beq.n	12d0 <gpio_sam0_pin_interrupt_configure+0x34>
			break;
		case GPIO_INT_TRIG_BOTH:
			trigger = SAM0_EIC_BOTH;
			break;
		default:
			rc = -EINVAL;
    12ca:	2016      	movs	r0, #22
			rc = -ENOTSUP;
    12cc:	4240      	negs	r0, r0
	if (rc == 0) {
		/* Update the pin configuration */
		regs->PINCFG[pin] = pincfg;
	}

	return rc;
    12ce:	e016      	b.n	12fe <gpio_sam0_pin_interrupt_configure+0x62>
		pincfg.bit.PMUXEN = 0;
    12d0:	2301      	movs	r3, #1
    12d2:	4399      	bics	r1, r3
    12d4:	9103      	str	r1, [sp, #12]
		rc = sam0_eic_disable_interrupt(config->id, pin);
    12d6:	7a30      	ldrb	r0, [r6, #8]
    12d8:	0021      	movs	r1, r4
    12da:	f7ff ff73 	bl	11c4 <sam0_eic_disable_interrupt>
		if (rc == -EBUSY) {
    12de:	0003      	movs	r3, r0
    12e0:	2210      	movs	r2, #16
    12e2:	3310      	adds	r3, #16
    12e4:	4393      	bics	r3, r2
    12e6:	d10a      	bne.n	12fe <gpio_sam0_pin_interrupt_configure+0x62>
			rc = sam0_eic_release(config->id, pin);
    12e8:	0021      	movs	r1, r4
    12ea:	7a30      	ldrb	r0, [r6, #8]
    12ec:	f7ff ff08 	bl	1100 <sam0_eic_release>
	if (rc == 0) {
    12f0:	2800      	cmp	r0, #0
    12f2:	d104      	bne.n	12fe <gpio_sam0_pin_interrupt_configure+0x62>
		regs->PINCFG[pin] = pincfg;
    12f4:	466b      	mov	r3, sp
    12f6:	192d      	adds	r5, r5, r4
    12f8:	7b1b      	ldrb	r3, [r3, #12]
    12fa:	3540      	adds	r5, #64	; 0x40
    12fc:	702b      	strb	r3, [r5, #0]
}
    12fe:	b005      	add	sp, #20
    1300:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((pincfg.bit.INEN == 0)
    1302:	0788      	lsls	r0, r1, #30
    1304:	d540      	bpl.n	1388 <gpio_sam0_pin_interrupt_configure+0xec>
		    || ((regs->DIR.reg & BIT(pin)) != 0)) {
    1306:	6828      	ldr	r0, [r5, #0]
    1308:	2301      	movs	r3, #1
    130a:	40e0      	lsrs	r0, r4
    130c:	4218      	tst	r0, r3
    130e:	d13b      	bne.n	1388 <gpio_sam0_pin_interrupt_configure+0xec>
		pincfg.bit.PMUXEN = 1;
    1310:	0018      	movs	r0, r3
    1312:	4308      	orrs	r0, r1
			regs->PMUX[pin / 2U].bit.PMUXO = PORT_PMUX_PMUXE_A_Val;
    1314:	0861      	lsrs	r1, r4, #1
    1316:	1869      	adds	r1, r5, r1
		pincfg.bit.PMUXEN = 1;
    1318:	9003      	str	r0, [sp, #12]
			regs->PMUX[pin / 2U].bit.PMUXO = PORT_PMUX_PMUXE_A_Val;
    131a:	3130      	adds	r1, #48	; 0x30
    131c:	200f      	movs	r0, #15
		if ((pin & 1U) != 0) {
    131e:	421c      	tst	r4, r3
    1320:	d028      	beq.n	1374 <gpio_sam0_pin_interrupt_configure+0xd8>
			regs->PMUX[pin / 2U].bit.PMUXO = PORT_PMUX_PMUXE_A_Val;
    1322:	780b      	ldrb	r3, [r1, #0]
    1324:	4018      	ands	r0, r3
			regs->PMUX[pin / 2U].bit.PMUXE = PORT_PMUX_PMUXE_A_Val;
    1326:	7008      	strb	r0, [r1, #0]
		switch (trig) {
    1328:	2180      	movs	r1, #128	; 0x80
    132a:	9b02      	ldr	r3, [sp, #8]
    132c:	04c9      	lsls	r1, r1, #19
    132e:	428b      	cmp	r3, r1
    1330:	d024      	beq.n	137c <gpio_sam0_pin_interrupt_configure+0xe0>
    1332:	21c0      	movs	r1, #192	; 0xc0
    1334:	04c9      	lsls	r1, r1, #19
    1336:	428b      	cmp	r3, r1
    1338:	d024      	beq.n	1384 <gpio_sam0_pin_interrupt_configure+0xe8>
    133a:	2180      	movs	r1, #128	; 0x80
    133c:	0489      	lsls	r1, r1, #18
    133e:	428b      	cmp	r3, r1
    1340:	d1c3      	bne.n	12ca <gpio_sam0_pin_interrupt_configure+0x2e>
				: SAM0_EIC_FALLING;
    1342:	2380      	movs	r3, #128	; 0x80
    1344:	2101      	movs	r1, #1
    1346:	03db      	lsls	r3, r3, #15
				: SAM0_EIC_RISING;
    1348:	429f      	cmp	r7, r3
    134a:	d100      	bne.n	134e <gpio_sam0_pin_interrupt_configure+0xb2>
    134c:	3103      	adds	r1, #3
					      (data->debounce & BIT(pin)) != 0,
    134e:	6893      	ldr	r3, [r2, #8]
			rc = sam0_eic_acquire(config->id, pin, trigger,
    1350:	2001      	movs	r0, #1
					      (data->debounce & BIT(pin)) != 0,
    1352:	40e3      	lsrs	r3, r4
			rc = sam0_eic_acquire(config->id, pin, trigger,
    1354:	4003      	ands	r3, r0
    1356:	7a30      	ldrb	r0, [r6, #8]
    1358:	9201      	str	r2, [sp, #4]
    135a:	4a0d      	ldr	r2, [pc, #52]	; (1390 <gpio_sam0_pin_interrupt_configure+0xf4>)
    135c:	9200      	str	r2, [sp, #0]
    135e:	000a      	movs	r2, r1
    1360:	0021      	movs	r1, r4
    1362:	f7ff fe49 	bl	ff8 <sam0_eic_acquire>
		if (rc == 0) {
    1366:	2800      	cmp	r0, #0
    1368:	d1c9      	bne.n	12fe <gpio_sam0_pin_interrupt_configure+0x62>
			rc = sam0_eic_enable_interrupt(config->id, pin);
    136a:	0021      	movs	r1, r4
    136c:	7a30      	ldrb	r0, [r6, #8]
    136e:	f7ff ff0d 	bl	118c <sam0_eic_enable_interrupt>
    1372:	e7bd      	b.n	12f0 <gpio_sam0_pin_interrupt_configure+0x54>
			regs->PMUX[pin / 2U].bit.PMUXE = PORT_PMUX_PMUXE_A_Val;
    1374:	780b      	ldrb	r3, [r1, #0]
    1376:	4383      	bics	r3, r0
    1378:	0018      	movs	r0, r3
    137a:	e7d4      	b.n	1326 <gpio_sam0_pin_interrupt_configure+0x8a>
				: SAM0_EIC_RISING;
    137c:	2380      	movs	r3, #128	; 0x80
    137e:	2100      	movs	r1, #0
    1380:	03db      	lsls	r3, r3, #15
    1382:	e7e1      	b.n	1348 <gpio_sam0_pin_interrupt_configure+0xac>
    1384:	2102      	movs	r1, #2
    1386:	e7e2      	b.n	134e <gpio_sam0_pin_interrupt_configure+0xb2>
			rc = -ENOTSUP;
    1388:	2086      	movs	r0, #134	; 0x86
    138a:	e79f      	b.n	12cc <gpio_sam0_pin_interrupt_configure+0x30>
    138c:	feffffff 	.word	0xfeffffff
    1390:	000025c9 	.word	0x000025c9

00001394 <uart_sam0_init>:
	return 0;
}
#endif /* CONFIG_UART_USE_RUNTIME_CONFIGURE */

static int uart_sam0_init(const struct device *dev)
{
    1394:	b5f0      	push	{r4, r5, r6, r7, lr}
	int retval;
	const struct uart_sam0_dev_cfg *const cfg = dev->config;
	struct uart_sam0_dev_data *const dev_data = dev->data;
    1396:	6903      	ldr	r3, [r0, #16]
{
    1398:	b085      	sub	sp, #20
	struct uart_sam0_dev_data *const dev_data = dev->data;
    139a:	9301      	str	r3, [sp, #4]

	/* Enable SERCOM clock in MCLK */
	*cfg->mclk |= cfg->mclk_mask;
#else
	/* Enable the GCLK */
	GCLK->CLKCTRL.reg = cfg->gclk_clkctrl_id | GCLK_CLKCTRL_GEN_GCLK0 |
    139c:	2380      	movs	r3, #128	; 0x80
	const struct uart_sam0_dev_cfg *const cfg = dev->config;
    139e:	6845      	ldr	r5, [r0, #4]
{
    13a0:	9000      	str	r0, [sp, #0]
	GCLK->CLKCTRL.reg = cfg->gclk_clkctrl_id | GCLK_CLKCTRL_GEN_GCLK0 |
    13a2:	8aaa      	ldrh	r2, [r5, #20]
    13a4:	01db      	lsls	r3, r3, #7
    13a6:	4313      	orrs	r3, r2
    13a8:	4a2d      	ldr	r2, [pc, #180]	; (1460 <uart_sam0_init+0xcc>)
	SercomUsart * const usart = cfg->regs;
    13aa:	682c      	ldr	r4, [r5, #0]
	GCLK->CLKCTRL.reg = cfg->gclk_clkctrl_id | GCLK_CLKCTRL_GEN_GCLK0 |
    13ac:	8053      	strh	r3, [r2, #2]
			    GCLK_CLKCTRL_CLKEN;

	/* Enable SERCOM clock in PM */
	PM->APBCMASK.reg |= cfg->pm_apbcmask;
    13ae:	4a2d      	ldr	r2, [pc, #180]	; (1464 <uart_sam0_init+0xd0>)
    13b0:	6929      	ldr	r1, [r5, #16]
    13b2:	6a13      	ldr	r3, [r2, #32]
#endif

	/* Disable all USART interrupts */
	usart->INTENCLR.reg = SERCOM_USART_INTENCLR_MASK;
	wait_synchronization(usart);
    13b4:	0020      	movs	r0, r4
	PM->APBCMASK.reg |= cfg->pm_apbcmask;
    13b6:	430b      	orrs	r3, r1
    13b8:	6213      	str	r3, [r2, #32]
	usart->INTENCLR.reg = SERCOM_USART_INTENCLR_MASK;
    13ba:	23bf      	movs	r3, #191	; 0xbf
    13bc:	7523      	strb	r3, [r4, #20]
	wait_synchronization(usart);
    13be:	f001 f91c 	bl	25fa <wait_synchronization>
#if defined(SERCOM_USART_CTRLA_SAMPR)
	    /* 16x oversampling with arithmetic baud rate generation */
	    | SERCOM_USART_CTRLA_SAMPR(0)
#endif
	    | SERCOM_USART_CTRLA_FORM(0) |
	    SERCOM_USART_CTRLA_CPOL | SERCOM_USART_CTRLA_DORD;
    13c2:	68aa      	ldr	r2, [r5, #8]
    13c4:	4b28      	ldr	r3, [pc, #160]	; (1468 <uart_sam0_init+0xd4>)
	wait_synchronization(usart);
    13c6:	0020      	movs	r0, r4
	    SERCOM_USART_CTRLA_CPOL | SERCOM_USART_CTRLA_DORD;
    13c8:	4313      	orrs	r3, r2
	usart->CTRLA.reg =
    13ca:	6023      	str	r3, [r4, #0]
	wait_synchronization(usart);
    13cc:	f001 f915 	bl	25fa <wait_synchronization>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    13d0:	2100      	movs	r1, #0
    13d2:	69e8      	ldr	r0, [r5, #28]
    13d4:	aa03      	add	r2, sp, #12
    13d6:	f001 f9d0 	bl	277a <pinctrl_lookup_state>
	if (ret < 0) {
    13da:	2800      	cmp	r0, #0
    13dc:	db3b      	blt.n	1456 <uart_sam0_init+0xc2>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    13de:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    13e0:	2200      	movs	r2, #0
    13e2:	7919      	ldrb	r1, [r3, #4]
    13e4:	6818      	ldr	r0, [r3, #0]
    13e6:	f000 f9c7 	bl	1778 <pinctrl_configure_pins>

	/* Enable PINMUX based on PINCTRL */
	retval = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (retval < 0) {
    13ea:	2800      	cmp	r0, #0
    13ec:	db33      	blt.n	1456 <uart_sam0_init+0xc2>
		return retval;
	}

	dev_data->config_cache.flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
	dev_data->config_cache.parity = UART_CFG_PARITY_NONE;
    13ee:	9a01      	ldr	r2, [sp, #4]
    13f0:	4b1e      	ldr	r3, [pc, #120]	; (146c <uart_sam0_init+0xd8>)
	dev_data->config_cache.data_bits = UART_CFG_DATA_BITS_8;

	/* Enable receiver and transmitter */
	usart->CTRLB.reg = SERCOM_USART_CTRLB_CHSIZE(0) |
			   SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN;
	wait_synchronization(usart);
    13f2:	0020      	movs	r0, r4
	dev_data->config_cache.parity = UART_CFG_PARITY_NONE;
    13f4:	6053      	str	r3, [r2, #4]
	usart->CTRLB.reg = SERCOM_USART_CTRLB_CHSIZE(0) |
    13f6:	3b01      	subs	r3, #1
    13f8:	3bff      	subs	r3, #255	; 0xff
    13fa:	6063      	str	r3, [r4, #4]
	wait_synchronization(usart);
    13fc:	f001 f8fd 	bl	25fa <wait_synchronization>
	tmp = (uint64_t)baudrate << 20;
    1400:	6869      	ldr	r1, [r5, #4]
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    1402:	481b      	ldr	r0, [pc, #108]	; (1470 <uart_sam0_init+0xdc>)
	tmp = (uint64_t)baudrate << 20;
    1404:	0b0b      	lsrs	r3, r1, #12
    1406:	050a      	lsls	r2, r1, #20
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    1408:	2100      	movs	r1, #0
    140a:	1880      	adds	r0, r0, r2
    140c:	4159      	adcs	r1, r3
    140e:	2300      	movs	r3, #0
    1410:	4a18      	ldr	r2, [pc, #96]	; (1474 <uart_sam0_init+0xe0>)
    1412:	f7fe fec7 	bl	1a4 <__aeabi_uldivmod>
	if (tmp < 1 || tmp > UINT16_MAX) {
    1416:	2601      	movs	r6, #1
    1418:	4276      	negs	r6, r6
    141a:	17f7      	asrs	r7, r6, #31
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    141c:	0002      	movs	r2, r0
    141e:	000b      	movs	r3, r1
	if (tmp < 1 || tmp > UINT16_MAX) {
    1420:	18b6      	adds	r6, r6, r2
    1422:	415f      	adcs	r7, r3
    1424:	2f00      	cmp	r7, #0
    1426:	d118      	bne.n	145a <uart_sam0_init+0xc6>
    1428:	4913      	ldr	r1, [pc, #76]	; (1478 <uart_sam0_init+0xe4>)
    142a:	428e      	cmp	r6, r1
    142c:	d815      	bhi.n	145a <uart_sam0_init+0xc6>
	baud = 65536 - (uint16_t)tmp;
    142e:	4252      	negs	r2, r2
    1430:	b292      	uxth	r2, r2
	wait_synchronization(usart);
    1432:	0020      	movs	r0, r4
	usart->BAUD.reg = baud;
    1434:	81a2      	strh	r2, [r4, #12]
	wait_synchronization(usart);
    1436:	f001 f8e0 	bl	25fa <wait_synchronization>
	retval = uart_sam0_set_baudrate(usart, cfg->baudrate,
					SOC_ATMEL_SAM0_GCLK0_FREQ_HZ);
	if (retval != 0) {
		return retval;
	}
	dev_data->config_cache.baudrate = cfg->baudrate;
    143a:	686b      	ldr	r3, [r5, #4]
    143c:	9a01      	ldr	r2, [sp, #4]

#if CONFIG_UART_INTERRUPT_DRIVEN || CONFIG_UART_ASYNC_API
	cfg->irq_config_func(dev);
    143e:	9800      	ldr	r0, [sp, #0]
	dev_data->config_cache.baudrate = cfg->baudrate;
    1440:	6013      	str	r3, [r2, #0]
	cfg->irq_config_func(dev);
    1442:	69ab      	ldr	r3, [r5, #24]
    1444:	4798      	blx	r3
		}
	}

#endif

	usart->CTRLA.bit.ENABLE = 1;
    1446:	2302      	movs	r3, #2
    1448:	6822      	ldr	r2, [r4, #0]
	wait_synchronization(usart);
    144a:	0020      	movs	r0, r4
	usart->CTRLA.bit.ENABLE = 1;
    144c:	4313      	orrs	r3, r2
    144e:	6023      	str	r3, [r4, #0]
	wait_synchronization(usart);
    1450:	f001 f8d3 	bl	25fa <wait_synchronization>

	return 0;
    1454:	0038      	movs	r0, r7
}
    1456:	b005      	add	sp, #20
    1458:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ERANGE;
    145a:	2022      	movs	r0, #34	; 0x22
    145c:	4240      	negs	r0, r0
    145e:	e7fa      	b.n	1456 <uart_sam0_init+0xc2>
    1460:	40000c00 	.word	0x40000c00
    1464:	40000400 	.word	0x40000400
    1468:	60000004 	.word	0x60000004
    146c:	00030100 	.word	0x00030100
    1470:	016e3600 	.word	0x016e3600
    1474:	02dc6c00 	.word	0x02dc6c00
    1478:	0000fffe 	.word	0x0000fffe

0000147c <uart_sam0_configure>:
{
    147c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uart_sam0_dev_data *const dev_data = dev->data;
    147e:	6903      	ldr	r3, [r0, #16]
{
    1480:	b085      	sub	sp, #20
	struct uart_sam0_dev_data *const dev_data = dev->data;
    1482:	9301      	str	r3, [sp, #4]
	SercomUsart * const usart = cfg->regs;
    1484:	6843      	ldr	r3, [r0, #4]
{
    1486:	000d      	movs	r5, r1
	SercomUsart * const usart = cfg->regs;
    1488:	681c      	ldr	r4, [r3, #0]
	wait_synchronization(usart);
    148a:	0020      	movs	r0, r4
    148c:	f001 f8b5 	bl	25fa <wait_synchronization>
	usart->CTRLA.bit.ENABLE = 0;
    1490:	2202      	movs	r2, #2
    1492:	6823      	ldr	r3, [r4, #0]
	wait_synchronization(usart);
    1494:	0020      	movs	r0, r4
	usart->CTRLA.bit.ENABLE = 0;
    1496:	4393      	bics	r3, r2
    1498:	6023      	str	r3, [r4, #0]
	wait_synchronization(usart);
    149a:	f001 f8ae 	bl	25fa <wait_synchronization>
	if (new_cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
    149e:	79ea      	ldrb	r2, [r5, #7]
    14a0:	2a00      	cmp	r2, #0
    14a2:	d10d      	bne.n	14c0 <uart_sam0_configure+0x44>
	dev_data->config_cache.flow_ctrl = new_cfg->flow_ctrl;
    14a4:	9b01      	ldr	r3, [sp, #4]
    14a6:	71da      	strb	r2, [r3, #7]
	SERCOM_USART_CTRLA_Type CTRLA_temp = usart->CTRLA;
    14a8:	6821      	ldr	r1, [r4, #0]
	SERCOM_USART_CTRLB_Type CTRLB_temp = usart->CTRLB;
    14aa:	6866      	ldr	r6, [r4, #4]
    14ac:	04b3      	lsls	r3, r6, #18
    14ae:	0fdb      	lsrs	r3, r3, #31
    14b0:	9302      	str	r3, [sp, #8]
	switch (new_cfg->parity) {
    14b2:	792b      	ldrb	r3, [r5, #4]
    14b4:	2b01      	cmp	r3, #1
    14b6:	d006      	beq.n	14c6 <uart_sam0_configure+0x4a>
    14b8:	2b02      	cmp	r3, #2
    14ba:	d007      	beq.n	14cc <uart_sam0_configure+0x50>
    14bc:	2b00      	cmp	r3, #0
    14be:	d003      	beq.n	14c8 <uart_sam0_configure+0x4c>
		return -ENOTSUP;
    14c0:	2086      	movs	r0, #134	; 0x86
		return -ERANGE;
    14c2:	4240      	negs	r0, r0
    14c4:	e059      	b.n	157a <uart_sam0_configure+0xfe>
		CTRLB_temp.bit.PMODE = 1;
    14c6:	9302      	str	r3, [sp, #8]
	switch (new_cfg->parity) {
    14c8:	001a      	movs	r2, r3
    14ca:	e001      	b.n	14d0 <uart_sam0_configure+0x54>
		CTRLB_temp.bit.PMODE = 0;
    14cc:	9202      	str	r2, [sp, #8]
		CTRLA_temp.bit.FORM = 0x1;
    14ce:	2201      	movs	r2, #1
	dev_data->config_cache.parity = new_cfg->parity;
    14d0:	9801      	ldr	r0, [sp, #4]
    14d2:	7103      	strb	r3, [r0, #4]
	switch (new_cfg->stop_bits) {
    14d4:	796b      	ldrb	r3, [r5, #5]
    14d6:	2b01      	cmp	r3, #1
    14d8:	d051      	beq.n	157e <uart_sam0_configure+0x102>
		CTRLB_temp.bit.SBMODE = 1;
    14da:	2001      	movs	r0, #1
	switch (new_cfg->stop_bits) {
    14dc:	2b03      	cmp	r3, #3
    14de:	d1ef      	bne.n	14c0 <uart_sam0_configure+0x44>
    14e0:	9003      	str	r0, [sp, #12]
	dev_data->config_cache.stop_bits = new_cfg->stop_bits;
    14e2:	9801      	ldr	r0, [sp, #4]
    14e4:	7143      	strb	r3, [r0, #5]
	switch (new_cfg->data_bits) {
    14e6:	79af      	ldrb	r7, [r5, #6]
    14e8:	2f04      	cmp	r7, #4
    14ea:	d8e9      	bhi.n	14c0 <uart_sam0_configure+0x44>
	usart->CTRLA = CTRLA_temp;
    14ec:	4b26      	ldr	r3, [pc, #152]	; (1588 <uart_sam0_configure+0x10c>)
    14ee:	0612      	lsls	r2, r2, #24
    14f0:	4019      	ands	r1, r3
    14f2:	4311      	orrs	r1, r2
	dev_data->config_cache.data_bits = new_cfg->data_bits;
    14f4:	7187      	strb	r7, [r0, #6]
	wait_synchronization(usart);
    14f6:	0020      	movs	r0, r4
	usart->CTRLA = CTRLA_temp;
    14f8:	6021      	str	r1, [r4, #0]
	wait_synchronization(usart);
    14fa:	f001 f87e 	bl	25fa <wait_synchronization>
	usart->CTRLB = CTRLB_temp;
    14fe:	9b03      	ldr	r3, [sp, #12]
    1500:	2107      	movs	r1, #7
    1502:	019a      	lsls	r2, r3, #6
    1504:	003b      	movs	r3, r7
    1506:	400b      	ands	r3, r1
    1508:	3305      	adds	r3, #5
    150a:	400b      	ands	r3, r1
    150c:	4313      	orrs	r3, r2
    150e:	9a02      	ldr	r2, [sp, #8]
	wait_synchronization(usart);
    1510:	0020      	movs	r0, r4
	usart->CTRLB = CTRLB_temp;
    1512:	0352      	lsls	r2, r2, #13
    1514:	4313      	orrs	r3, r2
    1516:	4a1d      	ldr	r2, [pc, #116]	; (158c <uart_sam0_configure+0x110>)
    1518:	4032      	ands	r2, r6
    151a:	4313      	orrs	r3, r2
    151c:	0c36      	lsrs	r6, r6, #16
    151e:	b29b      	uxth	r3, r3
    1520:	0436      	lsls	r6, r6, #16
    1522:	431e      	orrs	r6, r3
    1524:	6066      	str	r6, [r4, #4]
	wait_synchronization(usart);
    1526:	f001 f868 	bl	25fa <wait_synchronization>
	tmp = (uint64_t)baudrate << 20;
    152a:	682b      	ldr	r3, [r5, #0]
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    152c:	4a18      	ldr	r2, [pc, #96]	; (1590 <uart_sam0_configure+0x114>)
	tmp = (uint64_t)baudrate << 20;
    152e:	0b19      	lsrs	r1, r3, #12
    1530:	0518      	lsls	r0, r3, #20
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    1532:	2300      	movs	r3, #0
    1534:	1880      	adds	r0, r0, r2
    1536:	4159      	adcs	r1, r3
    1538:	2300      	movs	r3, #0
    153a:	4a16      	ldr	r2, [pc, #88]	; (1594 <uart_sam0_configure+0x118>)
    153c:	f7fe fe32 	bl	1a4 <__aeabi_uldivmod>
	if (tmp < 1 || tmp > UINT16_MAX) {
    1540:	2601      	movs	r6, #1
    1542:	4276      	negs	r6, r6
    1544:	17f7      	asrs	r7, r6, #31
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    1546:	0002      	movs	r2, r0
    1548:	000b      	movs	r3, r1
	if (tmp < 1 || tmp > UINT16_MAX) {
    154a:	18b6      	adds	r6, r6, r2
    154c:	415f      	adcs	r7, r3
    154e:	2f00      	cmp	r7, #0
    1550:	d117      	bne.n	1582 <uart_sam0_configure+0x106>
    1552:	4911      	ldr	r1, [pc, #68]	; (1598 <uart_sam0_configure+0x11c>)
    1554:	428e      	cmp	r6, r1
    1556:	d814      	bhi.n	1582 <uart_sam0_configure+0x106>
	baud = 65536 - (uint16_t)tmp;
    1558:	4252      	negs	r2, r2
    155a:	b292      	uxth	r2, r2
	wait_synchronization(usart);
    155c:	0020      	movs	r0, r4
	usart->BAUD.reg = baud;
    155e:	81a2      	strh	r2, [r4, #12]
	wait_synchronization(usart);
    1560:	f001 f84b 	bl	25fa <wait_synchronization>
	dev_data->config_cache.baudrate = new_cfg->baudrate;
    1564:	682b      	ldr	r3, [r5, #0]
    1566:	9a01      	ldr	r2, [sp, #4]
	wait_synchronization(usart);
    1568:	0020      	movs	r0, r4
	dev_data->config_cache.baudrate = new_cfg->baudrate;
    156a:	6013      	str	r3, [r2, #0]
	usart->CTRLA.bit.ENABLE = 1;
    156c:	2302      	movs	r3, #2
    156e:	6822      	ldr	r2, [r4, #0]
    1570:	4313      	orrs	r3, r2
    1572:	6023      	str	r3, [r4, #0]
	wait_synchronization(usart);
    1574:	f001 f841 	bl	25fa <wait_synchronization>
	return 0;
    1578:	0038      	movs	r0, r7
}
    157a:	b005      	add	sp, #20
    157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (new_cfg->stop_bits) {
    157e:	2000      	movs	r0, #0
    1580:	e7ae      	b.n	14e0 <uart_sam0_configure+0x64>
		return -ERANGE;
    1582:	2022      	movs	r0, #34	; 0x22
    1584:	e79d      	b.n	14c2 <uart_sam0_configure+0x46>
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	f0ffffff 	.word	0xf0ffffff
    158c:	ffffdfb8 	.word	0xffffdfb8
    1590:	016e3600 	.word	0x016e3600
    1594:	02dc6c00 	.word	0x02dc6c00
    1598:	0000fffe 	.word	0x0000fffe

0000159c <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
    159c:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
    159e:	4b0a      	ldr	r3, [pc, #40]	; (15c8 <elapsed+0x2c>)
    15a0:	4a0a      	ldr	r2, [pc, #40]	; (15cc <elapsed+0x30>)
    15a2:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    15a4:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
    15a6:	4d0a      	ldr	r5, [pc, #40]	; (15d0 <elapsed+0x34>)
    15a8:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    15aa:	03c9      	lsls	r1, r1, #15
    15ac:	d401      	bmi.n	15b2 <elapsed+0x16>
	    || (val1 < val2)) {
    15ae:	42a0      	cmp	r0, r4
    15b0:	d204      	bcs.n	15bc <elapsed+0x20>
		overflow_cyc += last_load;
    15b2:	6811      	ldr	r1, [r2, #0]
    15b4:	6828      	ldr	r0, [r5, #0]
    15b6:	1809      	adds	r1, r1, r0
    15b8:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    15ba:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
    15bc:	682b      	ldr	r3, [r5, #0]
    15be:	6810      	ldr	r0, [r2, #0]
    15c0:	18c0      	adds	r0, r0, r3
    15c2:	1b00      	subs	r0, r0, r4
}
    15c4:	bd30      	pop	{r4, r5, pc}
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	e000e010 	.word	0xe000e010
    15cc:	20000180 	.word	0x20000180
    15d0:	2000018c 	.word	0x2000018c

000015d4 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
    15d4:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    15d6:	4a09      	ldr	r2, [pc, #36]	; (15fc <sys_clock_driver_init+0x28>)
    15d8:	6a13      	ldr	r3, [r2, #32]
    15da:	021b      	lsls	r3, r3, #8
    15dc:	0a1b      	lsrs	r3, r3, #8
    15de:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
    15e0:	4b07      	ldr	r3, [pc, #28]	; (1600 <sys_clock_driver_init+0x2c>)
    15e2:	4a08      	ldr	r2, [pc, #32]	; (1604 <sys_clock_driver_init+0x30>)
    15e4:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
    15e6:	4b08      	ldr	r3, [pc, #32]	; (1608 <sys_clock_driver_init+0x34>)
    15e8:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    15ea:	4b08      	ldr	r3, [pc, #32]	; (160c <sys_clock_driver_init+0x38>)
    15ec:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    15ee:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
    15f0:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    15f2:	6819      	ldr	r1, [r3, #0]
    15f4:	430a      	orrs	r2, r1
    15f6:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    15f8:	4770      	bx	lr
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	e000ed00 	.word	0xe000ed00
    1600:	2000018c 	.word	0x2000018c
    1604:	000012bf 	.word	0x000012bf
    1608:	20000180 	.word	0x20000180
    160c:	e000e010 	.word	0xe000e010

00001610 <sys_clock_isr>:
{
    1610:	b570      	push	{r4, r5, r6, lr}
	elapsed();
    1612:	f7ff ffc3 	bl	159c <elapsed>
	cycle_count += overflow_cyc;
    1616:	4b0c      	ldr	r3, [pc, #48]	; (1648 <sys_clock_isr+0x38>)
    1618:	4a0c      	ldr	r2, [pc, #48]	; (164c <sys_clock_isr+0x3c>)
    161a:	6818      	ldr	r0, [r3, #0]
    161c:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    161e:	4c0c      	ldr	r4, [pc, #48]	; (1650 <sys_clock_isr+0x40>)
	cycle_count += overflow_cyc;
    1620:	1840      	adds	r0, r0, r1
    1622:	6010      	str	r0, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    1624:	2196      	movs	r1, #150	; 0x96
	overflow_cyc = 0;
    1626:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    1628:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
    162a:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    162c:	0149      	lsls	r1, r1, #5
    162e:	1b40      	subs	r0, r0, r5
    1630:	f7fe fd52 	bl	d8 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
    1634:	2396      	movs	r3, #150	; 0x96
    1636:	015b      	lsls	r3, r3, #5
    1638:	4343      	muls	r3, r0
    163a:	195b      	adds	r3, r3, r5
    163c:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
    163e:	f000 fd9d 	bl	217c <sys_clock_announce>
	z_arm_int_exit();
    1642:	f7ff fbcf 	bl	de4 <z_arm_exc_exit>
}
    1646:	bd70      	pop	{r4, r5, r6, pc}
    1648:	20000180 	.word	0x20000180
    164c:	20000188 	.word	0x20000188
    1650:	20000184 	.word	0x20000184

00001654 <sys_clock_set_timeout>:
{
    1654:	b5f0      	push	{r4, r5, r6, r7, lr}
    1656:	4d33      	ldr	r5, [pc, #204]	; (1724 <sys_clock_set_timeout+0xd0>)
    1658:	4f33      	ldr	r7, [pc, #204]	; (1728 <sys_clock_set_timeout+0xd4>)
    165a:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    165c:	2900      	cmp	r1, #0
    165e:	d056      	beq.n	170e <sys_clock_set_timeout+0xba>
    1660:	1c43      	adds	r3, r0, #1
    1662:	d108      	bne.n	1676 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    1664:	2201      	movs	r2, #1
    1666:	682b      	ldr	r3, [r5, #0]
    1668:	4393      	bics	r3, r2
    166a:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
    166c:	23ff      	movs	r3, #255	; 0xff
    166e:	061b      	lsls	r3, r3, #24
    1670:	603b      	str	r3, [r7, #0]
}
    1672:	b005      	add	sp, #20
    1674:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
    1676:	683b      	ldr	r3, [r7, #0]
    1678:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    167a:	2600      	movs	r6, #0
    167c:	2801      	cmp	r0, #1
    167e:	dd04      	ble.n	168a <sys_clock_set_timeout+0x36>
    1680:	4b2a      	ldr	r3, [pc, #168]	; (172c <sys_clock_set_timeout+0xd8>)
    1682:	001e      	movs	r6, r3
    1684:	4298      	cmp	r0, r3
    1686:	dc00      	bgt.n	168a <sys_clock_set_timeout+0x36>
    1688:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
    168a:	f3ef 8310 	mrs	r3, PRIMASK
    168e:	b672      	cpsid	i
    1690:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
    1692:	f7ff ff83 	bl	159c <elapsed>
	overflow_cyc = 0U;
    1696:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
    1698:	68ab      	ldr	r3, [r5, #8]
    169a:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
    169c:	4b24      	ldr	r3, [pc, #144]	; (1730 <sys_clock_set_timeout+0xdc>)
    169e:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
    16a0:	4b24      	ldr	r3, [pc, #144]	; (1734 <sys_clock_set_timeout+0xe0>)
	cycle_count += pending;
    16a2:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
    16a4:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
    16a6:	4b24      	ldr	r3, [pc, #144]	; (1738 <sys_clock_set_timeout+0xe4>)
    16a8:	681b      	ldr	r3, [r3, #0]
    16aa:	9300      	str	r3, [sp, #0]
    16ac:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
    16ae:	4290      	cmp	r0, r2
    16b0:	db33      	blt.n	171a <sys_clock_set_timeout+0xc6>
		delay = ticks * CYC_PER_TICK;
    16b2:	2396      	movs	r3, #150	; 0x96
    16b4:	015b      	lsls	r3, r3, #5
    16b6:	435e      	muls	r6, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
    16b8:	4a20      	ldr	r2, [pc, #128]	; (173c <sys_clock_set_timeout+0xe8>)
		delay += unannounced;
    16ba:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
    16bc:	0019      	movs	r1, r3
    16be:	1880      	adds	r0, r0, r2
    16c0:	f7fe fd0a 	bl	d8 <__udivsi3>
		delay =
    16c4:	2396      	movs	r3, #150	; 0x96
    16c6:	015b      	lsls	r3, r3, #5
    16c8:	4358      	muls	r0, r3
		delay -= unannounced;
    16ca:	9b00      	ldr	r3, [sp, #0]
    16cc:	1b1b      	subs	r3, r3, r4
    16ce:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
    16d0:	2380      	movs	r3, #128	; 0x80
    16d2:	00db      	lsls	r3, r3, #3
    16d4:	4298      	cmp	r0, r3
    16d6:	d923      	bls.n	1720 <sys_clock_set_timeout+0xcc>
		if (delay > MAX_CYCLES) {
    16d8:	4b19      	ldr	r3, [pc, #100]	; (1740 <sys_clock_set_timeout+0xec>)
    16da:	4298      	cmp	r0, r3
    16dc:	d820      	bhi.n	1720 <sys_clock_set_timeout+0xcc>
	SysTick->VAL = 0; /* resets timer to last_load */
    16de:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
    16e0:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
    16e2:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
    16e4:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
    16e6:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    16e8:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
    16ea:	9b02      	ldr	r3, [sp, #8]
    16ec:	9802      	ldr	r0, [sp, #8]
    16ee:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
    16f0:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
    16f2:	4288      	cmp	r0, r1
    16f4:	d202      	bcs.n	16fc <sys_clock_set_timeout+0xa8>
		cycle_count += (val1 + (last_load_ - val2));
    16f6:	9a01      	ldr	r2, [sp, #4]
    16f8:	189b      	adds	r3, r3, r2
    16fa:	191a      	adds	r2, r3, r4
    16fc:	4b0c      	ldr	r3, [pc, #48]	; (1730 <sys_clock_set_timeout+0xdc>)
    16fe:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
    1700:	9b03      	ldr	r3, [sp, #12]
    1702:	2b00      	cmp	r3, #0
    1704:	d1b5      	bne.n	1672 <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
    1706:	b662      	cpsie	i
    1708:	f3bf 8f6f 	isb	sy
    170c:	e7b1      	b.n	1672 <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
    170e:	683b      	ldr	r3, [r7, #0]
    1710:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1712:	1c43      	adds	r3, r0, #1
    1714:	d1b1      	bne.n	167a <sys_clock_set_timeout+0x26>
    1716:	4805      	ldr	r0, [pc, #20]	; (172c <sys_clock_set_timeout+0xd8>)
    1718:	e7b6      	b.n	1688 <sys_clock_set_timeout+0x34>
    171a:	2080      	movs	r0, #128	; 0x80
    171c:	00c0      	lsls	r0, r0, #3
    171e:	e7de      	b.n	16de <sys_clock_set_timeout+0x8a>
    1720:	0018      	movs	r0, r3
    1722:	e7dc      	b.n	16de <sys_clock_set_timeout+0x8a>
    1724:	e000e010 	.word	0xe000e010
    1728:	2000018c 	.word	0x2000018c
    172c:	00000da6 	.word	0x00000da6
    1730:	20000188 	.word	0x20000188
    1734:	20000180 	.word	0x20000180
    1738:	20000184 	.word	0x20000184
    173c:	000012bf 	.word	0x000012bf
    1740:	00ffe880 	.word	0x00ffe880

00001744 <sys_clock_elapsed>:
{
    1744:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    1746:	f3ef 8410 	mrs	r4, PRIMASK
    174a:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    174c:	f7ff ff26 	bl	159c <elapsed>
    1750:	4b07      	ldr	r3, [pc, #28]	; (1770 <sys_clock_elapsed+0x2c>)
    1752:	4a08      	ldr	r2, [pc, #32]	; (1774 <sys_clock_elapsed+0x30>)
    1754:	681b      	ldr	r3, [r3, #0]
    1756:	6812      	ldr	r2, [r2, #0]
    1758:	1a9b      	subs	r3, r3, r2
    175a:	1818      	adds	r0, r3, r0
	if (key != 0U) {
    175c:	2c00      	cmp	r4, #0
    175e:	d102      	bne.n	1766 <sys_clock_elapsed+0x22>
	__asm__ volatile(
    1760:	b662      	cpsie	i
    1762:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
    1766:	2196      	movs	r1, #150	; 0x96
    1768:	0149      	lsls	r1, r1, #5
    176a:	f7fe fcb5 	bl	d8 <__udivsi3>
}
    176e:	bd10      	pop	{r4, pc}
    1770:	20000188 	.word	0x20000188
    1774:	20000184 	.word	0x20000184

00001778 <pinctrl_configure_pins>:
	soc_port_configure(&soc_pin);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    1778:	b5f0      	push	{r4, r5, r6, r7, lr}
    177a:	0004      	movs	r4, r0
	soc_pin.pinum = SAM_PINMUX_PIN_GET(pin);
    177c:	271f      	movs	r7, #31
    177e:	0089      	lsls	r1, r1, #2
{
    1780:	b085      	sub	sp, #20
    1782:	1845      	adds	r5, r0, r1
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
    1784:	42ac      	cmp	r4, r5
    1786:	d102      	bne.n	178e <pinctrl_configure_pins+0x16>
		pinctrl_configure_pin(*pins++);
	}

	return 0;
}
    1788:	2000      	movs	r0, #0
    178a:	b005      	add	sp, #20
    178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	soc_pin.regs = (PortGroup *) sam_port_addrs[port_idx];
    178e:	200f      	movs	r0, #15
		pinctrl_configure_pin(*pins++);
    1790:	6823      	ldr	r3, [r4, #0]
	soc_pin.regs = (PortGroup *) sam_port_addrs[port_idx];
    1792:	490d      	ldr	r1, [pc, #52]	; (17c8 <pinctrl_configure_pins+0x50>)
	port_idx = SAM_PINMUX_PORT_GET(pin);
    1794:	0c1a      	lsrs	r2, r3, #16
	soc_pin.regs = (PortGroup *) sam_port_addrs[port_idx];
    1796:	4002      	ands	r2, r0
    1798:	0092      	lsls	r2, r2, #2
    179a:	5851      	ldr	r1, [r2, r1]
	soc_pin.flags = SAM_PINCTRL_FLAGS_GET(pin) << SOC_PORT_FLAGS_POS;
    179c:	3030      	adds	r0, #48	; 0x30
	soc_pin.pinum = SAM_PINMUX_PIN_GET(pin);
    179e:	0d1a      	lsrs	r2, r3, #20
	port_func = SAM_PINMUX_FUNC_GET(pin);
    17a0:	011e      	lsls	r6, r3, #4
	soc_pin.pinum = SAM_PINMUX_PIN_GET(pin);
    17a2:	403a      	ands	r2, r7
	soc_pin.flags = SAM_PINCTRL_FLAGS_GET(pin) << SOC_PORT_FLAGS_POS;
    17a4:	4018      	ands	r0, r3
	if (port_func == SAM_PINMUX_FUNC_periph) {
    17a6:	0f76      	lsrs	r6, r6, #29
    17a8:	2e01      	cmp	r6, #1
    17aa:	d104      	bne.n	17b6 <pinctrl_configure_pins+0x3e>
		soc_pin.flags |= (SAM_PINMUX_PERIPH_GET(pin)
    17ac:	0f1b      	lsrs	r3, r3, #28
				  << SOC_PORT_FUNC_POS)
    17ae:	041b      	lsls	r3, r3, #16
		soc_pin.flags |= (SAM_PINMUX_PERIPH_GET(pin)
    17b0:	4303      	orrs	r3, r0
    17b2:	2040      	movs	r0, #64	; 0x40
    17b4:	4318      	orrs	r0, r3
	soc_pin.flags = SAM_PINCTRL_FLAGS_GET(pin) << SOC_PORT_FLAGS_POS;
    17b6:	9003      	str	r0, [sp, #12]
	soc_port_configure(&soc_pin);
    17b8:	a801      	add	r0, sp, #4
	soc_pin.regs = (PortGroup *) sam_port_addrs[port_idx];
    17ba:	9101      	str	r1, [sp, #4]
	soc_pin.pinum = SAM_PINMUX_PIN_GET(pin);
    17bc:	9202      	str	r2, [sp, #8]
    17be:	3404      	adds	r4, #4
	soc_port_configure(&soc_pin);
    17c0:	f000 fe00 	bl	23c4 <soc_port_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    17c4:	e7de      	b.n	1784 <pinctrl_configure_pins+0xc>
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	00002c34 	.word	0x00002c34

000017cc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    17cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
    17ce:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    17d0:	4e10      	ldr	r6, [pc, #64]	; (1814 <z_sys_init_run_level+0x48>)
    17d2:	0083      	lsls	r3, r0, #2
    17d4:	3001      	adds	r0, #1
    17d6:	599c      	ldr	r4, [r3, r6]
    17d8:	0083      	lsls	r3, r0, #2
    17da:	9301      	str	r3, [sp, #4]
    17dc:	9b01      	ldr	r3, [sp, #4]
    17de:	58f3      	ldr	r3, [r6, r3]
    17e0:	42a3      	cmp	r3, r4
    17e2:	d800      	bhi.n	17e6 <z_sys_init_run_level+0x1a>
		}
	}
}
    17e4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
    17e6:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    17e8:	6823      	ldr	r3, [r4, #0]
    17ea:	0028      	movs	r0, r5
    17ec:	4798      	blx	r3
		if (dev != NULL) {
    17ee:	2d00      	cmp	r5, #0
    17f0:	d00d      	beq.n	180e <z_sys_init_run_level+0x42>
			if (rc != 0) {
    17f2:	2800      	cmp	r0, #0
    17f4:	d007      	beq.n	1806 <z_sys_init_run_level+0x3a>
				if (rc < 0) {
    17f6:	17c2      	asrs	r2, r0, #31
    17f8:	1880      	adds	r0, r0, r2
				dev->state->init_res = rc;
    17fa:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
    17fc:	4050      	eors	r0, r2
				if (rc > UINT8_MAX) {
    17fe:	28ff      	cmp	r0, #255	; 0xff
    1800:	dd00      	ble.n	1804 <z_sys_init_run_level+0x38>
    1802:	20ff      	movs	r0, #255	; 0xff
				dev->state->init_res = rc;
    1804:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    1806:	68ea      	ldr	r2, [r5, #12]
    1808:	7853      	ldrb	r3, [r2, #1]
    180a:	433b      	orrs	r3, r7
    180c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    180e:	3408      	adds	r4, #8
    1810:	e7e4      	b.n	17dc <z_sys_init_run_level+0x10>
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	00002c40 	.word	0x00002c40

00001818 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    1818:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    181a:	2401      	movs	r4, #1
    181c:	4b09      	ldr	r3, [pc, #36]	; (1844 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    181e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    1820:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    1822:	f7ff ffd3 	bl	17cc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    1826:	f000 fd2f 	bl	2288 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    182a:	2004      	movs	r0, #4
    182c:	f7ff ffce 	bl	17cc <z_sys_init_run_level>

	z_init_static_threads();
    1830:	f000 f8ce 	bl	19d0 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    1834:	f7fe fd8c 	bl	350 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    1838:	4a03      	ldr	r2, [pc, #12]	; (1848 <bg_thread_main+0x30>)
    183a:	7b13      	ldrb	r3, [r2, #12]
    183c:	43a3      	bics	r3, r4
    183e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    1840:	bd10      	pop	{r4, pc}
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	200001c4 	.word	0x200001c4
    1848:	20000090 	.word	0x20000090

0000184c <z_bss_zero>:
{
    184c:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    184e:	4a03      	ldr	r2, [pc, #12]	; (185c <z_bss_zero+0x10>)
    1850:	4803      	ldr	r0, [pc, #12]	; (1860 <z_bss_zero+0x14>)
    1852:	2100      	movs	r1, #0
    1854:	1a12      	subs	r2, r2, r0
    1856:	f000 ffce 	bl	27f6 <z_early_memset>
}
    185a:	bd10      	pop	{r4, pc}
    185c:	200001c8 	.word	0x200001c8
    1860:	20000020 	.word	0x20000020

00001864 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    1864:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    1866:	2670      	movs	r6, #112	; 0x70
	z_setup_new_thread(thread, stack,
    1868:	2501      	movs	r5, #1
{
    186a:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    186c:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
    186e:	0201      	lsls	r1, r0, #8
    1870:	4811      	ldr	r0, [pc, #68]	; (18b8 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
    1872:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
    1874:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
    1876:	2000      	movs	r0, #0
{
    1878:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    187a:	9504      	str	r5, [sp, #16]
    187c:	350e      	adds	r5, #14
    187e:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    1880:	3509      	adds	r5, #9
    1882:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
    1884:	4b0d      	ldr	r3, [pc, #52]	; (18bc <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    1886:	9005      	str	r0, [sp, #20]
    1888:	9002      	str	r0, [sp, #8]
    188a:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    188c:	480c      	ldr	r0, [pc, #48]	; (18c0 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    188e:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    1890:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
    1892:	4b0c      	ldr	r3, [pc, #48]	; (18c4 <z_init_cpu+0x60>)
    1894:	0030      	movs	r0, r6
    1896:	9500      	str	r5, [sp, #0]
    1898:	0052      	lsls	r2, r2, #1
    189a:	f000 f86f 	bl	197c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    189e:	2204      	movs	r2, #4
    18a0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    18a2:	752c      	strb	r4, [r5, #20]
    18a4:	4393      	bics	r3, r2
    18a6:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    18a8:	3401      	adds	r4, #1
    18aa:	4b07      	ldr	r3, [pc, #28]	; (18c8 <z_init_cpu+0x64>)
    18ac:	02e4      	lsls	r4, r4, #11
    18ae:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    18b0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    18b2:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    18b4:	b006      	add	sp, #24
    18b6:	bd70      	pop	{r4, r5, r6, pc}
    18b8:	200009c8 	.word	0x200009c8
    18bc:	20000020 	.word	0x20000020
    18c0:	20000190 	.word	0x20000190
    18c4:	00002807 	.word	0x00002807
    18c8:	200001c8 	.word	0x200001c8

000018cc <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    18cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    18ce:	2000      	movs	r0, #0
{
    18d0:	b0a3      	sub	sp, #140	; 0x8c
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    18d2:	f7ff ff7b 	bl	17cc <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    18d6:	4b21      	ldr	r3, [pc, #132]	; (195c <z_cstart+0x90>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    18d8:	f383 8808 	msr	MSP, r3
    18dc:	4920      	ldr	r1, [pc, #128]	; (1960 <z_cstart+0x94>)
    18de:	4b21      	ldr	r3, [pc, #132]	; (1964 <z_cstart+0x98>)
    18e0:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    18e2:	2500      	movs	r5, #0
    18e4:	401a      	ands	r2, r3
    18e6:	23c0      	movs	r3, #192	; 0xc0
    18e8:	041b      	lsls	r3, r3, #16
    18ea:	4313      	orrs	r3, r2
    18ec:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    18ee:	f000 fdb5 	bl	245c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    18f2:	f7ff f987 	bl	c04 <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    18f6:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    18f8:	4e1b      	ldr	r6, [pc, #108]	; (1968 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    18fa:	ab06      	add	r3, sp, #24
    18fc:	32ff      	adds	r2, #255	; 0xff
    18fe:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
    1900:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
    1902:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    1904:	f000 ff4c 	bl	27a0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    1908:	2001      	movs	r0, #1
    190a:	f7ff ff5f 	bl	17cc <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    190e:	2002      	movs	r0, #2
    1910:	f7ff ff5c 	bl	17cc <z_sys_init_run_level>
	z_sched_init();
    1914:	f000 fa44 	bl	1da0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    1918:	4c14      	ldr	r4, [pc, #80]	; (196c <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    191a:	4b15      	ldr	r3, [pc, #84]	; (1970 <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
    191c:	61b4      	str	r4, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    191e:	2280      	movs	r2, #128	; 0x80
    1920:	9305      	str	r3, [sp, #20]
    1922:	2301      	movs	r3, #1
    1924:	4e13      	ldr	r6, [pc, #76]	; (1974 <z_cstart+0xa8>)
    1926:	4914      	ldr	r1, [pc, #80]	; (1978 <z_cstart+0xac>)
    1928:	9304      	str	r3, [sp, #16]
    192a:	00d2      	lsls	r2, r2, #3
    192c:	0033      	movs	r3, r6
    192e:	0020      	movs	r0, r4
    1930:	9503      	str	r5, [sp, #12]
    1932:	9502      	str	r5, [sp, #8]
    1934:	9501      	str	r5, [sp, #4]
    1936:	9500      	str	r5, [sp, #0]
    1938:	f000 f820 	bl	197c <z_setup_new_thread>
    193c:	2204      	movs	r2, #4
    193e:	0007      	movs	r7, r0
    1940:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
    1942:	0020      	movs	r0, r4
    1944:	4393      	bics	r3, r2
    1946:	7363      	strb	r3, [r4, #13]
    1948:	f000 ff93 	bl	2872 <z_ready_thread>
	z_init_cpu(0);
    194c:	0028      	movs	r0, r5
    194e:	f7ff ff89 	bl	1864 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    1952:	0032      	movs	r2, r6
    1954:	0039      	movs	r1, r7
    1956:	0020      	movs	r0, r4
    1958:	f7ff fa20 	bl	d9c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    195c:	200009c8 	.word	0x200009c8
    1960:	e000ed00 	.word	0xe000ed00
    1964:	ff00ffff 	.word	0xff00ffff
    1968:	20000190 	.word	0x20000190
    196c:	20000090 	.word	0x20000090
    1970:	00002d27 	.word	0x00002d27
    1974:	00001819 	.word	0x00001819
    1978:	20000ac8 	.word	0x20000ac8

0000197c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    197c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    197e:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    1980:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    1982:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    1984:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    1986:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    1988:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
    198a:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    198c:	2004      	movs	r0, #4
    198e:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
    1990:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    1992:	3207      	adds	r2, #7
	thread_base->prio = priority;
    1994:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    1996:	2007      	movs	r0, #7
    1998:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
    199a:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    199c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
    199e:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    19a0:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
    19a2:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
    19a4:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    19a6:	9202      	str	r2, [sp, #8]
    19a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    19aa:	0020      	movs	r0, r4
    19ac:	9201      	str	r2, [sp, #4]
    19ae:	9a08      	ldr	r2, [sp, #32]
    19b0:	9200      	str	r2, [sp, #0]
    19b2:	002a      	movs	r2, r5
    19b4:	f7ff f9dc 	bl	d70 <arch_new_thread>
	if (!_current) {
    19b8:	4b04      	ldr	r3, [pc, #16]	; (19cc <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
    19ba:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    19bc:	689b      	ldr	r3, [r3, #8]
    19be:	42b3      	cmp	r3, r6
    19c0:	d000      	beq.n	19c4 <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
    19c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    19c4:	0028      	movs	r0, r5
    19c6:	6663      	str	r3, [r4, #100]	; 0x64
    19c8:	b004      	add	sp, #16
    19ca:	bd70      	pop	{r4, r5, r6, pc}
    19cc:	20000190 	.word	0x20000190

000019d0 <z_init_static_threads>:
{
    19d0:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    19d2:	4c20      	ldr	r4, [pc, #128]	; (1a54 <z_init_static_threads+0x84>)
{
    19d4:	b086      	sub	sp, #24
    19d6:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    19d8:	4d1f      	ldr	r5, [pc, #124]	; (1a58 <z_init_static_threads+0x88>)
    19da:	42ac      	cmp	r4, r5
    19dc:	d308      	bcc.n	19f0 <z_init_static_threads+0x20>
	k_sched_lock();
    19de:	f000 f9b9 	bl	1d54 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    19e2:	0034      	movs	r4, r6
    19e4:	42ac      	cmp	r4, r5
    19e6:	d319      	bcc.n	1a1c <z_init_static_threads+0x4c>
	k_sched_unlock();
    19e8:	f000 f9c4 	bl	1d74 <k_sched_unlock>
}
    19ec:	b006      	add	sp, #24
    19ee:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
    19f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    19f2:	9305      	str	r3, [sp, #20]
    19f4:	6a23      	ldr	r3, [r4, #32]
    19f6:	9304      	str	r3, [sp, #16]
    19f8:	69e3      	ldr	r3, [r4, #28]
    19fa:	9303      	str	r3, [sp, #12]
    19fc:	69a3      	ldr	r3, [r4, #24]
    19fe:	9302      	str	r3, [sp, #8]
    1a00:	6963      	ldr	r3, [r4, #20]
    1a02:	9301      	str	r3, [sp, #4]
    1a04:	6923      	ldr	r3, [r4, #16]
    1a06:	9300      	str	r3, [sp, #0]
    1a08:	68e3      	ldr	r3, [r4, #12]
    1a0a:	68a2      	ldr	r2, [r4, #8]
    1a0c:	6861      	ldr	r1, [r4, #4]
    1a0e:	6820      	ldr	r0, [r4, #0]
    1a10:	f7ff ffb4 	bl	197c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    1a14:	6823      	ldr	r3, [r4, #0]
    1a16:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    1a18:	3430      	adds	r4, #48	; 0x30
    1a1a:	e7dd      	b.n	19d8 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    1a1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1a1e:	1c5a      	adds	r2, r3, #1
    1a20:	d00f      	beq.n	1a42 <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
    1a22:	43d8      	mvns	r0, r3
    1a24:	17c0      	asrs	r0, r0, #31
    1a26:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
    1a28:	220a      	movs	r2, #10
    1a2a:	2300      	movs	r3, #0
    1a2c:	17c1      	asrs	r1, r0, #31
    1a2e:	f7fe fbfd 	bl	22c <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
    1a32:	6826      	ldr	r6, [r4, #0]
    1a34:	000b      	movs	r3, r1
    1a36:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    1a38:	4301      	orrs	r1, r0
    1a3a:	d104      	bne.n	1a46 <z_init_static_threads+0x76>
	z_sched_start(thread);
    1a3c:	0030      	movs	r0, r6
    1a3e:	f000 f943 	bl	1cc8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    1a42:	3430      	adds	r4, #48	; 0x30
    1a44:	e7ce      	b.n	19e4 <z_init_static_threads+0x14>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    1a46:	0030      	movs	r0, r6
    1a48:	4904      	ldr	r1, [pc, #16]	; (1a5c <z_init_static_threads+0x8c>)
    1a4a:	3018      	adds	r0, #24
    1a4c:	f000 fb20 	bl	2090 <z_add_timeout>
    1a50:	e7f7      	b.n	1a42 <z_init_static_threads+0x72>
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	00002ad0 	.word	0x00002ad0
    1a58:	00002ad0 	.word	0x00002ad0
    1a5c:	0000283b 	.word	0x0000283b

00001a60 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    1a60:	b570      	push	{r4, r5, r6, lr}
	int ret = slice_ticks;
    1a62:	4d07      	ldr	r5, [pc, #28]	; (1a80 <z_reset_time_slice+0x20>)
    1a64:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    1a66:	2c00      	cmp	r4, #0
    1a68:	d008      	beq.n	1a7c <z_reset_time_slice+0x1c>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    1a6a:	f7ff fe6b 	bl	1744 <sys_clock_elapsed>
    1a6e:	4b05      	ldr	r3, [pc, #20]	; (1a84 <z_reset_time_slice+0x24>)
    1a70:	1824      	adds	r4, r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
    1a72:	2100      	movs	r1, #0
    1a74:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    1a76:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    1a78:	f000 ff2f 	bl	28da <z_set_timeout_expiry>
	}
}
    1a7c:	bd70      	pop	{r4, r5, r6, pc}
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	200001bc 	.word	0x200001bc
    1a84:	20000190 	.word	0x20000190

00001a88 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    1a88:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    1a8a:	4d0e      	ldr	r5, [pc, #56]	; (1ac4 <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1a8c:	4b0e      	ldr	r3, [pc, #56]	; (1ac8 <update_cache+0x40>)
	return list->head == list;
    1a8e:	69ec      	ldr	r4, [r5, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1a90:	429c      	cmp	r4, r3
    1a92:	d001      	beq.n	1a98 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    1a94:	2c00      	cmp	r4, #0
    1a96:	d100      	bne.n	1a9a <update_cache+0x12>
    1a98:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    1a9a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    1a9c:	2800      	cmp	r0, #0
    1a9e:	d108      	bne.n	1ab2 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    1aa0:	7b5a      	ldrb	r2, [r3, #13]
    1aa2:	06d2      	lsls	r2, r2, #27
    1aa4:	d105      	bne.n	1ab2 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    1aa6:	69a2      	ldr	r2, [r4, #24]
    1aa8:	2a00      	cmp	r2, #0
    1aaa:	d102      	bne.n	1ab2 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    1aac:	89da      	ldrh	r2, [r3, #14]
    1aae:	2a7f      	cmp	r2, #127	; 0x7f
    1ab0:	d805      	bhi.n	1abe <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    1ab2:	429c      	cmp	r4, r3
    1ab4:	d002      	beq.n	1abc <update_cache+0x34>
			z_reset_time_slice(thread);
    1ab6:	0020      	movs	r0, r4
    1ab8:	f7ff ffd2 	bl	1a60 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    1abc:	0023      	movs	r3, r4
    1abe:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    1ac0:	bd70      	pop	{r4, r5, r6, pc}
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	20000190 	.word	0x20000190
    1ac8:	200001ac 	.word	0x200001ac

00001acc <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
    1acc:	220d      	movs	r2, #13
{
    1ace:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    1ad0:	5682      	ldrsb	r2, [r0, r2]
{
    1ad2:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
    1ad4:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
    1ad6:	2a00      	cmp	r2, #0
    1ad8:	da04      	bge.n	1ae4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    1ada:	227f      	movs	r2, #127	; 0x7f
    1adc:	4013      	ands	r3, r2
    1ade:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    1ae0:	f000 fe98 	bl	2814 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    1ae4:	2380      	movs	r3, #128	; 0x80
    1ae6:	7b62      	ldrb	r2, [r4, #13]
    1ae8:	425b      	negs	r3, r3
    1aea:	4313      	orrs	r3, r2
	return list->head == list;
    1aec:	4a13      	ldr	r2, [pc, #76]	; (1b3c <move_thread_to_end_of_prio_q+0x70>)
    1aee:	7363      	strb	r3, [r4, #13]
    1af0:	69d3      	ldr	r3, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1af2:	4813      	ldr	r0, [pc, #76]	; (1b40 <move_thread_to_end_of_prio_q+0x74>)
    1af4:	4283      	cmp	r3, r0
    1af6:	d100      	bne.n	1afa <move_thread_to_end_of_prio_q+0x2e>
    1af8:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    1afa:	6a11      	ldr	r1, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1afc:	2b00      	cmp	r3, #0
    1afe:	d104      	bne.n	1b0a <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
    1b00:	6020      	str	r0, [r4, #0]
	node->prev = tail;
    1b02:	6061      	str	r1, [r4, #4]

	tail->next = node;
    1b04:	600c      	str	r4, [r1, #0]
	list->tail = node;
    1b06:	6214      	str	r4, [r2, #32]
}
    1b08:	e00c      	b.n	1b24 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
    1b0a:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
    1b0c:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
    1b0e:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
    1b10:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
    1b12:	42b5      	cmp	r5, r6
    1b14:	d00d      	beq.n	1b32 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    1b16:	42ae      	cmp	r6, r5
    1b18:	dd0b      	ble.n	1b32 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    1b1a:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
    1b1c:	6023      	str	r3, [r4, #0]
	node->prev = prev;
    1b1e:	6061      	str	r1, [r4, #4]
	prev->next = node;
    1b20:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    1b22:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    1b24:	6890      	ldr	r0, [r2, #8]
    1b26:	1b00      	subs	r0, r0, r4
    1b28:	4243      	negs	r3, r0
    1b2a:	4158      	adcs	r0, r3
    1b2c:	f7ff ffac 	bl	1a88 <update_cache>
}
    1b30:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
    1b32:	4299      	cmp	r1, r3
    1b34:	d0e4      	beq.n	1b00 <move_thread_to_end_of_prio_q+0x34>
    1b36:	681b      	ldr	r3, [r3, #0]
    1b38:	e7e0      	b.n	1afc <move_thread_to_end_of_prio_q+0x30>
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	20000190 	.word	0x20000190
    1b40:	200001ac 	.word	0x200001ac

00001b44 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    1b44:	230d      	movs	r3, #13
{
    1b46:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    1b48:	56c3      	ldrsb	r3, [r0, r3]
    1b4a:	7b41      	ldrb	r1, [r0, #13]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	db26      	blt.n	1b9e <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    1b50:	06cb      	lsls	r3, r1, #27
    1b52:	d124      	bne.n	1b9e <ready_thread+0x5a>
	return node->next != NULL;
    1b54:	6983      	ldr	r3, [r0, #24]
    1b56:	2b00      	cmp	r3, #0
    1b58:	d121      	bne.n	1b9e <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
    1b5a:	2280      	movs	r2, #128	; 0x80
    1b5c:	4252      	negs	r2, r2
    1b5e:	430a      	orrs	r2, r1
    1b60:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    1b62:	4a11      	ldr	r2, [pc, #68]	; (1ba8 <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1b64:	4c11      	ldr	r4, [pc, #68]	; (1bac <ready_thread+0x68>)
	return list->head == list;
    1b66:	69d1      	ldr	r1, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1b68:	42a1      	cmp	r1, r4
    1b6a:	d000      	beq.n	1b6e <ready_thread+0x2a>
    1b6c:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
    1b6e:	6a11      	ldr	r1, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1b70:	2b00      	cmp	r3, #0
    1b72:	d104      	bne.n	1b7e <ready_thread+0x3a>
	node->next = list;
    1b74:	6004      	str	r4, [r0, #0]
	node->prev = tail;
    1b76:	6041      	str	r1, [r0, #4]
	tail->next = node;
    1b78:	6008      	str	r0, [r1, #0]
	list->tail = node;
    1b7a:	6210      	str	r0, [r2, #32]
}
    1b7c:	e00c      	b.n	1b98 <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
    1b7e:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
    1b80:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
    1b82:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
    1b84:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
    1b86:	42b5      	cmp	r5, r6
    1b88:	d00a      	beq.n	1ba0 <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
    1b8a:	42ae      	cmp	r6, r5
    1b8c:	dd08      	ble.n	1ba0 <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
    1b8e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    1b90:	6003      	str	r3, [r0, #0]
	node->prev = prev;
    1b92:	6042      	str	r2, [r0, #4]
	prev->next = node;
    1b94:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    1b96:	6058      	str	r0, [r3, #4]
		update_cache(0);
    1b98:	2000      	movs	r0, #0
    1b9a:	f7ff ff75 	bl	1a88 <update_cache>
}
    1b9e:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
    1ba0:	428b      	cmp	r3, r1
    1ba2:	d0e7      	beq.n	1b74 <ready_thread+0x30>
    1ba4:	681b      	ldr	r3, [r3, #0]
    1ba6:	e7e3      	b.n	1b70 <ready_thread+0x2c>
    1ba8:	20000190 	.word	0x20000190
    1bac:	200001ac 	.word	0x200001ac

00001bb0 <unready_thread>:
	if (z_is_thread_queued(thread)) {
    1bb0:	220d      	movs	r2, #13
{
    1bb2:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    1bb4:	5682      	ldrsb	r2, [r0, r2]
{
    1bb6:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
    1bb8:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
    1bba:	2a00      	cmp	r2, #0
    1bbc:	da04      	bge.n	1bc8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    1bbe:	227f      	movs	r2, #127	; 0x7f
    1bc0:	4013      	ands	r3, r2
    1bc2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    1bc4:	f000 fe26 	bl	2814 <sys_dlist_remove>
	update_cache(thread == _current);
    1bc8:	4b03      	ldr	r3, [pc, #12]	; (1bd8 <unready_thread+0x28>)
    1bca:	6898      	ldr	r0, [r3, #8]
    1bcc:	1b00      	subs	r0, r0, r4
    1bce:	4243      	negs	r3, r0
    1bd0:	4158      	adcs	r0, r3
    1bd2:	f7ff ff59 	bl	1a88 <update_cache>
}
    1bd6:	bd10      	pop	{r4, pc}
    1bd8:	20000190 	.word	0x20000190

00001bdc <k_sched_time_slice_set>:
{
    1bdc:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    1bde:	f3ef 8410 	mrs	r4, PRIMASK
    1be2:	b672      	cpsid	i
			return ((uint32_t)t) * (to_hz / from_hz);
    1be4:	230a      	movs	r3, #10
    1be6:	4343      	muls	r3, r0
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    1be8:	2800      	cmp	r0, #0
    1bea:	dd02      	ble.n	1bf2 <k_sched_time_slice_set+0x16>
			slice_ticks = MAX(2, slice_ticks);
    1bec:	2b02      	cmp	r3, #2
    1bee:	da00      	bge.n	1bf2 <k_sched_time_slice_set+0x16>
    1bf0:	2302      	movs	r3, #2
		_current_cpu->slice_ticks = 0;
    1bf2:	2000      	movs	r0, #0
    1bf4:	4a07      	ldr	r2, [pc, #28]	; (1c14 <k_sched_time_slice_set+0x38>)
    1bf6:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    1bf8:	4807      	ldr	r0, [pc, #28]	; (1c18 <k_sched_time_slice_set+0x3c>)
    1bfa:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
    1bfc:	4b07      	ldr	r3, [pc, #28]	; (1c1c <k_sched_time_slice_set+0x40>)
		z_reset_time_slice(_current);
    1bfe:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
    1c00:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
    1c02:	f7ff ff2d 	bl	1a60 <z_reset_time_slice>
	if (key != 0U) {
    1c06:	2c00      	cmp	r4, #0
    1c08:	d102      	bne.n	1c10 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
    1c0a:	b662      	cpsie	i
    1c0c:	f3bf 8f6f 	isb	sy
}
    1c10:	bd10      	pop	{r4, pc}
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	20000190 	.word	0x20000190
    1c18:	200001bc 	.word	0x200001bc
    1c1c:	200001b8 	.word	0x200001b8

00001c20 <z_time_slice>:
{
    1c20:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    1c22:	f3ef 8510 	mrs	r5, PRIMASK
    1c26:	b672      	cpsid	i
	if (pending_current == _current) {
    1c28:	4b17      	ldr	r3, [pc, #92]	; (1c88 <z_time_slice+0x68>)
    1c2a:	4a18      	ldr	r2, [pc, #96]	; (1c8c <z_time_slice+0x6c>)
    1c2c:	689c      	ldr	r4, [r3, #8]
    1c2e:	6811      	ldr	r1, [r2, #0]
    1c30:	428c      	cmp	r4, r1
    1c32:	d108      	bne.n	1c46 <z_time_slice+0x26>
	z_reset_time_slice(curr);
    1c34:	0020      	movs	r0, r4
    1c36:	f7ff ff13 	bl	1a60 <z_reset_time_slice>
	if (key != 0U) {
    1c3a:	2d00      	cmp	r5, #0
    1c3c:	d102      	bne.n	1c44 <z_time_slice+0x24>
	__asm__ volatile(
    1c3e:	b662      	cpsie	i
    1c40:	f3bf 8f6f 	isb	sy
}
    1c44:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    1c46:	2100      	movs	r1, #0
    1c48:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    1c4a:	4a11      	ldr	r2, [pc, #68]	; (1c90 <z_time_slice+0x70>)
	if (slice_time(_current) && sliceable(_current)) {
    1c4c:	6812      	ldr	r2, [r2, #0]
    1c4e:	428a      	cmp	r2, r1
    1c50:	d018      	beq.n	1c84 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
    1c52:	89e2      	ldrh	r2, [r4, #14]
    1c54:	2a7f      	cmp	r2, #127	; 0x7f
    1c56:	d815      	bhi.n	1c84 <z_time_slice+0x64>
		&& !z_is_thread_prevented_from_running(thread)
    1c58:	7b62      	ldrb	r2, [r4, #13]
    1c5a:	06d2      	lsls	r2, r2, #27
    1c5c:	d112      	bne.n	1c84 <z_time_slice+0x64>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    1c5e:	210e      	movs	r1, #14
    1c60:	4a0c      	ldr	r2, [pc, #48]	; (1c94 <z_time_slice+0x74>)
    1c62:	5661      	ldrsb	r1, [r4, r1]
    1c64:	6812      	ldr	r2, [r2, #0]
    1c66:	4291      	cmp	r1, r2
    1c68:	db0c      	blt.n	1c84 <z_time_slice+0x64>
		&& !z_is_idle_thread_object(thread);
    1c6a:	4a0b      	ldr	r2, [pc, #44]	; (1c98 <z_time_slice+0x78>)
    1c6c:	4294      	cmp	r4, r2
    1c6e:	d009      	beq.n	1c84 <z_time_slice+0x64>
		if (ticks >= _current_cpu->slice_ticks) {
    1c70:	691a      	ldr	r2, [r3, #16]
    1c72:	4282      	cmp	r2, r0
    1c74:	dc03      	bgt.n	1c7e <z_time_slice+0x5e>
		move_thread_to_end_of_prio_q(curr);
    1c76:	0020      	movs	r0, r4
    1c78:	f7ff ff28 	bl	1acc <move_thread_to_end_of_prio_q>
    1c7c:	e7da      	b.n	1c34 <z_time_slice+0x14>
			_current_cpu->slice_ticks -= ticks;
    1c7e:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    1c80:	611a      	str	r2, [r3, #16]
    1c82:	e7da      	b.n	1c3a <z_time_slice+0x1a>
    1c84:	2200      	movs	r2, #0
    1c86:	e7fb      	b.n	1c80 <z_time_slice+0x60>
    1c88:	20000190 	.word	0x20000190
    1c8c:	200001b4 	.word	0x200001b4
    1c90:	200001bc 	.word	0x200001bc
    1c94:	200001b8 	.word	0x200001b8
    1c98:	20000020 	.word	0x20000020

00001c9c <z_reschedule>:
{
    1c9c:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    1c9e:	2900      	cmp	r1, #0
    1ca0:	d10a      	bne.n	1cb8 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1ca2:	f3ef 8005 	mrs	r0, IPSR
    1ca6:	2800      	cmp	r0, #0
    1ca8:	d107      	bne.n	1cba <z_reschedule+0x1e>
	return new_thread != _current;
    1caa:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
    1cac:	689a      	ldr	r2, [r3, #8]
    1cae:	699b      	ldr	r3, [r3, #24]
    1cb0:	429a      	cmp	r2, r3
    1cb2:	d002      	beq.n	1cba <z_reschedule+0x1e>
	ret = arch_swap(key);
    1cb4:	f7ff f802 	bl	cbc <arch_swap>
}
    1cb8:	bd10      	pop	{r4, pc}
    1cba:	b662      	cpsie	i
    1cbc:	f3bf 8f6f 	isb	sy
    1cc0:	e7fa      	b.n	1cb8 <z_reschedule+0x1c>
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	20000190 	.word	0x20000190

00001cc8 <z_sched_start>:
{
    1cc8:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    1cca:	f3ef 8410 	mrs	r4, PRIMASK
    1cce:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
    1cd0:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    1cd2:	7b43      	ldrb	r3, [r0, #13]
    1cd4:	4213      	tst	r3, r2
    1cd6:	d105      	bne.n	1ce4 <z_sched_start+0x1c>
	if (key != 0U) {
    1cd8:	2c00      	cmp	r4, #0
    1cda:	d102      	bne.n	1ce2 <z_sched_start+0x1a>
	__asm__ volatile(
    1cdc:	b662      	cpsie	i
    1cde:	f3bf 8f6f 	isb	sy
}
    1ce2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1ce4:	4393      	bics	r3, r2
    1ce6:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    1ce8:	f7ff ff2c 	bl	1b44 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    1cec:	0021      	movs	r1, r4
    1cee:	4802      	ldr	r0, [pc, #8]	; (1cf8 <z_sched_start+0x30>)
    1cf0:	f7ff ffd4 	bl	1c9c <z_reschedule>
    1cf4:	e7f5      	b.n	1ce2 <z_sched_start+0x1a>
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	200001c5 	.word	0x200001c5

00001cfc <z_impl_k_thread_suspend>:
{
    1cfc:	b570      	push	{r4, r5, r6, lr}
    1cfe:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    1d00:	3018      	adds	r0, #24
    1d02:	f000 fdd7 	bl	28b4 <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
    1d06:	f3ef 8610 	mrs	r6, PRIMASK
    1d0a:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
    1d0c:	220d      	movs	r2, #13
    1d0e:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
    1d10:	7b63      	ldrb	r3, [r4, #13]
    1d12:	2a00      	cmp	r2, #0
    1d14:	da05      	bge.n	1d22 <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    1d16:	227f      	movs	r2, #127	; 0x7f
    1d18:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
    1d1a:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    1d1c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    1d1e:	f000 fd79 	bl	2814 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    1d22:	2310      	movs	r3, #16
		update_cache(thread == _current);
    1d24:	4d0a      	ldr	r5, [pc, #40]	; (1d50 <z_impl_k_thread_suspend+0x54>)
    1d26:	7b62      	ldrb	r2, [r4, #13]
    1d28:	68a8      	ldr	r0, [r5, #8]
    1d2a:	4313      	orrs	r3, r2
    1d2c:	1b00      	subs	r0, r0, r4
    1d2e:	7363      	strb	r3, [r4, #13]
    1d30:	4243      	negs	r3, r0
    1d32:	4158      	adcs	r0, r3
    1d34:	f7ff fea8 	bl	1a88 <update_cache>
	if (key != 0U) {
    1d38:	2e00      	cmp	r6, #0
    1d3a:	d102      	bne.n	1d42 <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
    1d3c:	b662      	cpsie	i
    1d3e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    1d42:	68ab      	ldr	r3, [r5, #8]
    1d44:	42a3      	cmp	r3, r4
    1d46:	d101      	bne.n	1d4c <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
    1d48:	f000 fdad 	bl	28a6 <z_reschedule_unlocked>
}
    1d4c:	bd70      	pop	{r4, r5, r6, pc}
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	20000190 	.word	0x20000190

00001d54 <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
    1d54:	f3ef 8110 	mrs	r1, PRIMASK
    1d58:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    1d5a:	4b05      	ldr	r3, [pc, #20]	; (1d70 <k_sched_lock+0x1c>)
    1d5c:	689a      	ldr	r2, [r3, #8]
    1d5e:	7bd3      	ldrb	r3, [r2, #15]
    1d60:	3b01      	subs	r3, #1
    1d62:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
    1d64:	2900      	cmp	r1, #0
    1d66:	d102      	bne.n	1d6e <k_sched_lock+0x1a>
	__asm__ volatile(
    1d68:	b662      	cpsie	i
    1d6a:	f3bf 8f6f 	isb	sy
}
    1d6e:	4770      	bx	lr
    1d70:	20000190 	.word	0x20000190

00001d74 <k_sched_unlock>:
{
    1d74:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    1d76:	f3ef 8410 	mrs	r4, PRIMASK
    1d7a:	b672      	cpsid	i
		++_current->base.sched_locked;
    1d7c:	4b07      	ldr	r3, [pc, #28]	; (1d9c <k_sched_unlock+0x28>)
		update_cache(0);
    1d7e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    1d80:	689a      	ldr	r2, [r3, #8]
    1d82:	7bd3      	ldrb	r3, [r2, #15]
    1d84:	3301      	adds	r3, #1
    1d86:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    1d88:	f7ff fe7e 	bl	1a88 <update_cache>
	if (key != 0U) {
    1d8c:	2c00      	cmp	r4, #0
    1d8e:	d102      	bne.n	1d96 <k_sched_unlock+0x22>
	__asm__ volatile(
    1d90:	b662      	cpsie	i
    1d92:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
    1d96:	f000 fd86 	bl	28a6 <z_reschedule_unlocked>
}
    1d9a:	bd10      	pop	{r4, pc}
    1d9c:	20000190 	.word	0x20000190

00001da0 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    1da0:	2100      	movs	r1, #0
{
    1da2:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
    1da4:	4b03      	ldr	r3, [pc, #12]	; (1db4 <z_sched_init+0x14>)
    1da6:	4a04      	ldr	r2, [pc, #16]	; (1db8 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    1da8:	0008      	movs	r0, r1
    1daa:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
    1dac:	621a      	str	r2, [r3, #32]
    1dae:	f7ff ff15 	bl	1bdc <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
    1db2:	bd10      	pop	{r4, pc}
    1db4:	20000190 	.word	0x20000190
    1db8:	200001ac 	.word	0x200001ac

00001dbc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    1dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    1dbe:	f3ef 8510 	mrs	r5, PRIMASK
    1dc2:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
    1dc4:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    1dc6:	4c19      	ldr	r4, [pc, #100]	; (1e2c <z_impl_k_yield+0x70>)
    1dc8:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    1dca:	7b43      	ldrb	r3, [r0, #13]
    1dcc:	4013      	ands	r3, r2
    1dce:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    1dd0:	f000 fd20 	bl	2814 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    1dd4:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
    1dd6:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    1dd8:	4252      	negs	r2, r2
    1dda:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1ddc:	4814      	ldr	r0, [pc, #80]	; (1e30 <z_impl_k_yield+0x74>)
    1dde:	430a      	orrs	r2, r1
    1de0:	735a      	strb	r2, [r3, #13]
	return list->head == list;
    1de2:	69e2      	ldr	r2, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1de4:	4282      	cmp	r2, r0
    1de6:	d100      	bne.n	1dea <z_impl_k_yield+0x2e>
    1de8:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
    1dea:	6a21      	ldr	r1, [r4, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1dec:	2a00      	cmp	r2, #0
    1dee:	d104      	bne.n	1dfa <z_impl_k_yield+0x3e>
	node->next = list;
    1df0:	6018      	str	r0, [r3, #0]
	node->prev = tail;
    1df2:	6059      	str	r1, [r3, #4]
	tail->next = node;
    1df4:	600b      	str	r3, [r1, #0]
	list->tail = node;
    1df6:	6223      	str	r3, [r4, #32]
}
    1df8:	e00c      	b.n	1e14 <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
    1dfa:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
    1dfc:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
    1dfe:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
    1e00:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
    1e02:	42be      	cmp	r6, r7
    1e04:	d00d      	beq.n	1e22 <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    1e06:	42b7      	cmp	r7, r6
    1e08:	dd0b      	ble.n	1e22 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    1e0a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    1e0c:	601a      	str	r2, [r3, #0]
	node->prev = prev;
    1e0e:	6059      	str	r1, [r3, #4]
	prev->next = node;
    1e10:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    1e12:	6053      	str	r3, [r2, #4]
	update_cache(1);
    1e14:	2001      	movs	r0, #1
    1e16:	f7ff fe37 	bl	1a88 <update_cache>
    1e1a:	0028      	movs	r0, r5
    1e1c:	f7fe ff4e 	bl	cbc <arch_swap>
	z_swap(&sched_spinlock, key);
}
    1e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    1e22:	428a      	cmp	r2, r1
    1e24:	d0e4      	beq.n	1df0 <z_impl_k_yield+0x34>
    1e26:	6812      	ldr	r2, [r2, #0]
    1e28:	e7e0      	b.n	1dec <z_impl_k_yield+0x30>
    1e2a:	46c0      	nop			; (mov r8, r8)
    1e2c:	20000190 	.word	0x20000190
    1e30:	200001ac 	.word	0x200001ac

00001e34 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    1e34:	0003      	movs	r3, r0
{
    1e36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
    1e38:	430b      	orrs	r3, r1
{
    1e3a:	0004      	movs	r4, r0
    1e3c:	000d      	movs	r5, r1
	if (ticks == 0) {
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d103      	bne.n	1e4a <z_tick_sleep+0x16>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
    1e42:	f7ff ffbb 	bl	1dbc <z_impl_k_yield>
		k_yield();
		return 0;
    1e46:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    1e48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    1e4a:	1c4b      	adds	r3, r1, #1
    1e4c:	db2e      	blt.n	1eac <z_tick_sleep+0x78>
    1e4e:	1c4b      	adds	r3, r1, #1
    1e50:	d101      	bne.n	1e56 <z_tick_sleep+0x22>
    1e52:	1c83      	adds	r3, r0, #2
    1e54:	d32a      	bcc.n	1eac <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    1e56:	f000 fd57 	bl	2908 <sys_clock_tick_get_32>
    1e5a:	1827      	adds	r7, r4, r0
    1e5c:	f3ef 8310 	mrs	r3, PRIMASK
    1e60:	b672      	cpsid	i
	pending_current = _current;
    1e62:	4e14      	ldr	r6, [pc, #80]	; (1eb4 <z_tick_sleep+0x80>)
    1e64:	9301      	str	r3, [sp, #4]
    1e66:	68b0      	ldr	r0, [r6, #8]
    1e68:	4b13      	ldr	r3, [pc, #76]	; (1eb8 <z_tick_sleep+0x84>)
    1e6a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    1e6c:	f7ff fea0 	bl	1bb0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    1e70:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    1e72:	0022      	movs	r2, r4
    1e74:	002b      	movs	r3, r5
    1e76:	4911      	ldr	r1, [pc, #68]	; (1ebc <z_tick_sleep+0x88>)
    1e78:	3018      	adds	r0, #24
    1e7a:	f000 f909 	bl	2090 <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    1e7e:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
    1e80:	68b2      	ldr	r2, [r6, #8]
    1e82:	9801      	ldr	r0, [sp, #4]
    1e84:	7b51      	ldrb	r1, [r2, #13]
    1e86:	430b      	orrs	r3, r1
    1e88:	7353      	strb	r3, [r2, #13]
    1e8a:	f7fe ff17 	bl	cbc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    1e8e:	f000 fd3b 	bl	2908 <sys_clock_tick_get_32>
    1e92:	2300      	movs	r3, #0
    1e94:	003a      	movs	r2, r7
    1e96:	0004      	movs	r4, r0
    1e98:	001d      	movs	r5, r3
    1e9a:	1b12      	subs	r2, r2, r4
    1e9c:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
    1e9e:	42ab      	cmp	r3, r5
    1ea0:	dc02      	bgt.n	1ea8 <z_tick_sleep+0x74>
    1ea2:	d1d0      	bne.n	1e46 <z_tick_sleep+0x12>
    1ea4:	42aa      	cmp	r2, r5
    1ea6:	d0ce      	beq.n	1e46 <z_tick_sleep+0x12>
		return ticks;
    1ea8:	0010      	movs	r0, r2
    1eaa:	e7cd      	b.n	1e48 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    1eac:	2702      	movs	r7, #2
    1eae:	427f      	negs	r7, r7
    1eb0:	1b3f      	subs	r7, r7, r4
    1eb2:	e7d3      	b.n	1e5c <z_tick_sleep+0x28>
    1eb4:	20000190 	.word	0x20000190
    1eb8:	200001b4 	.word	0x200001b4
    1ebc:	0000283b 	.word	0x0000283b

00001ec0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    1ec0:	b510      	push	{r4, lr}
    1ec2:	000b      	movs	r3, r1
    1ec4:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    1ec6:	1c42      	adds	r2, r0, #1
    1ec8:	d107      	bne.n	1eda <z_impl_k_sleep+0x1a>
    1eca:	3301      	adds	r3, #1
    1ecc:	d105      	bne.n	1eda <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
    1ece:	4b07      	ldr	r3, [pc, #28]	; (1eec <z_impl_k_sleep+0x2c>)
    1ed0:	6898      	ldr	r0, [r3, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
    1ed2:	f7ff ff13 	bl	1cfc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    1ed6:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    1ed8:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    1eda:	0021      	movs	r1, r4
    1edc:	f7ff ffaa 	bl	1e34 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
    1ee0:	220a      	movs	r2, #10
    1ee2:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    1ee4:	17c1      	asrs	r1, r0, #31
    1ee6:	f7fe f95d 	bl	1a4 <__aeabi_uldivmod>
	return ret;
    1eea:	e7f5      	b.n	1ed8 <z_impl_k_sleep+0x18>
    1eec:	20000190 	.word	0x20000190

00001ef0 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
    1ef0:	4b01      	ldr	r3, [pc, #4]	; (1ef8 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
    1ef2:	6898      	ldr	r0, [r3, #8]
}
    1ef4:	4770      	bx	lr
    1ef6:	46c0      	nop			; (mov r8, r8)
    1ef8:	20000190 	.word	0x20000190

00001efc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    1efc:	b570      	push	{r4, r5, r6, lr}
    1efe:	0004      	movs	r4, r0
    1f00:	f3ef 8610 	mrs	r6, PRIMASK
    1f04:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    1f06:	7b03      	ldrb	r3, [r0, #12]
    1f08:	07db      	lsls	r3, r3, #31
    1f0a:	d508      	bpl.n	1f1e <z_thread_abort+0x22>
	if (key != 0U) {
    1f0c:	2e00      	cmp	r6, #0
    1f0e:	d102      	bne.n	1f16 <z_thread_abort+0x1a>
	__asm__ volatile(
    1f10:	b662      	cpsie	i
    1f12:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    1f16:	2004      	movs	r0, #4
    1f18:	b662      	cpsie	i
    1f1a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    1f1c:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    1f1e:	2308      	movs	r3, #8
    1f20:	7b42      	ldrb	r2, [r0, #13]
    1f22:	421a      	tst	r2, r3
    1f24:	d005      	beq.n	1f32 <z_thread_abort+0x36>
	if (key != 0U) {
    1f26:	2e00      	cmp	r6, #0
    1f28:	d1f8      	bne.n	1f1c <z_thread_abort+0x20>
	__asm__ volatile(
    1f2a:	b662      	cpsie	i
    1f2c:	f3bf 8f6f 	isb	sy
    1f30:	e7f4      	b.n	1f1c <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    1f32:	2120      	movs	r1, #32
    1f34:	0010      	movs	r0, r2
    1f36:	4388      	bics	r0, r1
    1f38:	0001      	movs	r1, r0
    1f3a:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
    1f3c:	b248      	sxtb	r0, r1
    1f3e:	2800      	cmp	r0, #0
    1f40:	db20      	blt.n	1f84 <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    1f42:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    1f44:	68a3      	ldr	r3, [r4, #8]
    1f46:	2b00      	cmp	r3, #0
    1f48:	d002      	beq.n	1f50 <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
    1f4a:	0020      	movs	r0, r4
    1f4c:	f000 fc6a 	bl	2824 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    1f50:	0020      	movs	r0, r4
    1f52:	3018      	adds	r0, #24
    1f54:	f000 fcae 	bl	28b4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    1f58:	0023      	movs	r3, r4
	return list->head == list;
    1f5a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    1f5c:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1f5e:	429d      	cmp	r5, r3
    1f60:	d001      	beq.n	1f66 <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    1f62:	2d00      	cmp	r5, #0
    1f64:	d116      	bne.n	1f94 <z_thread_abort+0x98>
		update_cache(1);
    1f66:	2001      	movs	r0, #1
    1f68:	f7ff fd8e 	bl	1a88 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    1f6c:	4b10      	ldr	r3, [pc, #64]	; (1fb0 <z_thread_abort+0xb4>)
    1f6e:	689b      	ldr	r3, [r3, #8]
    1f70:	42a3      	cmp	r3, r4
    1f72:	d1d8      	bne.n	1f26 <z_thread_abort+0x2a>
    1f74:	f3ef 8305 	mrs	r3, IPSR
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d1d4      	bne.n	1f26 <z_thread_abort+0x2a>
    1f7c:	0030      	movs	r0, r6
    1f7e:	f7fe fe9d 	bl	cbc <arch_swap>
	return ret;
    1f82:	e7d0      	b.n	1f26 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    1f84:	215f      	movs	r1, #95	; 0x5f
    1f86:	400a      	ands	r2, r1
    1f88:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
    1f8a:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    1f8c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    1f8e:	f000 fc41 	bl	2814 <sys_dlist_remove>
}
    1f92:	e7d7      	b.n	1f44 <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
    1f94:	0028      	movs	r0, r5
    1f96:	f000 fc45 	bl	2824 <unpend_thread_no_timeout>
    1f9a:	0028      	movs	r0, r5
    1f9c:	3018      	adds	r0, #24
    1f9e:	f000 fc89 	bl	28b4 <z_abort_timeout>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    1fa2:	2300      	movs	r3, #0
		ready_thread(thread);
    1fa4:	0028      	movs	r0, r5
    1fa6:	66eb      	str	r3, [r5, #108]	; 0x6c
    1fa8:	f7ff fdcc 	bl	1b44 <ready_thread>
    1fac:	e7d4      	b.n	1f58 <z_thread_abort+0x5c>
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	20000190 	.word	0x20000190

00001fb4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    1fb4:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    1fb6:	4806      	ldr	r0, [pc, #24]	; (1fd0 <z_data_copy+0x1c>)
    1fb8:	4a06      	ldr	r2, [pc, #24]	; (1fd4 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    1fba:	4907      	ldr	r1, [pc, #28]	; (1fd8 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
    1fbc:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    1fbe:	f000 fc1e 	bl	27fe <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    1fc2:	4a06      	ldr	r2, [pc, #24]	; (1fdc <z_data_copy+0x28>)
    1fc4:	4906      	ldr	r1, [pc, #24]	; (1fe0 <z_data_copy+0x2c>)
    1fc6:	4807      	ldr	r0, [pc, #28]	; (1fe4 <z_data_copy+0x30>)
    1fc8:	f000 fc19 	bl	27fe <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    1fcc:	bd10      	pop	{r4, pc}
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	20000000 	.word	0x20000000
    1fd4:	2000001c 	.word	0x2000001c
    1fd8:	00002d74 	.word	0x00002d74
    1fdc:	00000000 	.word	0x00000000
    1fe0:	00002d74 	.word	0x00002d74
    1fe4:	20000000 	.word	0x20000000

00001fe8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    1fe8:	2000      	movs	r0, #0
{
    1fea:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    1fec:	4b03      	ldr	r3, [pc, #12]	; (1ffc <elapsed+0x14>)
    1fee:	681b      	ldr	r3, [r3, #0]
    1ff0:	4283      	cmp	r3, r0
    1ff2:	d101      	bne.n	1ff8 <elapsed+0x10>
    1ff4:	f7ff fba6 	bl	1744 <sys_clock_elapsed>
}
    1ff8:	bd10      	pop	{r4, pc}
    1ffa:	46c0      	nop			; (mov r8, r8)
    1ffc:	200001c0 	.word	0x200001c0

00002000 <next_timeout>:

static int32_t next_timeout(void)
{
    2000:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
    2002:	4b12      	ldr	r3, [pc, #72]	; (204c <next_timeout+0x4c>)
    2004:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2006:	429e      	cmp	r6, r3
    2008:	d10a      	bne.n	2020 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    200a:	f7ff ffed 	bl	1fe8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    200e:	4810      	ldr	r0, [pc, #64]	; (2050 <next_timeout+0x50>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2010:	4b10      	ldr	r3, [pc, #64]	; (2054 <next_timeout+0x54>)
    2012:	691b      	ldr	r3, [r3, #16]
    2014:	2b00      	cmp	r3, #0
    2016:	d002      	beq.n	201e <next_timeout+0x1e>
    2018:	4298      	cmp	r0, r3
    201a:	dd00      	ble.n	201e <next_timeout+0x1e>
    201c:	0018      	movs	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    201e:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
    2020:	f7ff ffe2 	bl	1fe8 <elapsed>
	if ((to == NULL) ||
    2024:	2e00      	cmp	r6, #0
    2026:	d0f2      	beq.n	200e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    2028:	6932      	ldr	r2, [r6, #16]
    202a:	6973      	ldr	r3, [r6, #20]
    202c:	0004      	movs	r4, r0
    202e:	17c5      	asrs	r5, r0, #31
    2030:	1b12      	subs	r2, r2, r4
    2032:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
    2034:	2b00      	cmp	r3, #0
    2036:	dcea      	bgt.n	200e <next_timeout+0xe>
    2038:	d103      	bne.n	2042 <next_timeout+0x42>
    203a:	2180      	movs	r1, #128	; 0x80
    203c:	0609      	lsls	r1, r1, #24
    203e:	428a      	cmp	r2, r1
    2040:	d2e5      	bcs.n	200e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    2042:	43d8      	mvns	r0, r3
    2044:	17c0      	asrs	r0, r0, #31
    2046:	4010      	ands	r0, r2
    2048:	e7e2      	b.n	2010 <next_timeout+0x10>
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	20000008 	.word	0x20000008
    2050:	7fffffff 	.word	0x7fffffff
    2054:	20000190 	.word	0x20000190

00002058 <remove_timeout>:
{
    2058:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    205a:	2800      	cmp	r0, #0
    205c:	d00e      	beq.n	207c <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
    205e:	4b0b      	ldr	r3, [pc, #44]	; (208c <remove_timeout+0x34>)
    2060:	685b      	ldr	r3, [r3, #4]
    2062:	4298      	cmp	r0, r3
    2064:	d00a      	beq.n	207c <remove_timeout+0x24>
    2066:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
    2068:	2900      	cmp	r1, #0
    206a:	d007      	beq.n	207c <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
    206c:	690a      	ldr	r2, [r1, #16]
    206e:	694b      	ldr	r3, [r1, #20]
    2070:	6904      	ldr	r4, [r0, #16]
    2072:	6945      	ldr	r5, [r0, #20]
    2074:	1912      	adds	r2, r2, r4
    2076:	416b      	adcs	r3, r5
    2078:	610a      	str	r2, [r1, #16]
    207a:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    207c:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
    207e:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
    2080:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    2082:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2084:	2300      	movs	r3, #0
    2086:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    2088:	6043      	str	r3, [r0, #4]
}
    208a:	bd30      	pop	{r4, r5, pc}
    208c:	20000008 	.word	0x20000008

00002090 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    2090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2092:	0004      	movs	r4, r0
    2094:	0016      	movs	r6, r2
    2096:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2098:	1c53      	adds	r3, r2, #1
    209a:	d101      	bne.n	20a0 <z_add_timeout+0x10>
    209c:	1c7b      	adds	r3, r7, #1
    209e:	d05d      	beq.n	215c <z_add_timeout+0xcc>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    20a0:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
    20a2:	f3ef 8310 	mrs	r3, PRIMASK
    20a6:	b672      	cpsid	i
    20a8:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    20aa:	2f00      	cmp	r7, #0
    20ac:	da23      	bge.n	20f6 <z_add_timeout+0x66>
    20ae:	1c7b      	adds	r3, r7, #1
    20b0:	d101      	bne.n	20b6 <z_add_timeout+0x26>
    20b2:	1cb3      	adds	r3, r6, #2
    20b4:	d81f      	bhi.n	20f6 <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    20b6:	4b2e      	ldr	r3, [pc, #184]	; (2170 <z_add_timeout+0xe0>)
    20b8:	6818      	ldr	r0, [r3, #0]
    20ba:	6859      	ldr	r1, [r3, #4]
    20bc:	2202      	movs	r2, #2
    20be:	4252      	negs	r2, r2
    20c0:	17d3      	asrs	r3, r2, #31
    20c2:	1a12      	subs	r2, r2, r0
    20c4:	418b      	sbcs	r3, r1
    20c6:	1b92      	subs	r2, r2, r6
    20c8:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
    20ca:	2b00      	cmp	r3, #0
    20cc:	dc04      	bgt.n	20d8 <z_add_timeout+0x48>
    20ce:	d101      	bne.n	20d4 <z_add_timeout+0x44>
    20d0:	2a00      	cmp	r2, #0
    20d2:	d101      	bne.n	20d8 <z_add_timeout+0x48>
    20d4:	2201      	movs	r2, #1
    20d6:	2300      	movs	r3, #0
	return list->head == list;
    20d8:	4f26      	ldr	r7, [pc, #152]	; (2174 <z_add_timeout+0xe4>)
    20da:	6122      	str	r2, [r4, #16]
    20dc:	6163      	str	r3, [r4, #20]
    20de:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    20e0:	42bd      	cmp	r5, r7
    20e2:	d100      	bne.n	20e6 <z_add_timeout+0x56>
    20e4:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
    20e6:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    20e8:	2d00      	cmp	r5, #0
    20ea:	d10f      	bne.n	210c <z_add_timeout+0x7c>
	node->next = list;
    20ec:	6027      	str	r7, [r4, #0]
	node->prev = tail;
    20ee:	6066      	str	r6, [r4, #4]
	tail->next = node;
    20f0:	6034      	str	r4, [r6, #0]
	list->tail = node;
    20f2:	607c      	str	r4, [r7, #4]
}
    20f4:	e01c      	b.n	2130 <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
    20f6:	f7ff ff77 	bl	1fe8 <elapsed>
    20fa:	2201      	movs	r2, #1
    20fc:	2300      	movs	r3, #0
    20fe:	1992      	adds	r2, r2, r6
    2100:	417b      	adcs	r3, r7
    2102:	0006      	movs	r6, r0
    2104:	17c7      	asrs	r7, r0, #31
    2106:	1992      	adds	r2, r2, r6
    2108:	417b      	adcs	r3, r7
    210a:	e7e5      	b.n	20d8 <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
    210c:	6928      	ldr	r0, [r5, #16]
    210e:	6969      	ldr	r1, [r5, #20]
    2110:	6922      	ldr	r2, [r4, #16]
    2112:	6963      	ldr	r3, [r4, #20]
    2114:	4299      	cmp	r1, r3
    2116:	dc02      	bgt.n	211e <z_add_timeout+0x8e>
    2118:	d121      	bne.n	215e <z_add_timeout+0xce>
    211a:	4290      	cmp	r0, r2
    211c:	d91f      	bls.n	215e <z_add_timeout+0xce>
				t->dticks -= to->dticks;
    211e:	1a80      	subs	r0, r0, r2
    2120:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
    2122:	686b      	ldr	r3, [r5, #4]
    2124:	6128      	str	r0, [r5, #16]
    2126:	6169      	str	r1, [r5, #20]
	node->prev = prev;
    2128:	6063      	str	r3, [r4, #4]
	node->next = successor;
    212a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    212c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    212e:	606c      	str	r4, [r5, #4]
	return list->head == list;
    2130:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2132:	42bb      	cmp	r3, r7
    2134:	d00c      	beq.n	2150 <z_add_timeout+0xc0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2136:	429c      	cmp	r4, r3
    2138:	d10a      	bne.n	2150 <z_add_timeout+0xc0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    213a:	f7ff ff61 	bl	2000 <next_timeout>

			if (next_time == 0 ||
    213e:	2800      	cmp	r0, #0
    2140:	d003      	beq.n	214a <z_add_timeout+0xba>
			    _current_cpu->slice_ticks != next_time) {
    2142:	4b0d      	ldr	r3, [pc, #52]	; (2178 <z_add_timeout+0xe8>)
			if (next_time == 0 ||
    2144:	691b      	ldr	r3, [r3, #16]
    2146:	4283      	cmp	r3, r0
    2148:	d002      	beq.n	2150 <z_add_timeout+0xc0>
				sys_clock_set_timeout(next_time, false);
    214a:	2100      	movs	r1, #0
    214c:	f7ff fa82 	bl	1654 <sys_clock_set_timeout>
	if (key != 0U) {
    2150:	9b01      	ldr	r3, [sp, #4]
    2152:	2b00      	cmp	r3, #0
    2154:	d102      	bne.n	215c <z_add_timeout+0xcc>
	__asm__ volatile(
    2156:	b662      	cpsie	i
    2158:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    215c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    215e:	1a12      	subs	r2, r2, r0
    2160:	418b      	sbcs	r3, r1
    2162:	6122      	str	r2, [r4, #16]
    2164:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
    2166:	42b5      	cmp	r5, r6
    2168:	d0c0      	beq.n	20ec <z_add_timeout+0x5c>
    216a:	682d      	ldr	r5, [r5, #0]
    216c:	e7bc      	b.n	20e8 <z_add_timeout+0x58>
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	20000100 	.word	0x20000100
    2174:	20000008 	.word	0x20000008
    2178:	20000190 	.word	0x20000190

0000217c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    217c:	b5f0      	push	{r4, r5, r6, r7, lr}
    217e:	b085      	sub	sp, #20
    2180:	0004      	movs	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2182:	f7ff fd4d 	bl	1c20 <z_time_slice>
	__asm__ volatile("mrs %0, PRIMASK;"
    2186:	f3ef 8310 	mrs	r3, PRIMASK
    218a:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    218c:	9302      	str	r3, [sp, #8]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    218e:	4b30      	ldr	r3, [pc, #192]	; (2250 <sys_clock_announce+0xd4>)
    2190:	601c      	str	r4, [r3, #0]
	return list->head == list;
    2192:	4b30      	ldr	r3, [pc, #192]	; (2254 <sys_clock_announce+0xd8>)
    2194:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2196:	429c      	cmp	r4, r3
    2198:	d100      	bne.n	219c <sys_clock_announce+0x20>
    219a:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    219c:	4b2e      	ldr	r3, [pc, #184]	; (2258 <sys_clock_announce+0xdc>)
	     (t != NULL) && (t->dticks <= announce_remaining);
    219e:	4d2c      	ldr	r5, [pc, #176]	; (2250 <sys_clock_announce+0xd4>)
		curr_tick += dt;
    21a0:	9303      	str	r3, [sp, #12]
    21a2:	6818      	ldr	r0, [r3, #0]
    21a4:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
    21a6:	682b      	ldr	r3, [r5, #0]
    21a8:	469c      	mov	ip, r3
    21aa:	2c00      	cmp	r4, #0
    21ac:	d039      	beq.n	2222 <sys_clock_announce+0xa6>
    21ae:	6962      	ldr	r2, [r4, #20]
    21b0:	6926      	ldr	r6, [r4, #16]
    21b2:	17db      	asrs	r3, r3, #31
    21b4:	429a      	cmp	r2, r3
    21b6:	dc02      	bgt.n	21be <sys_clock_announce+0x42>
    21b8:	d10a      	bne.n	21d0 <sys_clock_announce+0x54>
    21ba:	4566      	cmp	r6, ip
    21bc:	d908      	bls.n	21d0 <sys_clock_announce+0x54>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    21be:	001f      	movs	r7, r3
    21c0:	6922      	ldr	r2, [r4, #16]
    21c2:	6963      	ldr	r3, [r4, #20]
    21c4:	4666      	mov	r6, ip
    21c6:	1b92      	subs	r2, r2, r6
    21c8:	41bb      	sbcs	r3, r7
    21ca:	6122      	str	r2, [r4, #16]
    21cc:	6163      	str	r3, [r4, #20]
    21ce:	e028      	b.n	2222 <sys_clock_announce+0xa6>
		curr_tick += dt;
    21d0:	17f3      	asrs	r3, r6, #31
    21d2:	9600      	str	r6, [sp, #0]
    21d4:	9301      	str	r3, [sp, #4]
    21d6:	9a00      	ldr	r2, [sp, #0]
    21d8:	9b01      	ldr	r3, [sp, #4]
    21da:	1880      	adds	r0, r0, r2
    21dc:	4159      	adcs	r1, r3
		t->dticks = 0;
    21de:	2300      	movs	r3, #0
    21e0:	2200      	movs	r2, #0
		curr_tick += dt;
    21e2:	4f1d      	ldr	r7, [pc, #116]	; (2258 <sys_clock_announce+0xdc>)
		t->dticks = 0;
    21e4:	6122      	str	r2, [r4, #16]
    21e6:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
    21e8:	6038      	str	r0, [r7, #0]
    21ea:	6079      	str	r1, [r7, #4]
		remove_timeout(t);
    21ec:	0020      	movs	r0, r4
    21ee:	f7ff ff33 	bl	2058 <remove_timeout>
	if (key != 0U) {
    21f2:	9b02      	ldr	r3, [sp, #8]
    21f4:	2b00      	cmp	r3, #0
    21f6:	d102      	bne.n	21fe <sys_clock_announce+0x82>
	__asm__ volatile(
    21f8:	b662      	cpsie	i
    21fa:	f3bf 8f6f 	isb	sy
		t->fn(t);
    21fe:	0020      	movs	r0, r4
    2200:	68a3      	ldr	r3, [r4, #8]
    2202:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
    2204:	f3ef 8310 	mrs	r3, PRIMASK
    2208:	b672      	cpsid	i
    220a:	9302      	str	r3, [sp, #8]
		announce_remaining -= dt;
    220c:	4b10      	ldr	r3, [pc, #64]	; (2250 <sys_clock_announce+0xd4>)
    220e:	681a      	ldr	r2, [r3, #0]
    2210:	1b92      	subs	r2, r2, r6
    2212:	601a      	str	r2, [r3, #0]
	return list->head == list;
    2214:	4b0f      	ldr	r3, [pc, #60]	; (2254 <sys_clock_announce+0xd8>)
    2216:	4694      	mov	ip, r2
    2218:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    221a:	429c      	cmp	r4, r3
    221c:	d1be      	bne.n	219c <sys_clock_announce+0x20>
		curr_tick += dt;
    221e:	6838      	ldr	r0, [r7, #0]
    2220:	6879      	ldr	r1, [r7, #4]
	}

	curr_tick += announce_remaining;
    2222:	4662      	mov	r2, ip
    2224:	17d3      	asrs	r3, r2, #31
    2226:	1812      	adds	r2, r2, r0
    2228:	414b      	adcs	r3, r1
	announce_remaining = 0;
    222a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    222c:	9903      	ldr	r1, [sp, #12]
	announce_remaining = 0;
    222e:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
    2230:	600a      	str	r2, [r1, #0]
    2232:	604b      	str	r3, [r1, #4]

	sys_clock_set_timeout(next_timeout(), false);
    2234:	f7ff fee4 	bl	2000 <next_timeout>
    2238:	0021      	movs	r1, r4
    223a:	f7ff fa0b 	bl	1654 <sys_clock_set_timeout>
	if (key != 0U) {
    223e:	9b02      	ldr	r3, [sp, #8]
    2240:	42a3      	cmp	r3, r4
    2242:	d102      	bne.n	224a <sys_clock_announce+0xce>
	__asm__ volatile(
    2244:	b662      	cpsie	i
    2246:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    224a:	b005      	add	sp, #20
    224c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	200001c0 	.word	0x200001c0
    2254:	20000008 	.word	0x20000008
    2258:	20000100 	.word	0x20000100

0000225c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    225c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    225e:	f3ef 8410 	mrs	r4, PRIMASK
    2262:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    2264:	f7ff fec0 	bl	1fe8 <elapsed>
    2268:	0002      	movs	r2, r0
    226a:	4906      	ldr	r1, [pc, #24]	; (2284 <sys_clock_tick_get+0x28>)
    226c:	17c3      	asrs	r3, r0, #31
    226e:	6808      	ldr	r0, [r1, #0]
    2270:	6849      	ldr	r1, [r1, #4]
    2272:	1880      	adds	r0, r0, r2
    2274:	4159      	adcs	r1, r3
	if (key != 0U) {
    2276:	2c00      	cmp	r4, #0
    2278:	d102      	bne.n	2280 <sys_clock_tick_get+0x24>
	__asm__ volatile(
    227a:	b662      	cpsie	i
    227c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    2280:	bd10      	pop	{r4, pc}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	20000100 	.word	0x20000100

00002288 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    2288:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    228a:	4802      	ldr	r0, [pc, #8]	; (2294 <boot_banner+0xc>)
    228c:	f000 f807 	bl	229e <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    2290:	bd10      	pop	{r4, pc}
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	00002d2f 	.word	0x00002d2f

00002298 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    2298:	4770      	bx	lr

0000229a <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    229a:	2000      	movs	r0, #0
    229c:	4770      	bx	lr

0000229e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    229e:	b40f      	push	{r0, r1, r2, r3}
    22a0:	b507      	push	{r0, r1, r2, lr}
    22a2:	a904      	add	r1, sp, #16
    22a4:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
    22a6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    22a8:	f7fe f870 	bl	38c <vprintk>

	va_end(ap);
}
    22ac:	b003      	add	sp, #12
    22ae:	bc08      	pop	{r3}
    22b0:	b004      	add	sp, #16
    22b2:	4718      	bx	r3

000022b4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    22b4:	b510      	push	{r4, lr}
    22b6:	0004      	movs	r4, r0
    22b8:	0008      	movs	r0, r1
    22ba:	0011      	movs	r1, r2
    22bc:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    22be:	47a0      	blx	r4
	return z_impl_z_current_get();
    22c0:	f7ff fe16 	bl	1ef0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    22c4:	f7fe fe12 	bl	eec <z_impl_k_thread_abort>

000022c8 <encode_uint>:
{
    22c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ca:	b085      	sub	sp, #20
    22cc:	9001      	str	r0, [sp, #4]
    22ce:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
    22d0:	78d3      	ldrb	r3, [r2, #3]
{
    22d2:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    22d4:	001a      	movs	r2, r3
    22d6:	3a41      	subs	r2, #65	; 0x41
    22d8:	000f      	movs	r7, r1
	switch (specifier) {
    22da:	2408      	movs	r4, #8
    22dc:	9202      	str	r2, [sp, #8]
    22de:	2b6f      	cmp	r3, #111	; 0x6f
    22e0:	d00a      	beq.n	22f8 <encode_uint+0x30>
    22e2:	d804      	bhi.n	22ee <encode_uint+0x26>
		return 16;
    22e4:	1924      	adds	r4, r4, r4
	switch (specifier) {
    22e6:	2b58      	cmp	r3, #88	; 0x58
    22e8:	d006      	beq.n	22f8 <encode_uint+0x30>
		return 10;
    22ea:	3c06      	subs	r4, #6
    22ec:	e004      	b.n	22f8 <encode_uint+0x30>
	switch (specifier) {
    22ee:	2208      	movs	r2, #8
		return 16;
    22f0:	2410      	movs	r4, #16
	switch (specifier) {
    22f2:	4393      	bics	r3, r2
    22f4:	2b70      	cmp	r3, #112	; 0x70
    22f6:	d1f8      	bne.n	22ea <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
    22f8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    22fa:	0022      	movs	r2, r4
    22fc:	2300      	movs	r3, #0
    22fe:	0039      	movs	r1, r7
    2300:	9801      	ldr	r0, [sp, #4]
    2302:	f7fd ff4f 	bl	1a4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2306:	0013      	movs	r3, r2
    2308:	468c      	mov	ip, r1
    230a:	b2d2      	uxtb	r2, r2
    230c:	2b09      	cmp	r3, #9
    230e:	d81a      	bhi.n	2346 <encode_uint+0x7e>
    2310:	3230      	adds	r2, #48	; 0x30
    2312:	b2d3      	uxtb	r3, r2
    2314:	3e01      	subs	r6, #1
    2316:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
    2318:	2300      	movs	r3, #0
    231a:	42bb      	cmp	r3, r7
    231c:	d102      	bne.n	2324 <encode_uint+0x5c>
    231e:	9b01      	ldr	r3, [sp, #4]
    2320:	429c      	cmp	r4, r3
    2322:	d802      	bhi.n	232a <encode_uint+0x62>
    2324:	9b03      	ldr	r3, [sp, #12]
    2326:	429e      	cmp	r6, r3
    2328:	d80a      	bhi.n	2340 <encode_uint+0x78>
	if (conv->flag_hash) {
    232a:	782b      	ldrb	r3, [r5, #0]
    232c:	069b      	lsls	r3, r3, #26
    232e:	d504      	bpl.n	233a <encode_uint+0x72>
		if (radix == 8) {
    2330:	2c08      	cmp	r4, #8
    2332:	d110      	bne.n	2356 <encode_uint+0x8e>
			conv->altform_0 = true;
    2334:	78ab      	ldrb	r3, [r5, #2]
    2336:	4323      	orrs	r3, r4
    2338:	70ab      	strb	r3, [r5, #2]
}
    233a:	0030      	movs	r0, r6
    233c:	b005      	add	sp, #20
    233e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
    2340:	4667      	mov	r7, ip
    2342:	9001      	str	r0, [sp, #4]
    2344:	e7d9      	b.n	22fa <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2346:	0013      	movs	r3, r2
    2348:	9902      	ldr	r1, [sp, #8]
    234a:	3357      	adds	r3, #87	; 0x57
    234c:	b2db      	uxtb	r3, r3
    234e:	2919      	cmp	r1, #25
    2350:	d8e0      	bhi.n	2314 <encode_uint+0x4c>
    2352:	3237      	adds	r2, #55	; 0x37
    2354:	e7dd      	b.n	2312 <encode_uint+0x4a>
		} else if (radix == 16) {
    2356:	2c10      	cmp	r4, #16
    2358:	d1ef      	bne.n	233a <encode_uint+0x72>
			conv->altform_0c = true;
    235a:	78ab      	ldrb	r3, [r5, #2]
    235c:	431c      	orrs	r4, r3
    235e:	70ac      	strb	r4, [r5, #2]
	return bp;
    2360:	e7eb      	b.n	233a <encode_uint+0x72>

00002362 <outs>:
{
    2362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2364:	0007      	movs	r7, r0
    2366:	0015      	movs	r5, r2
    2368:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    236a:	0014      	movs	r4, r2
{
    236c:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    236e:	42a6      	cmp	r6, r4
    2370:	d806      	bhi.n	2380 <outs+0x1e>
    2372:	2e00      	cmp	r6, #0
    2374:	d001      	beq.n	237a <outs+0x18>
	return (int)count;
    2376:	1b60      	subs	r0, r4, r5
    2378:	e008      	b.n	238c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    237a:	7823      	ldrb	r3, [r4, #0]
    237c:	2b00      	cmp	r3, #0
    237e:	d0fa      	beq.n	2376 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    2380:	7820      	ldrb	r0, [r4, #0]
    2382:	9901      	ldr	r1, [sp, #4]
    2384:	47b8      	blx	r7
		if (rc < 0) {
    2386:	3401      	adds	r4, #1
    2388:	2800      	cmp	r0, #0
    238a:	daf0      	bge.n	236e <outs+0xc>
}
    238c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000238e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    238e:	4770      	bx	lr

00002390 <soc_port_pinmux_set>:
#include <stdbool.h>

#include "soc_port.h"

int soc_port_pinmux_set(PortGroup *pg, uint32_t pin, uint32_t func)
{
    2390:	b570      	push	{r4, r5, r6, lr}
	/* Each pinmux register holds the config for two pins.  The
	 * even numbered pin goes in the bits 0..3 and the odd
	 * numbered pin in bits 4..7.
	 */
	if (is_odd) {
		pg->PMUX[idx].bit.PMUXO = func;
    2392:	250f      	movs	r5, #15
	int idx = pin / 2U;
    2394:	084b      	lsrs	r3, r1, #1
	if (is_odd) {
    2396:	18c3      	adds	r3, r0, r3
		pg->PMUX[idx].bit.PMUXO = func;
    2398:	402a      	ands	r2, r5
    239a:	3330      	adds	r3, #48	; 0x30
	if (is_odd) {
    239c:	07cc      	lsls	r4, r1, #31
    239e:	d50d      	bpl.n	23bc <soc_port_pinmux_set+0x2c>
		pg->PMUX[idx].bit.PMUXO = func;
    23a0:	781c      	ldrb	r4, [r3, #0]
    23a2:	0116      	lsls	r6, r2, #4
    23a4:	0022      	movs	r2, r4
    23a6:	402a      	ands	r2, r5
    23a8:	4332      	orrs	r2, r6
	} else {
		pg->PMUX[idx].bit.PMUXE = func;
    23aa:	701a      	strb	r2, [r3, #0]
	}
	pg->PINCFG[pin].bit.PMUXEN = 1;
    23ac:	2301      	movs	r3, #1
    23ae:	1840      	adds	r0, r0, r1
    23b0:	3040      	adds	r0, #64	; 0x40
    23b2:	7802      	ldrb	r2, [r0, #0]
    23b4:	4313      	orrs	r3, r2
    23b6:	7003      	strb	r3, [r0, #0]

	return 0;
}
    23b8:	2000      	movs	r0, #0
    23ba:	bd70      	pop	{r4, r5, r6, pc}
		pg->PMUX[idx].bit.PMUXE = func;
    23bc:	781c      	ldrb	r4, [r3, #0]
    23be:	43ac      	bics	r4, r5
    23c0:	4322      	orrs	r2, r4
    23c2:	e7f2      	b.n	23aa <soc_port_pinmux_set+0x1a>

000023c4 <soc_port_configure>:

void soc_port_configure(const struct soc_port_pin *pin)
{
    23c4:	0003      	movs	r3, r0
	PortGroup *pg = pin->regs;
	uint32_t flags = pin->flags;
	uint32_t func = (pin->flags & SOC_PORT_FUNC_MASK) >> SOC_PORT_FUNC_POS;
	PORT_PINCFG_Type pincfg = { .reg = 0 };
    23c6:	2100      	movs	r1, #0
{
    23c8:	b570      	push	{r4, r5, r6, lr}
	PortGroup *pg = pin->regs;
    23ca:	6800      	ldr	r0, [r0, #0]

	/* Reset or analog I/O: all digital disabled */
	pg->PINCFG[pin->pinum] = pincfg;
    23cc:	685c      	ldr	r4, [r3, #4]
	uint32_t flags = pin->flags;
    23ce:	689a      	ldr	r2, [r3, #8]
	pg->PINCFG[pin->pinum] = pincfg;
    23d0:	1904      	adds	r4, r0, r4
    23d2:	3440      	adds	r4, #64	; 0x40
    23d4:	7021      	strb	r1, [r4, #0]
	PORT_PINCFG_Type pincfg = { .reg = 0 };
    23d6:	1c0d      	adds	r5, r1, #0
	pg->DIRCLR.reg = (1 << pin->pinum);
    23d8:	3101      	adds	r1, #1
    23da:	000e      	movs	r6, r1
    23dc:	685c      	ldr	r4, [r3, #4]
    23de:	40a6      	lsls	r6, r4
    23e0:	6046      	str	r6, [r0, #4]
	pg->OUTCLR.reg = (1 << pin->pinum);
    23e2:	000e      	movs	r6, r1
    23e4:	685c      	ldr	r4, [r3, #4]
    23e6:	40a6      	lsls	r6, r4
    23e8:	6146      	str	r6, [r0, #20]

	if (flags & SOC_PORT_PMUXEN_ENABLE) {
    23ea:	0654      	lsls	r4, r2, #25
    23ec:	d505      	bpl.n	23fa <soc_port_configure+0x36>
	uint32_t func = (pin->flags & SOC_PORT_FUNC_MASK) >> SOC_PORT_FUNC_POS;
    23ee:	0312      	lsls	r2, r2, #12
		soc_port_pinmux_set(pg, pin->pinum, func);
    23f0:	6859      	ldr	r1, [r3, #4]
	uint32_t func = (pin->flags & SOC_PORT_FUNC_MASK) >> SOC_PORT_FUNC_POS;
    23f2:	0f12      	lsrs	r2, r2, #28
		soc_port_pinmux_set(pg, pin->pinum, func);
    23f4:	f7ff ffcc 	bl	2390 <soc_port_pinmux_set>
	if (flags & SOC_PORT_STRENGTH_STRONGER) {
		pincfg.bit.DRVSTR = 1;
	}

	pg->PINCFG[pin->pinum] = pincfg;
}
    23f8:	bd70      	pop	{r4, r5, r6, pc}
	if (flags & (SOC_PORT_PULLUP | SOC_PORT_PULLDOWN)) {
    23fa:	0794      	lsls	r4, r2, #30
    23fc:	d005      	beq.n	240a <soc_port_configure+0x46>
		if (flags & SOC_PORT_PULLUP) {
    23fe:	420a      	tst	r2, r1
    2400:	d002      	beq.n	2408 <soc_port_configure+0x44>
			pg->OUTSET.reg = (1 << pin->pinum);
    2402:	685c      	ldr	r4, [r3, #4]
    2404:	40a1      	lsls	r1, r4
    2406:	6181      	str	r1, [r0, #24]
		pincfg.bit.PULLEN = 1;
    2408:	2504      	movs	r5, #4
	if (flags & SOC_PORT_INPUT_ENABLE) {
    240a:	2401      	movs	r4, #1
    240c:	08d1      	lsrs	r1, r2, #3
    240e:	4021      	ands	r1, r4
    2410:	40a1      	lsls	r1, r4
    2412:	4329      	orrs	r1, r5
	if (flags & SOC_PORT_OUTPUT_ENABLE) {
    2414:	06d5      	lsls	r5, r2, #27
    2416:	d502      	bpl.n	241e <soc_port_configure+0x5a>
		pg->DIRSET.reg = (1 << pin->pinum);
    2418:	685d      	ldr	r5, [r3, #4]
    241a:	40ac      	lsls	r4, r5
    241c:	6084      	str	r4, [r0, #8]
	pg->PINCFG[pin->pinum] = pincfg;
    241e:	685b      	ldr	r3, [r3, #4]
	if (flags & SOC_PORT_STRENGTH_STRONGER) {
    2420:	0692      	lsls	r2, r2, #26
    2422:	0fd2      	lsrs	r2, r2, #31
    2424:	0192      	lsls	r2, r2, #6
	pg->PINCFG[pin->pinum] = pincfg;
    2426:	18c0      	adds	r0, r0, r3
    2428:	4311      	orrs	r1, r2
    242a:	3040      	adds	r0, #64	; 0x40
    242c:	7001      	strb	r1, [r0, #0]
    242e:	e7e3      	b.n	23f8 <soc_port_configure+0x34>

00002430 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2430:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2432:	f000 f9ca 	bl	27ca <z_fatal_error>
}
    2436:	bd10      	pop	{r4, pc}

00002438 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    2438:	b510      	push	{r4, lr}
    243a:	0001      	movs	r1, r0
	z_fatal_error(reason, esf);
    243c:	6800      	ldr	r0, [r0, #0]
    243e:	f000 f9c4 	bl	27ca <z_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    2442:	bd10      	pop	{r4, pc}

00002444 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    2444:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    2446:	2100      	movs	r1, #0
    2448:	2001      	movs	r0, #1
    244a:	f7ff fff1 	bl	2430 <z_arm_fatal_error>
}
    244e:	bd10      	pop	{r4, pc}

00002450 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    2450:	b510      	push	{r4, lr}
	handler();
    2452:	f7fe fc1b 	bl	c8c <z_SysNmiOnReset>
	z_arm_int_exit();
    2456:	f7fe fcc5 	bl	de4 <z_arm_exc_exit>
}
    245a:	bd10      	pop	{r4, pc}

0000245c <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    245c:	4770      	bx	lr

0000245e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    245e:	0003      	movs	r3, r0
	size_t n = 0;
    2460:	2000      	movs	r0, #0

	while (*s != '\0') {
    2462:	5c1a      	ldrb	r2, [r3, r0]
    2464:	2a00      	cmp	r2, #0
    2466:	d100      	bne.n	246a <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
    2468:	4770      	bx	lr
		n++;
    246a:	3001      	adds	r0, #1
    246c:	e7f9      	b.n	2462 <strlen+0x4>

0000246e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    246e:	0003      	movs	r3, r0
	size_t n = 0;
    2470:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    2472:	5c1a      	ldrb	r2, [r3, r0]
    2474:	2a00      	cmp	r2, #0
    2476:	d001      	beq.n	247c <strnlen+0xe>
    2478:	4288      	cmp	r0, r1
    247a:	d100      	bne.n	247e <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
    247c:	4770      	bx	lr
		n++;
    247e:	3001      	adds	r0, #1
    2480:	e7f7      	b.n	2472 <strnlen+0x4>

00002482 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    2482:	2300      	movs	r3, #0
{
    2484:	b510      	push	{r4, lr}
	while (n > 0) {
    2486:	429a      	cmp	r2, r3
    2488:	d100      	bne.n	248c <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    248a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    248c:	5ccc      	ldrb	r4, [r1, r3]
    248e:	54c4      	strb	r4, [r0, r3]
		n--;
    2490:	3301      	adds	r3, #1
    2492:	e7f8      	b.n	2486 <memcpy+0x4>

00002494 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    2494:	0003      	movs	r3, r0
    2496:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    2498:	1882      	adds	r2, r0, r2
    249a:	4293      	cmp	r3, r2
    249c:	d100      	bne.n	24a0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    249e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    24a0:	7019      	strb	r1, [r3, #0]
		n--;
    24a2:	3301      	adds	r3, #1
    24a4:	e7f9      	b.n	249a <memset+0x6>

000024a6 <_stdout_hook_default>:
	return EOF;
    24a6:	2001      	movs	r0, #1
}
    24a8:	4240      	negs	r0, r0
    24aa:	4770      	bx	lr

000024ac <gpio_sam0_config>:
{
    24ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	PortGroup *regs = config->regs;
    24ae:	6843      	ldr	r3, [r0, #4]
	struct gpio_sam0_data *data = dev->data;
    24b0:	6906      	ldr	r6, [r0, #16]
	PortGroup *regs = config->regs;
    24b2:	685b      	ldr	r3, [r3, #4]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
    24b4:	0790      	lsls	r0, r2, #30
    24b6:	d502      	bpl.n	24be <gpio_sam0_config+0x12>
		return -ENOTSUP;
    24b8:	2086      	movs	r0, #134	; 0x86
    24ba:	4240      	negs	r0, r0
}
    24bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((flags & GPIO_INPUT) != 0) {
    24be:	2001      	movs	r0, #1
    24c0:	0c14      	lsrs	r4, r2, #16
    24c2:	4004      	ands	r4, r0
    24c4:	4084      	lsls	r4, r0
		if ((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) != 0) {
    24c6:	2730      	movs	r7, #48	; 0x30
	if ((flags & GPIO_INPUT) != 0) {
    24c8:	4684      	mov	ip, r0
    24ca:	1c25      	adds	r5, r4, #0
		if ((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) != 0) {
    24cc:	4017      	ands	r7, r2
	if ((flags & GPIO_OUTPUT) != 0) {
    24ce:	0390      	lsls	r0, r2, #14
    24d0:	d519      	bpl.n	2506 <gpio_sam0_config+0x5a>
		if ((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) != 0) {
    24d2:	2f00      	cmp	r7, #0
    24d4:	d1f0      	bne.n	24b8 <gpio_sam0_config+0xc>
			regs->OUTCLR.reg = BIT(pin);
    24d6:	4660      	mov	r0, ip
    24d8:	4088      	lsls	r0, r1
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    24da:	0354      	lsls	r4, r2, #13
    24dc:	d50f      	bpl.n	24fe <gpio_sam0_config+0x52>
			regs->OUTCLR.reg = BIT(pin);
    24de:	6158      	str	r0, [r3, #20]
		regs->DIRSET.reg = BIT(pin);
    24e0:	6098      	str	r0, [r3, #8]
	WRITE_BIT(data->debounce, pin,
    24e2:	2401      	movs	r4, #1
    24e4:	68b0      	ldr	r0, [r6, #8]
    24e6:	408c      	lsls	r4, r1
    24e8:	05d2      	lsls	r2, r2, #23
    24ea:	d519      	bpl.n	2520 <gpio_sam0_config+0x74>
    24ec:	07aa      	lsls	r2, r5, #30
    24ee:	d517      	bpl.n	2520 <gpio_sam0_config+0x74>
    24f0:	4320      	orrs	r0, r4
	regs->PINCFG[pin] = pincfg;
    24f2:	185b      	adds	r3, r3, r1
    24f4:	3340      	adds	r3, #64	; 0x40
	WRITE_BIT(data->debounce, pin,
    24f6:	60b0      	str	r0, [r6, #8]
	return 0;
    24f8:	2000      	movs	r0, #0
	regs->PINCFG[pin] = pincfg;
    24fa:	701d      	strb	r5, [r3, #0]
	return 0;
    24fc:	e7de      	b.n	24bc <gpio_sam0_config+0x10>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    24fe:	0314      	lsls	r4, r2, #12
    2500:	d5ee      	bpl.n	24e0 <gpio_sam0_config+0x34>
			regs->OUTSET.reg = BIT(pin);
    2502:	6198      	str	r0, [r3, #24]
    2504:	e7ec      	b.n	24e0 <gpio_sam0_config+0x34>
		regs->DIRCLR.reg = BIT(pin);
    2506:	4660      	mov	r0, ip
    2508:	4088      	lsls	r0, r1
    250a:	6058      	str	r0, [r3, #4]
		if ((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) != 0) {
    250c:	2f00      	cmp	r7, #0
    250e:	d0e8      	beq.n	24e2 <gpio_sam0_config+0x36>
			pincfg.bit.PULLEN = 1;
    2510:	2504      	movs	r5, #4
    2512:	4325      	orrs	r5, r4
			if ((flags & GPIO_PULL_UP) != 0) {
    2514:	06d4      	lsls	r4, r2, #27
    2516:	d501      	bpl.n	251c <gpio_sam0_config+0x70>
				regs->OUTSET.reg = BIT(pin);
    2518:	6198      	str	r0, [r3, #24]
    251a:	e7e2      	b.n	24e2 <gpio_sam0_config+0x36>
				regs->OUTCLR.reg = BIT(pin);
    251c:	6158      	str	r0, [r3, #20]
    251e:	e7e0      	b.n	24e2 <gpio_sam0_config+0x36>
	WRITE_BIT(data->debounce, pin,
    2520:	43a0      	bics	r0, r4
    2522:	e7e6      	b.n	24f2 <gpio_sam0_config+0x46>

00002524 <gpio_sam0_port_get_raw>:
	*value = config->regs->IN.reg;
    2524:	6843      	ldr	r3, [r0, #4]
}
    2526:	2000      	movs	r0, #0
	*value = config->regs->IN.reg;
    2528:	685b      	ldr	r3, [r3, #4]
    252a:	6a1b      	ldr	r3, [r3, #32]
    252c:	600b      	str	r3, [r1, #0]
}
    252e:	4770      	bx	lr

00002530 <gpio_sam0_port_set_masked_raw>:
	uint32_t out = config->regs->OUT.reg;
    2530:	6843      	ldr	r3, [r0, #4]
    2532:	685b      	ldr	r3, [r3, #4]
    2534:	6918      	ldr	r0, [r3, #16]
	config->regs->OUT.reg = (out & ~mask) | (value & mask);
    2536:	4042      	eors	r2, r0
    2538:	4011      	ands	r1, r2
    253a:	4041      	eors	r1, r0
    253c:	6119      	str	r1, [r3, #16]
}
    253e:	2000      	movs	r0, #0
    2540:	4770      	bx	lr

00002542 <gpio_sam0_port_set_bits_raw>:
	config->regs->OUTSET.reg = pins;
    2542:	6843      	ldr	r3, [r0, #4]
}
    2544:	2000      	movs	r0, #0
	config->regs->OUTSET.reg = pins;
    2546:	685b      	ldr	r3, [r3, #4]
    2548:	6199      	str	r1, [r3, #24]
}
    254a:	4770      	bx	lr

0000254c <gpio_sam0_port_clear_bits_raw>:
	config->regs->OUTCLR.reg = pins;
    254c:	6843      	ldr	r3, [r0, #4]
}
    254e:	2000      	movs	r0, #0
	config->regs->OUTCLR.reg = pins;
    2550:	685b      	ldr	r3, [r3, #4]
    2552:	6159      	str	r1, [r3, #20]
}
    2554:	4770      	bx	lr

00002556 <gpio_sam0_port_toggle_bits>:
	config->regs->OUTTGL.reg = pins;
    2556:	6843      	ldr	r3, [r0, #4]
}
    2558:	2000      	movs	r0, #0
	config->regs->OUTTGL.reg = pins;
    255a:	685b      	ldr	r3, [r3, #4]
    255c:	61d9      	str	r1, [r3, #28]
}
    255e:	4770      	bx	lr

00002560 <gpio_sam0_manage_callback>:


static int gpio_sam0_manage_callback(const struct device *dev,
				     struct gpio_callback *callback, bool set)
{
    2560:	b510      	push	{r4, lr}
	struct gpio_sam0_data *const data = dev->data;
    2562:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2564:	68d8      	ldr	r0, [r3, #12]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    2566:	2800      	cmp	r0, #0
    2568:	d021      	beq.n	25ae <gpio_sam0_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    256a:	4288      	cmp	r0, r1
    256c:	d11b      	bne.n	25a6 <gpio_sam0_manage_callback+0x46>
	return node->next;
    256e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    2570:	691c      	ldr	r4, [r3, #16]
	list->head = node;
    2572:	60d8      	str	r0, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
    2574:	42a1      	cmp	r1, r4
    2576:	d100      	bne.n	257a <gpio_sam0_manage_callback+0x1a>
	list->tail = node;
    2578:	6118      	str	r0, [r3, #16]
	parent->next = child;
    257a:	2000      	movs	r0, #0
    257c:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
    257e:	4282      	cmp	r2, r0
    2580:	d006      	beq.n	2590 <gpio_sam0_manage_callback+0x30>
	return list->head;
    2582:	68da      	ldr	r2, [r3, #12]
	parent->next = child;
    2584:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    2586:	691a      	ldr	r2, [r3, #16]
	list->head = node;
    2588:	60d9      	str	r1, [r3, #12]
Z_GENLIST_PREPEND(slist, snode)
    258a:	2a00      	cmp	r2, #0
    258c:	d100      	bne.n	2590 <gpio_sam0_manage_callback+0x30>
	list->tail = node;
    258e:	6119      	str	r1, [r3, #16]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2590:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->callbacks, callback, set);
    2592:	e010      	b.n	25b6 <gpio_sam0_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2594:	4281      	cmp	r1, r0
    2596:	d106      	bne.n	25a6 <gpio_sam0_manage_callback+0x46>
	return node->next;
    2598:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    259a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    259c:	6918      	ldr	r0, [r3, #16]
    259e:	4281      	cmp	r1, r0
    25a0:	d1eb      	bne.n	257a <gpio_sam0_manage_callback+0x1a>
	list->tail = node;
    25a2:	611c      	str	r4, [r3, #16]
}
    25a4:	e7e9      	b.n	257a <gpio_sam0_manage_callback+0x1a>
	return node->next;
    25a6:	0004      	movs	r4, r0
    25a8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    25aa:	2800      	cmp	r0, #0
    25ac:	d1f2      	bne.n	2594 <gpio_sam0_manage_callback+0x34>
			if (!set) {
    25ae:	2a00      	cmp	r2, #0
    25b0:	d1e7      	bne.n	2582 <gpio_sam0_manage_callback+0x22>
				return -EINVAL;
    25b2:	2016      	movs	r0, #22
    25b4:	4240      	negs	r0, r0
}
    25b6:	bd10      	pop	{r4, pc}

000025b8 <gpio_sam0_init>:
	.manage_callback = gpio_sam0_manage_callback,
	.get_pending_int = gpio_sam0_get_pending_int,
#endif
};

static int gpio_sam0_init(const struct device *dev) { return 0; }
    25b8:	2000      	movs	r0, #0
    25ba:	4770      	bx	lr

000025bc <gpio_sam0_get_pending_int>:
{
    25bc:	b510      	push	{r4, lr}
	return sam0_eic_interrupt_pending(config->id);
    25be:	6843      	ldr	r3, [r0, #4]
    25c0:	7a18      	ldrb	r0, [r3, #8]
    25c2:	f7fe fe1b 	bl	11fc <sam0_eic_interrupt_pending>
}
    25c6:	bd10      	pop	{r4, pc}

000025c8 <gpio_sam0_isr>:
{
    25c8:	b570      	push	{r4, r5, r6, lr}
    25ca:	000b      	movs	r3, r1
    25cc:	68c9      	ldr	r1, [r1, #12]
    25ce:	0005      	movs	r5, r0
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    25d0:	2900      	cmp	r1, #0
    25d2:	d003      	beq.n	25dc <gpio_sam0_isr+0x14>
	gpio_fire_callbacks(&data->callbacks, data->dev, pins);
    25d4:	685e      	ldr	r6, [r3, #4]
	return node->next;
    25d6:	680c      	ldr	r4, [r1, #0]
    25d8:	2900      	cmp	r1, #0
    25da:	d100      	bne.n	25de <gpio_sam0_isr+0x16>
}
    25dc:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    25de:	688b      	ldr	r3, [r1, #8]
    25e0:	001a      	movs	r2, r3
    25e2:	402a      	ands	r2, r5
    25e4:	422b      	tst	r3, r5
    25e6:	d002      	beq.n	25ee <gpio_sam0_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    25e8:	0030      	movs	r0, r6
    25ea:	684b      	ldr	r3, [r1, #4]
    25ec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    25ee:	1e23      	subs	r3, r4, #0
    25f0:	d000      	beq.n	25f4 <gpio_sam0_isr+0x2c>
    25f2:	6823      	ldr	r3, [r4, #0]
    25f4:	0021      	movs	r1, r4
    25f6:	001c      	movs	r4, r3
    25f8:	e7ee      	b.n	25d8 <gpio_sam0_isr+0x10>

000025fa <wait_synchronization>:
	while ((usart->SYNCBUSY.reg & SERCOM_USART_SYNCBUSY_MASK) != 0) {
    25fa:	2307      	movs	r3, #7
    25fc:	69c2      	ldr	r2, [r0, #28]
    25fe:	421a      	tst	r2, r3
    2600:	d1fc      	bne.n	25fc <wait_synchronization+0x2>
}
    2602:	4770      	bx	lr

00002604 <uart_sam0_poll_in>:

static int uart_sam0_poll_in(const struct device *dev, unsigned char *c)
{
	const struct uart_sam0_dev_cfg *config = dev->config;

	SercomUsart * const usart = config->regs;
    2604:	6843      	ldr	r3, [r0, #4]
    2606:	681b      	ldr	r3, [r3, #0]

	if (!usart->INTFLAG.bit.RXC) {
    2608:	7e1a      	ldrb	r2, [r3, #24]
    260a:	0752      	lsls	r2, r2, #29
    260c:	d503      	bpl.n	2616 <uart_sam0_poll_in+0x12>
		return -EBUSY;
	}

	*c = (unsigned char)usart->DATA.reg;
	return 0;
    260e:	2000      	movs	r0, #0
	*c = (unsigned char)usart->DATA.reg;
    2610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2612:	700b      	strb	r3, [r1, #0]
}
    2614:	4770      	bx	lr
		return -EBUSY;
    2616:	2010      	movs	r0, #16
    2618:	4240      	negs	r0, r0
    261a:	e7fb      	b.n	2614 <uart_sam0_poll_in+0x10>

0000261c <uart_sam0_poll_out>:

static void uart_sam0_poll_out(const struct device *dev, unsigned char c)
{
	const struct uart_sam0_dev_cfg *config = dev->config;

	SercomUsart * const usart = config->regs;
    261c:	6843      	ldr	r3, [r0, #4]
    261e:	681b      	ldr	r3, [r3, #0]

	while (!usart->INTFLAG.bit.DRE) {
    2620:	7e1a      	ldrb	r2, [r3, #24]
    2622:	07d2      	lsls	r2, r2, #31
    2624:	d5fc      	bpl.n	2620 <uart_sam0_poll_out+0x4>
	}

	/* send a character */
	usart->DATA.reg = c;
    2626:	8519      	strh	r1, [r3, #40]	; 0x28
}
    2628:	4770      	bx	lr

0000262a <uart_sam0_err_check>:

static int uart_sam0_err_check(const struct device *dev)
{
    262a:	b510      	push	{r4, lr}
	const struct uart_sam0_dev_cfg *config = dev->config;

	SercomUsart * const regs = config->regs;
    262c:	6843      	ldr	r3, [r0, #4]

	if (regs->STATUS.reg & SERCOM_USART_STATUS_BUFOVF) {
		err |= UART_ERROR_OVERRUN;
	}

	if (regs->STATUS.reg & SERCOM_USART_STATUS_FERR) {
    262e:	2202      	movs	r2, #2
	SercomUsart * const regs = config->regs;
    2630:	6818      	ldr	r0, [r3, #0]
	if (regs->STATUS.reg & SERCOM_USART_STATUS_BUFOVF) {
    2632:	2301      	movs	r3, #1
    2634:	8b44      	ldrh	r4, [r0, #26]
	if (regs->STATUS.reg & SERCOM_USART_STATUS_FERR) {
    2636:	8b41      	ldrh	r1, [r0, #26]
	if (regs->STATUS.reg & SERCOM_USART_STATUS_BUFOVF) {
    2638:	08a4      	lsrs	r4, r4, #2
    263a:	401c      	ands	r4, r3
	if (regs->STATUS.reg & SERCOM_USART_STATUS_FERR) {
    263c:	4211      	tst	r1, r2
    263e:	d000      	beq.n	2642 <uart_sam0_err_check+0x18>
		err |= UART_ERROR_PARITY;
    2640:	4314      	orrs	r4, r2
	}

	if (regs->STATUS.reg & SERCOM_USART_STATUS_PERR) {
    2642:	8b42      	ldrh	r2, [r0, #26]
    2644:	421a      	tst	r2, r3
    2646:	d001      	beq.n	264c <uart_sam0_err_check+0x22>
		err |= UART_ERROR_FRAMING;
    2648:	2304      	movs	r3, #4
    264a:	431c      	orrs	r4, r3
			 |	SERCOM_USART_STATUS_FERR
			 |	SERCOM_USART_STATUS_PERR
			 |	SERCOM_USART_STATUS_COLL
			 |	SERCOM_USART_STATUS_ISF;
#else
	regs->STATUS.reg |=	SERCOM_USART_STATUS_BUFOVF
    264c:	2307      	movs	r3, #7
    264e:	8b42      	ldrh	r2, [r0, #26]
    2650:	4313      	orrs	r3, r2
    2652:	8343      	strh	r3, [r0, #26]
			 |	SERCOM_USART_STATUS_FERR
			 |	SERCOM_USART_STATUS_PERR;
#endif

	wait_synchronization(regs);
    2654:	f7ff ffd1 	bl	25fa <wait_synchronization>
	return err;
}
    2658:	0020      	movs	r0, r4
    265a:	bd10      	pop	{r4, pc}

0000265c <uart_sam0_isr>:

#if CONFIG_UART_INTERRUPT_DRIVEN || CONFIG_UART_ASYNC_API

static void uart_sam0_isr(const struct device *dev)
{
    265c:	b510      	push	{r4, lr}
	struct uart_sam0_dev_data *const dev_data = dev->data;
    265e:	6902      	ldr	r2, [r0, #16]

#if CONFIG_UART_INTERRUPT_DRIVEN
	if (dev_data->cb) {
    2660:	6893      	ldr	r3, [r2, #8]
    2662:	2b00      	cmp	r3, #0
    2664:	d001      	beq.n	266a <uart_sam0_isr+0xe>
		dev_data->cb(dev, dev_data->cb_data);
    2666:	68d1      	ldr	r1, [r2, #12]
    2668:	4798      	blx	r3

		/* DMA will read the currently ready byte out */
		dma_start(cfg->dma_dev, cfg->rx_dma_channel);
	}
#endif
}
    266a:	bd10      	pop	{r4, pc}

0000266c <uart_sam0_fifo_fill>:

#if CONFIG_UART_INTERRUPT_DRIVEN

static int uart_sam0_fifo_fill(const struct device *dev,
			       const uint8_t *tx_data, int len)
{
    266c:	b510      	push	{r4, lr}
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart *regs = config->regs;
    266e:	6843      	ldr	r3, [r0, #4]
    2670:	681c      	ldr	r4, [r3, #0]

	if (regs->INTFLAG.bit.DRE && len >= 1) {
    2672:	7e23      	ldrb	r3, [r4, #24]
    2674:	07db      	lsls	r3, r3, #31
    2676:	0fd8      	lsrs	r0, r3, #31
    2678:	2b00      	cmp	r3, #0
    267a:	d005      	beq.n	2688 <uart_sam0_fifo_fill+0x1c>
		regs->DATA.reg = tx_data[0];
		return 1;
	} else {
		return 0;
    267c:	2000      	movs	r0, #0
	if (regs->INTFLAG.bit.DRE && len >= 1) {
    267e:	4282      	cmp	r2, r0
    2680:	dd02      	ble.n	2688 <uart_sam0_fifo_fill+0x1c>
		regs->DATA.reg = tx_data[0];
    2682:	780b      	ldrb	r3, [r1, #0]
		return 1;
    2684:	3001      	adds	r0, #1
		regs->DATA.reg = tx_data[0];
    2686:	8523      	strh	r3, [r4, #40]	; 0x28
	}
}
    2688:	bd10      	pop	{r4, pc}

0000268a <uart_sam0_irq_tx_enable>:
static void uart_sam0_irq_tx_enable(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;

	regs->INTENSET.reg = SERCOM_USART_INTENSET_DRE
    268a:	2203      	movs	r2, #3
	SercomUsart * const regs = config->regs;
    268c:	6843      	ldr	r3, [r0, #4]
    268e:	681b      	ldr	r3, [r3, #0]
	regs->INTENSET.reg = SERCOM_USART_INTENSET_DRE
    2690:	759a      	strb	r2, [r3, #22]
			   | SERCOM_USART_INTENSET_TXC;
}
    2692:	4770      	bx	lr

00002694 <uart_sam0_irq_tx_disable>:
static void uart_sam0_irq_tx_disable(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;

	regs->INTENCLR.reg = SERCOM_USART_INTENCLR_DRE
    2694:	2203      	movs	r2, #3
	SercomUsart * const regs = config->regs;
    2696:	6843      	ldr	r3, [r0, #4]
    2698:	681b      	ldr	r3, [r3, #0]
	regs->INTENCLR.reg = SERCOM_USART_INTENCLR_DRE
    269a:	751a      	strb	r2, [r3, #20]
			   | SERCOM_USART_INTENCLR_TXC;
}
    269c:	4770      	bx	lr

0000269e <uart_sam0_irq_tx_ready>:

static int uart_sam0_irq_tx_ready(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;
    269e:	6843      	ldr	r3, [r0, #4]

	return (regs->INTFLAG.bit.DRE != 0) && (regs->INTENSET.bit.DRE != 0);
    26a0:	2000      	movs	r0, #0
	SercomUsart * const regs = config->regs;
    26a2:	681b      	ldr	r3, [r3, #0]
	return (regs->INTFLAG.bit.DRE != 0) && (regs->INTENSET.bit.DRE != 0);
    26a4:	7e1a      	ldrb	r2, [r3, #24]
    26a6:	07d2      	lsls	r2, r2, #31
    26a8:	d502      	bpl.n	26b0 <uart_sam0_irq_tx_ready+0x12>
    26aa:	7d98      	ldrb	r0, [r3, #22]
    26ac:	07c0      	lsls	r0, r0, #31
    26ae:	0fc0      	lsrs	r0, r0, #31
}
    26b0:	4770      	bx	lr

000026b2 <uart_sam0_irq_tx_complete>:

static int uart_sam0_irq_tx_complete(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;
    26b2:	6843      	ldr	r3, [r0, #4]

	return (regs->INTFLAG.bit.TXC != 0) && (regs->INTENSET.bit.TXC != 0);
    26b4:	2000      	movs	r0, #0
	SercomUsart * const regs = config->regs;
    26b6:	681b      	ldr	r3, [r3, #0]
	return (regs->INTFLAG.bit.TXC != 0) && (regs->INTENSET.bit.TXC != 0);
    26b8:	7e1a      	ldrb	r2, [r3, #24]
    26ba:	0792      	lsls	r2, r2, #30
    26bc:	d502      	bpl.n	26c4 <uart_sam0_irq_tx_complete+0x12>
    26be:	7d98      	ldrb	r0, [r3, #22]
    26c0:	0780      	lsls	r0, r0, #30
    26c2:	0fc0      	lsrs	r0, r0, #31
}
    26c4:	4770      	bx	lr

000026c6 <uart_sam0_irq_rx_enable>:
static void uart_sam0_irq_rx_enable(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;

	regs->INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    26c6:	2204      	movs	r2, #4
	SercomUsart * const regs = config->regs;
    26c8:	6843      	ldr	r3, [r0, #4]
    26ca:	681b      	ldr	r3, [r3, #0]
	regs->INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    26cc:	759a      	strb	r2, [r3, #22]
}
    26ce:	4770      	bx	lr

000026d0 <uart_sam0_irq_rx_disable>:
static void uart_sam0_irq_rx_disable(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;

	regs->INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
    26d0:	2204      	movs	r2, #4
	SercomUsart * const regs = config->regs;
    26d2:	6843      	ldr	r3, [r0, #4]
    26d4:	681b      	ldr	r3, [r3, #0]
	regs->INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
    26d6:	751a      	strb	r2, [r3, #20]
}
    26d8:	4770      	bx	lr

000026da <uart_sam0_irq_rx_ready>:

static int uart_sam0_irq_rx_ready(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;
    26da:	6843      	ldr	r3, [r0, #4]
    26dc:	681b      	ldr	r3, [r3, #0]

	return regs->INTFLAG.bit.RXC != 0;
    26de:	7e18      	ldrb	r0, [r3, #24]
    26e0:	0740      	lsls	r0, r0, #29
    26e2:	0fc0      	lsrs	r0, r0, #31
}
    26e4:	4770      	bx	lr

000026e6 <uart_sam0_fifo_read>:

static int uart_sam0_fifo_read(const struct device *dev, uint8_t *rx_data,
			       const int size)
{
    26e6:	b510      	push	{r4, lr}
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;
    26e8:	6843      	ldr	r3, [r0, #4]
			return 1;
		} else {
			return -EINVAL;
		}
	}
	return 0;
    26ea:	2000      	movs	r0, #0
	SercomUsart * const regs = config->regs;
    26ec:	681b      	ldr	r3, [r3, #0]
	if (regs->INTFLAG.bit.RXC) {
    26ee:	7e1c      	ldrb	r4, [r3, #24]
    26f0:	0764      	lsls	r4, r4, #29
    26f2:	d505      	bpl.n	2700 <uart_sam0_fifo_read+0x1a>
		uint8_t ch = regs->DATA.reg;
    26f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    26f6:	b2db      	uxtb	r3, r3
		if (size >= 1) {
    26f8:	4282      	cmp	r2, r0
    26fa:	dd02      	ble.n	2702 <uart_sam0_fifo_read+0x1c>
			*rx_data = ch;
    26fc:	700b      	strb	r3, [r1, #0]
			return 1;
    26fe:	3001      	adds	r0, #1
}
    2700:	bd10      	pop	{r4, pc}
			return -EINVAL;
    2702:	2016      	movs	r0, #22
    2704:	4240      	negs	r0, r0
    2706:	e7fb      	b.n	2700 <uart_sam0_fifo_read+0x1a>

00002708 <uart_sam0_irq_is_pending>:

static int uart_sam0_irq_is_pending(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;
    2708:	6843      	ldr	r3, [r0, #4]
    270a:	681b      	ldr	r3, [r3, #0]

	return (regs->INTENSET.reg & regs->INTFLAG.reg) != 0;
    270c:	7d9a      	ldrb	r2, [r3, #22]
    270e:	7e18      	ldrb	r0, [r3, #24]
    2710:	4010      	ands	r0, r2
    2712:	1e43      	subs	r3, r0, #1
    2714:	4198      	sbcs	r0, r3
}
    2716:	4770      	bx	lr

00002718 <uart_sam0_irq_update>:
	regs->INTFLAG.reg |=	SERCOM_USART_INTENCLR_ERROR
			   |	SERCOM_USART_INTENCLR_RXBRK
			   |	SERCOM_USART_INTENCLR_CTSIC
			   |	SERCOM_USART_INTENCLR_RXS;
#else
	regs->INTFLAG.reg =	SERCOM_USART_INTENCLR_RXS;
    2718:	2208      	movs	r2, #8
	SercomUsart * const regs = config->regs;
    271a:	6843      	ldr	r3, [r0, #4]
#endif
	return 1;
}
    271c:	2001      	movs	r0, #1
	SercomUsart * const regs = config->regs;
    271e:	681b      	ldr	r3, [r3, #0]
	regs->INTFLAG.reg =	SERCOM_USART_INTENCLR_RXS;
    2720:	761a      	strb	r2, [r3, #24]
}
    2722:	4770      	bx	lr

00002724 <uart_sam0_irq_callback_set>:

static void uart_sam0_irq_callback_set(const struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	struct uart_sam0_dev_data *const dev_data = dev->data;
    2724:	6903      	ldr	r3, [r0, #16]

	dev_data->cb = cb;
    2726:	6099      	str	r1, [r3, #8]
	dev_data->cb_data = cb_data;
    2728:	60da      	str	r2, [r3, #12]
}
    272a:	4770      	bx	lr

0000272c <uart_sam0_config_get>:
{
    272c:	0003      	movs	r3, r0
    272e:	b510      	push	{r4, lr}
    2730:	0008      	movs	r0, r1
	memcpy(out_cfg, &(dev_data->config_cache),
    2732:	2208      	movs	r2, #8
    2734:	6919      	ldr	r1, [r3, #16]
    2736:	f7ff fea4 	bl	2482 <memcpy>
}
    273a:	2000      	movs	r0, #0
    273c:	bd10      	pop	{r4, pc}

0000273e <uart_sam0_irq_config_0>:
		    &uart_sam0_config_##n, PRE_KERNEL_1,		\
		    CONFIG_SERIAL_INIT_PRIORITY,			\
		    &uart_sam0_driver_api);				\
UART_SAM0_IRQ_HANDLER(n)

DT_INST_FOREACH_STATUS_OKAY(UART_SAM0_DEVICE_INIT)
    273e:	2200      	movs	r2, #0
    2740:	b510      	push	{r4, lr}
    2742:	0011      	movs	r1, r2
    2744:	2009      	movs	r0, #9
    2746:	f7fe fa77 	bl	c38 <z_arm_irq_priority_set>
    274a:	2009      	movs	r0, #9
    274c:	f7fe fa68 	bl	c20 <arch_irq_enable>
    2750:	bd10      	pop	{r4, pc}

00002752 <uart_sam0_irq_config_1>:
    2752:	2200      	movs	r2, #0
    2754:	b510      	push	{r4, lr}
    2756:	0011      	movs	r1, r2
    2758:	200a      	movs	r0, #10
    275a:	f7fe fa6d 	bl	c38 <z_arm_irq_priority_set>
    275e:	200a      	movs	r0, #10
    2760:	f7fe fa5e 	bl	c20 <arch_irq_enable>
    2764:	bd10      	pop	{r4, pc}

00002766 <uart_sam0_irq_config_2>:
    2766:	2200      	movs	r2, #0
    2768:	b510      	push	{r4, lr}
    276a:	0011      	movs	r1, r2
    276c:	200c      	movs	r0, #12
    276e:	f7fe fa63 	bl	c38 <z_arm_irq_priority_set>
    2772:	200c      	movs	r0, #12
    2774:	f7fe fa54 	bl	c20 <arch_irq_enable>
    2778:	bd10      	pop	{r4, pc}

0000277a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    277a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    277c:	6803      	ldr	r3, [r0, #0]
    277e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    2780:	7905      	ldrb	r5, [r0, #4]
    2782:	6804      	ldr	r4, [r0, #0]
    2784:	00ed      	lsls	r5, r5, #3
    2786:	1964      	adds	r4, r4, r5
    2788:	42a3      	cmp	r3, r4
    278a:	d302      	bcc.n	2792 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    278c:	2002      	movs	r0, #2
    278e:	4240      	negs	r0, r0
}
    2790:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    2792:	795c      	ldrb	r4, [r3, #5]
    2794:	428c      	cmp	r4, r1
    2796:	d001      	beq.n	279c <pinctrl_lookup_state+0x22>
		(*state)++;
    2798:	3308      	adds	r3, #8
    279a:	e7f0      	b.n	277e <pinctrl_lookup_state+0x4>
			return 0;
    279c:	2000      	movs	r0, #0
    279e:	e7f7      	b.n	2790 <pinctrl_lookup_state+0x16>

000027a0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    27a0:	4770      	bx	lr

000027a2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    27a2:	2800      	cmp	r0, #0
    27a4:	d009      	beq.n	27ba <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    27a6:	2301      	movs	r3, #1
    27a8:	68c2      	ldr	r2, [r0, #12]
    27aa:	2000      	movs	r0, #0
    27ac:	7851      	ldrb	r1, [r2, #1]
    27ae:	4219      	tst	r1, r3
    27b0:	d002      	beq.n	27b8 <z_device_is_ready+0x16>
    27b2:	7810      	ldrb	r0, [r2, #0]
    27b4:	4242      	negs	r2, r0
    27b6:	4150      	adcs	r0, r2
    27b8:	4018      	ands	r0, r3
}
    27ba:	4770      	bx	lr

000027bc <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
    27bc:	f3ef 8310 	mrs	r3, PRIMASK
    27c0:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    27c2:	e7fe      	b.n	27c2 <arch_system_halt+0x6>

000027c4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    27c4:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    27c6:	f7ff fff9 	bl	27bc <arch_system_halt>

000027ca <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    27ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27cc:	0005      	movs	r5, r0
    27ce:	000e      	movs	r6, r1
    27d0:	f3ef 8710 	mrs	r7, PRIMASK
    27d4:	b672      	cpsid	i
	return z_impl_z_current_get();
    27d6:	f7ff fb8b 	bl	1ef0 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    27da:	0031      	movs	r1, r6
    27dc:	0004      	movs	r4, r0
    27de:	0028      	movs	r0, r5
    27e0:	f7ff fff0 	bl	27c4 <k_sys_fatal_error_handler>
	if (key != 0U) {
    27e4:	2f00      	cmp	r7, #0
    27e6:	d102      	bne.n	27ee <z_fatal_error+0x24>
	__asm__ volatile(
    27e8:	b662      	cpsie	i
    27ea:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    27ee:	0020      	movs	r0, r4
    27f0:	f7fe fb7c 	bl	eec <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    27f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000027f6 <z_early_memset>:
{
    27f6:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
    27f8:	f7ff fe4c 	bl	2494 <memset>
}
    27fc:	bd10      	pop	{r4, pc}

000027fe <z_early_memcpy>:
{
    27fe:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
    2800:	f7ff fe3f 	bl	2482 <memcpy>
}
    2804:	bd10      	pop	{r4, pc}

00002806 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    2806:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    2808:	f3ef 8310 	mrs	r3, PRIMASK
    280c:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    280e:	f7fe f9ff 	bl	c10 <arch_cpu_idle>
    2812:	e7f9      	b.n	2808 <idle+0x2>

00002814 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    2814:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
    2816:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    2818:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    281a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    281c:	2300      	movs	r3, #0
    281e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    2820:	6043      	str	r3, [r0, #4]
	sys_dnode_init(node);
}
    2822:	4770      	bx	lr

00002824 <unpend_thread_no_timeout>:
{
    2824:	b510      	push	{r4, lr}
    2826:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    2828:	f7ff fff4 	bl	2814 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    282c:	2202      	movs	r2, #2
    282e:	7b63      	ldrb	r3, [r4, #13]
    2830:	4393      	bics	r3, r2
    2832:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    2834:	2300      	movs	r3, #0
    2836:	60a3      	str	r3, [r4, #8]
}
    2838:	bd10      	pop	{r4, pc}

0000283a <z_thread_timeout>:
	struct k_thread *thread = CONTAINER_OF(timeout,
    283a:	3818      	subs	r0, #24
{
    283c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = CONTAINER_OF(timeout,
    283e:	0004      	movs	r4, r0
    2840:	f3ef 8510 	mrs	r5, PRIMASK
    2844:	b672      	cpsid	i
		if (!killed) {
    2846:	2328      	movs	r3, #40	; 0x28
    2848:	7b42      	ldrb	r2, [r0, #13]
    284a:	421a      	tst	r2, r3
    284c:	d10b      	bne.n	2866 <z_thread_timeout+0x2c>
			if (thread->base.pended_on != NULL) {
    284e:	6883      	ldr	r3, [r0, #8]
    2850:	2b00      	cmp	r3, #0
    2852:	d001      	beq.n	2858 <z_thread_timeout+0x1e>
				unpend_thread_no_timeout(thread);
    2854:	f7ff ffe6 	bl	2824 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    2858:	2214      	movs	r2, #20
    285a:	7b63      	ldrb	r3, [r4, #13]
			ready_thread(thread);
    285c:	0020      	movs	r0, r4
    285e:	4393      	bics	r3, r2
    2860:	7363      	strb	r3, [r4, #13]
    2862:	f7ff f96f 	bl	1b44 <ready_thread>
	if (key != 0U) {
    2866:	2d00      	cmp	r5, #0
    2868:	d102      	bne.n	2870 <z_thread_timeout+0x36>
	__asm__ volatile(
    286a:	b662      	cpsie	i
    286c:	f3bf 8f6f 	isb	sy
}
    2870:	bd70      	pop	{r4, r5, r6, pc}

00002872 <z_ready_thread>:
{
    2872:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    2874:	f3ef 8410 	mrs	r4, PRIMASK
    2878:	b672      	cpsid	i
			ready_thread(thread);
    287a:	f7ff f963 	bl	1b44 <ready_thread>
	if (key != 0U) {
    287e:	2c00      	cmp	r4, #0
    2880:	d102      	bne.n	2888 <z_ready_thread+0x16>
	__asm__ volatile(
    2882:	b662      	cpsie	i
    2884:	f3bf 8f6f 	isb	sy
}
    2888:	bd10      	pop	{r4, pc}

0000288a <z_reschedule_irqlock>:
{
    288a:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    288c:	2800      	cmp	r0, #0
    288e:	d105      	bne.n	289c <z_reschedule_irqlock+0x12>
    2890:	f3ef 8005 	mrs	r0, IPSR
    2894:	2800      	cmp	r0, #0
    2896:	d102      	bne.n	289e <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
    2898:	f7fe fa10 	bl	cbc <arch_swap>
}
    289c:	bd10      	pop	{r4, pc}
    289e:	b662      	cpsie	i
    28a0:	f3bf 8f6f 	isb	sy
    28a4:	e7fa      	b.n	289c <z_reschedule_irqlock+0x12>

000028a6 <z_reschedule_unlocked>:
{
    28a6:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    28a8:	f3ef 8010 	mrs	r0, PRIMASK
    28ac:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
    28ae:	f7ff ffec 	bl	288a <z_reschedule_irqlock>
}
    28b2:	bd10      	pop	{r4, pc}

000028b4 <z_abort_timeout>:
{
    28b4:	b510      	push	{r4, lr}
    28b6:	f3ef 8410 	mrs	r4, PRIMASK
    28ba:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
    28bc:	6803      	ldr	r3, [r0, #0]
    28be:	2b00      	cmp	r3, #0
    28c0:	d008      	beq.n	28d4 <z_abort_timeout+0x20>
			remove_timeout(to);
    28c2:	f7ff fbc9 	bl	2058 <remove_timeout>
			ret = 0;
    28c6:	2000      	movs	r0, #0
	if (key != 0U) {
    28c8:	2c00      	cmp	r4, #0
    28ca:	d102      	bne.n	28d2 <z_abort_timeout+0x1e>
	__asm__ volatile(
    28cc:	b662      	cpsie	i
    28ce:	f3bf 8f6f 	isb	sy
}
    28d2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    28d4:	2016      	movs	r0, #22
    28d6:	4240      	negs	r0, r0
    28d8:	e7f6      	b.n	28c8 <z_abort_timeout+0x14>

000028da <z_set_timeout_expiry>:
{
    28da:	b570      	push	{r4, r5, r6, lr}
    28dc:	0004      	movs	r4, r0
    28de:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
    28e0:	f3ef 8610 	mrs	r6, PRIMASK
    28e4:	b672      	cpsid	i
		int next_to = next_timeout();
    28e6:	f7ff fb8b 	bl	2000 <next_timeout>
			      || (ticks <= next_to);
    28ea:	2801      	cmp	r0, #1
    28ec:	dd06      	ble.n	28fc <z_set_timeout_expiry+0x22>
    28ee:	42a0      	cmp	r0, r4
    28f0:	db04      	blt.n	28fc <z_set_timeout_expiry+0x22>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    28f2:	dd00      	ble.n	28f6 <z_set_timeout_expiry+0x1c>
    28f4:	0020      	movs	r0, r4
    28f6:	0029      	movs	r1, r5
    28f8:	f7fe feac 	bl	1654 <sys_clock_set_timeout>
	if (key != 0U) {
    28fc:	2e00      	cmp	r6, #0
    28fe:	d102      	bne.n	2906 <z_set_timeout_expiry+0x2c>
	__asm__ volatile(
    2900:	b662      	cpsie	i
    2902:	f3bf 8f6f 	isb	sy
}
    2906:	bd70      	pop	{r4, r5, r6, pc}

00002908 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    2908:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    290a:	f7ff fca7 	bl	225c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    290e:	bd10      	pop	{r4, pc}
